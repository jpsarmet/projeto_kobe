2024-04-14 16:13:44,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-14 16:13:44,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-14 16:13:44,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-14 16:13:44,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-15 06:04:33,909:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-15 06:04:33,909:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-15 06:04:33,909:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-15 06:04:33,909:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-04-15 08:18:37,294:INFO:PyCaret ClassificationExperiment
2024-04-15 08:18:37,294:INFO:Logging name: clf-default-name
2024-04-15 08:18:37,294:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:18:37,294:INFO:version 3.2.0
2024-04-15 08:18:37,294:INFO:Initializing setup()
2024-04-15 08:18:37,294:INFO:self.USI: 4361
2024-04-15 08:18:37,294:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:18:37,294:INFO:Checking environment
2024-04-15 08:18:37,294:INFO:python_version: 3.8.0
2024-04-15 08:18:37,294:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:18:37,294:INFO:machine: AMD64
2024-04-15 08:18:37,294:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:18:37,299:INFO:Memory: svmem(total=34301427712, available=18086129664, percent=47.3, used=16215298048, free=18086129664)
2024-04-15 08:18:37,299:INFO:Physical Core: 6
2024-04-15 08:18:37,299:INFO:Logical Core: 12
2024-04-15 08:18:37,299:INFO:Checking libraries
2024-04-15 08:18:37,299:INFO:System:
2024-04-15 08:18:37,299:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:18:37,299:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:18:37,299:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:18:37,299:INFO:PyCaret required dependencies:
2024-04-15 08:18:37,352:INFO:                 pip: 19.2.3
2024-04-15 08:18:37,352:INFO:          setuptools: 41.2.0
2024-04-15 08:18:37,352:INFO:             pycaret: 3.2.0
2024-04-15 08:18:37,352:INFO:             IPython: 8.12.3
2024-04-15 08:18:37,352:INFO:          ipywidgets: 8.1.2
2024-04-15 08:18:37,352:INFO:                tqdm: 4.66.2
2024-04-15 08:18:37,352:INFO:               numpy: 1.24.4
2024-04-15 08:18:37,352:INFO:              pandas: 1.5.3
2024-04-15 08:18:37,352:INFO:              jinja2: 3.1.3
2024-04-15 08:18:37,352:INFO:               scipy: 1.10.1
2024-04-15 08:18:37,352:INFO:              joblib: 1.3.2
2024-04-15 08:18:37,352:INFO:             sklearn: 1.2.0
2024-04-15 08:18:37,352:INFO:                pyod: 1.1.3
2024-04-15 08:18:37,352:INFO:            imblearn: 0.12.2
2024-04-15 08:18:37,352:INFO:   category_encoders: 2.6.3
2024-04-15 08:18:37,352:INFO:            lightgbm: 4.3.0
2024-04-15 08:18:37,352:INFO:               numba: 0.58.1
2024-04-15 08:18:37,352:INFO:            requests: 2.31.0
2024-04-15 08:18:37,352:INFO:          matplotlib: 3.6.0
2024-04-15 08:18:37,352:INFO:          scikitplot: 0.3.7
2024-04-15 08:18:37,352:INFO:         yellowbrick: 1.5
2024-04-15 08:18:37,353:INFO:              plotly: 5.20.0
2024-04-15 08:18:37,353:INFO:    plotly-resampler: Not installed
2024-04-15 08:18:37,353:INFO:             kaleido: 0.2.1
2024-04-15 08:18:37,353:INFO:           schemdraw: 0.15
2024-04-15 08:18:37,353:INFO:         statsmodels: 0.14.1
2024-04-15 08:18:37,353:INFO:              sktime: 0.21.1
2024-04-15 08:18:37,353:INFO:               tbats: 1.1.3
2024-04-15 08:18:37,353:INFO:            pmdarima: 2.0.4
2024-04-15 08:18:37,353:INFO:              psutil: 5.9.8
2024-04-15 08:18:37,353:INFO:          markupsafe: 2.1.5
2024-04-15 08:18:37,353:INFO:             pickle5: Not installed
2024-04-15 08:18:37,353:INFO:         cloudpickle: 3.0.0
2024-04-15 08:18:37,353:INFO:         deprecation: 2.1.0
2024-04-15 08:18:37,353:INFO:              xxhash: 3.4.1
2024-04-15 08:18:37,353:INFO:           wurlitzer: Not installed
2024-04-15 08:18:37,353:INFO:PyCaret optional dependencies:
2024-04-15 08:18:37,361:INFO:                shap: Not installed
2024-04-15 08:18:37,362:INFO:           interpret: Not installed
2024-04-15 08:18:37,362:INFO:                umap: Not installed
2024-04-15 08:18:37,362:INFO:     ydata_profiling: Not installed
2024-04-15 08:18:37,362:INFO:  explainerdashboard: Not installed
2024-04-15 08:18:37,362:INFO:             autoviz: Not installed
2024-04-15 08:18:37,362:INFO:           fairlearn: Not installed
2024-04-15 08:18:37,362:INFO:          deepchecks: Not installed
2024-04-15 08:18:37,362:INFO:             xgboost: Not installed
2024-04-15 08:18:37,362:INFO:            catboost: Not installed
2024-04-15 08:18:37,362:INFO:              kmodes: Not installed
2024-04-15 08:18:37,362:INFO:             mlxtend: Not installed
2024-04-15 08:18:37,362:INFO:       statsforecast: Not installed
2024-04-15 08:18:37,362:INFO:        tune_sklearn: Not installed
2024-04-15 08:18:37,362:INFO:                 ray: Not installed
2024-04-15 08:18:37,362:INFO:            hyperopt: Not installed
2024-04-15 08:18:37,362:INFO:              optuna: Not installed
2024-04-15 08:18:37,362:INFO:               skopt: Not installed
2024-04-15 08:18:37,362:INFO:              mlflow: 2.11.3
2024-04-15 08:18:37,362:INFO:              gradio: Not installed
2024-04-15 08:18:37,362:INFO:             fastapi: Not installed
2024-04-15 08:18:37,362:INFO:             uvicorn: Not installed
2024-04-15 08:18:37,362:INFO:              m2cgen: Not installed
2024-04-15 08:18:37,362:INFO:           evidently: Not installed
2024-04-15 08:18:37,362:INFO:               fugue: Not installed
2024-04-15 08:18:37,362:INFO:           streamlit: 1.33.0
2024-04-15 08:18:37,362:INFO:             prophet: Not installed
2024-04-15 08:18:37,362:INFO:None
2024-04-15 08:18:37,362:INFO:Set up data.
2024-04-15 08:23:57,789:INFO:PyCaret ClassificationExperiment
2024-04-15 08:23:57,789:INFO:Logging name: clf-default-name
2024-04-15 08:23:57,789:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:23:57,789:INFO:version 3.2.0
2024-04-15 08:23:57,789:INFO:Initializing setup()
2024-04-15 08:23:57,789:INFO:self.USI: 9007
2024-04-15 08:23:57,790:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:23:57,790:INFO:Checking environment
2024-04-15 08:23:57,790:INFO:python_version: 3.8.0
2024-04-15 08:23:57,790:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:23:57,790:INFO:machine: AMD64
2024-04-15 08:23:57,790:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:23:57,796:INFO:Memory: svmem(total=34301427712, available=18057572352, percent=47.4, used=16243855360, free=18057572352)
2024-04-15 08:23:57,796:INFO:Physical Core: 6
2024-04-15 08:23:57,796:INFO:Logical Core: 12
2024-04-15 08:23:57,796:INFO:Checking libraries
2024-04-15 08:23:57,796:INFO:System:
2024-04-15 08:23:57,796:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:23:57,796:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:23:57,796:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:23:57,796:INFO:PyCaret required dependencies:
2024-04-15 08:23:57,796:INFO:                 pip: 19.2.3
2024-04-15 08:23:57,796:INFO:          setuptools: 41.2.0
2024-04-15 08:23:57,796:INFO:             pycaret: 3.2.0
2024-04-15 08:23:57,796:INFO:             IPython: 8.12.3
2024-04-15 08:23:57,797:INFO:          ipywidgets: 8.1.2
2024-04-15 08:23:57,797:INFO:                tqdm: 4.66.2
2024-04-15 08:23:57,797:INFO:               numpy: 1.24.4
2024-04-15 08:23:57,797:INFO:              pandas: 1.5.3
2024-04-15 08:23:57,797:INFO:              jinja2: 3.1.3
2024-04-15 08:23:57,797:INFO:               scipy: 1.10.1
2024-04-15 08:23:57,797:INFO:              joblib: 1.3.2
2024-04-15 08:23:57,797:INFO:             sklearn: 1.2.0
2024-04-15 08:23:57,797:INFO:                pyod: 1.1.3
2024-04-15 08:23:57,797:INFO:            imblearn: 0.12.2
2024-04-15 08:23:57,797:INFO:   category_encoders: 2.6.3
2024-04-15 08:23:57,797:INFO:            lightgbm: 4.3.0
2024-04-15 08:23:57,797:INFO:               numba: 0.58.1
2024-04-15 08:23:57,797:INFO:            requests: 2.31.0
2024-04-15 08:23:57,797:INFO:          matplotlib: 3.6.0
2024-04-15 08:23:57,797:INFO:          scikitplot: 0.3.7
2024-04-15 08:23:57,797:INFO:         yellowbrick: 1.5
2024-04-15 08:23:57,797:INFO:              plotly: 5.20.0
2024-04-15 08:23:57,797:INFO:    plotly-resampler: Not installed
2024-04-15 08:23:57,797:INFO:             kaleido: 0.2.1
2024-04-15 08:23:57,797:INFO:           schemdraw: 0.15
2024-04-15 08:23:57,797:INFO:         statsmodels: 0.14.1
2024-04-15 08:23:57,797:INFO:              sktime: 0.21.1
2024-04-15 08:23:57,797:INFO:               tbats: 1.1.3
2024-04-15 08:23:57,797:INFO:            pmdarima: 2.0.4
2024-04-15 08:23:57,797:INFO:              psutil: 5.9.8
2024-04-15 08:23:57,797:INFO:          markupsafe: 2.1.5
2024-04-15 08:23:57,797:INFO:             pickle5: Not installed
2024-04-15 08:23:57,797:INFO:         cloudpickle: 3.0.0
2024-04-15 08:23:57,797:INFO:         deprecation: 2.1.0
2024-04-15 08:23:57,797:INFO:              xxhash: 3.4.1
2024-04-15 08:23:57,797:INFO:           wurlitzer: Not installed
2024-04-15 08:23:57,797:INFO:PyCaret optional dependencies:
2024-04-15 08:23:57,797:INFO:                shap: Not installed
2024-04-15 08:23:57,797:INFO:           interpret: Not installed
2024-04-15 08:23:57,797:INFO:                umap: Not installed
2024-04-15 08:23:57,797:INFO:     ydata_profiling: Not installed
2024-04-15 08:23:57,798:INFO:  explainerdashboard: Not installed
2024-04-15 08:23:57,798:INFO:             autoviz: Not installed
2024-04-15 08:23:57,798:INFO:           fairlearn: Not installed
2024-04-15 08:23:57,798:INFO:          deepchecks: Not installed
2024-04-15 08:23:57,798:INFO:             xgboost: Not installed
2024-04-15 08:23:57,798:INFO:            catboost: Not installed
2024-04-15 08:23:57,798:INFO:              kmodes: Not installed
2024-04-15 08:23:57,798:INFO:             mlxtend: Not installed
2024-04-15 08:23:57,798:INFO:       statsforecast: Not installed
2024-04-15 08:23:57,798:INFO:        tune_sklearn: Not installed
2024-04-15 08:23:57,798:INFO:                 ray: Not installed
2024-04-15 08:23:57,798:INFO:            hyperopt: Not installed
2024-04-15 08:23:57,798:INFO:              optuna: Not installed
2024-04-15 08:23:57,798:INFO:               skopt: Not installed
2024-04-15 08:23:57,798:INFO:              mlflow: 2.11.3
2024-04-15 08:23:57,798:INFO:              gradio: Not installed
2024-04-15 08:23:57,798:INFO:             fastapi: Not installed
2024-04-15 08:23:57,798:INFO:             uvicorn: Not installed
2024-04-15 08:23:57,798:INFO:              m2cgen: Not installed
2024-04-15 08:23:57,798:INFO:           evidently: Not installed
2024-04-15 08:23:57,798:INFO:               fugue: Not installed
2024-04-15 08:23:57,798:INFO:           streamlit: 1.33.0
2024-04-15 08:23:57,798:INFO:             prophet: Not installed
2024-04-15 08:23:57,798:INFO:None
2024-04-15 08:23:57,798:INFO:Set up data.
2024-04-15 08:23:57,803:INFO:Set up folding strategy.
2024-04-15 08:23:57,803:INFO:Set up train/test split.
2024-04-15 08:23:57,803:INFO:Set up data.
2024-04-15 08:23:57,806:INFO:Set up index.
2024-04-15 08:23:57,806:INFO:Assigning column types.
2024-04-15 08:23:57,809:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:23:57,851:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:23:57,854:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:23:57,885:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:57,885:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:57,923:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:23:57,924:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:23:57,947:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:57,948:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:57,948:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:23:57,990:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:23:58,013:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,013:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,048:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:23:58,070:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,071:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:23:58,130:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,191:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,191:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,194:INFO:Preparing preprocessing pipeline...
2024-04-15 08:23:58,195:INFO:Set up simple imputation.
2024-04-15 08:23:58,195:INFO:Set up feature normalization.
2024-04-15 08:23:58,215:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:23:58,219:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:23:58,219:INFO:Creating final display dataframe.
2024-04-15 08:23:58,279:INFO:Setup _display_container:                     Description             Value
0                    Session id              7410
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              9007
2024-04-15 08:23:58,367:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,368:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:23:58,432:INFO:setup() successfully completed in 0.64s...............
2024-04-15 08:23:58,432:INFO:Initializing compare_models()
2024-04-15 08:23:58,432:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:23:58,432:INFO:Checking exceptions
2024-04-15 08:23:58,436:INFO:Preparing display monitor
2024-04-15 08:23:58,454:INFO:Initializing Logistic Regression
2024-04-15 08:23:58,454:INFO:Total runtime is 0.0 minutes
2024-04-15 08:23:58,457:INFO:SubProcess create_model() called ==================================
2024-04-15 08:23:58,457:INFO:Initializing create_model()
2024-04-15 08:23:58,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58891CD90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:23:58,457:INFO:Checking exceptions
2024-04-15 08:23:58,458:INFO:Importing libraries
2024-04-15 08:23:58,458:INFO:Copying training dataset
2024-04-15 08:23:58,464:INFO:Defining folds
2024-04-15 08:23:58,465:INFO:Declaring metric variables
2024-04-15 08:23:58,470:INFO:Importing untrained model
2024-04-15 08:23:58,474:INFO:Logistic Regression Imported successfully
2024-04-15 08:23:58,482:INFO:Starting cross validation
2024-04-15 08:23:58,483:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:24:02,387:INFO:Calculating mean and std
2024-04-15 08:24:02,391:INFO:Creating metrics dataframe
2024-04-15 08:24:02,397:INFO:Uploading results into container
2024-04-15 08:24:02,398:INFO:Uploading model into container now
2024-04-15 08:24:02,399:INFO:_master_model_container: 1
2024-04-15 08:24:02,399:INFO:_display_container: 2
2024-04-15 08:24:02,400:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7410, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:24:02,400:INFO:create_model() successfully completed......................................
2024-04-15 08:24:02,630:INFO:SubProcess create_model() end ==================================
2024-04-15 08:24:02,630:INFO:Creating metrics dataframe
2024-04-15 08:24:02,639:INFO:Initializing Decision Tree Classifier
2024-04-15 08:24:02,640:INFO:Total runtime is 0.06976814270019531 minutes
2024-04-15 08:24:02,642:INFO:SubProcess create_model() called ==================================
2024-04-15 08:24:02,642:INFO:Initializing create_model()
2024-04-15 08:24:02,642:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58891CD90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:24:02,642:INFO:Checking exceptions
2024-04-15 08:24:02,642:INFO:Importing libraries
2024-04-15 08:24:02,643:INFO:Copying training dataset
2024-04-15 08:24:02,647:INFO:Defining folds
2024-04-15 08:24:02,647:INFO:Declaring metric variables
2024-04-15 08:24:02,650:INFO:Importing untrained model
2024-04-15 08:24:02,653:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:24:02,659:INFO:Starting cross validation
2024-04-15 08:24:02,660:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:24:04,458:INFO:Calculating mean and std
2024-04-15 08:24:04,459:INFO:Creating metrics dataframe
2024-04-15 08:24:04,464:INFO:Uploading results into container
2024-04-15 08:24:04,464:INFO:Uploading model into container now
2024-04-15 08:24:04,465:INFO:_master_model_container: 2
2024-04-15 08:24:04,465:INFO:_display_container: 2
2024-04-15 08:24:04,466:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7410, splitter='best')
2024-04-15 08:24:04,466:INFO:create_model() successfully completed......................................
2024-04-15 08:24:04,667:INFO:SubProcess create_model() end ==================================
2024-04-15 08:24:04,667:INFO:Creating metrics dataframe
2024-04-15 08:24:04,681:INFO:Initializing create_model()
2024-04-15 08:24:04,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7410, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:24:04,681:INFO:Checking exceptions
2024-04-15 08:24:04,682:INFO:Importing libraries
2024-04-15 08:24:04,682:INFO:Copying training dataset
2024-04-15 08:24:04,687:INFO:Defining folds
2024-04-15 08:24:04,687:INFO:Declaring metric variables
2024-04-15 08:24:04,687:INFO:Importing untrained model
2024-04-15 08:24:04,687:INFO:Declaring custom model
2024-04-15 08:24:04,688:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:24:04,688:INFO:Cross validation set to False
2024-04-15 08:24:04,688:INFO:Fitting Model
2024-04-15 08:24:04,741:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7410, splitter='best')
2024-04-15 08:24:04,741:INFO:create_model() successfully completed......................................
2024-04-15 08:24:04,929:INFO:Initializing create_model()
2024-04-15 08:24:04,929:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7410, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:24:04,929:INFO:Checking exceptions
2024-04-15 08:24:04,930:INFO:Importing libraries
2024-04-15 08:24:04,931:INFO:Copying training dataset
2024-04-15 08:24:04,934:INFO:Defining folds
2024-04-15 08:24:04,934:INFO:Declaring metric variables
2024-04-15 08:24:04,935:INFO:Importing untrained model
2024-04-15 08:24:04,935:INFO:Declaring custom model
2024-04-15 08:24:04,935:INFO:Logistic Regression Imported successfully
2024-04-15 08:24:04,936:INFO:Cross validation set to False
2024-04-15 08:24:04,936:INFO:Fitting Model
2024-04-15 08:24:04,953:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7410, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:24:04,953:INFO:create_model() successfully completed......................................
2024-04-15 08:24:05,151:INFO:_master_model_container: 2
2024-04-15 08:24:05,151:INFO:_display_container: 2
2024-04-15 08:24:05,151:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7410, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7410, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:24:05,151:INFO:compare_models() successfully completed......................................
2024-04-15 08:24:05,152:INFO:Initializing predict_model()
2024-04-15 08:24:05,152:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588538F70>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7410, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C587F178B0>)
2024-04-15 08:24:05,152:INFO:Checking exceptions
2024-04-15 08:24:05,152:INFO:Preloading libraries
2024-04-15 08:29:55,445:INFO:PyCaret ClassificationExperiment
2024-04-15 08:29:55,445:INFO:Logging name: clf-default-name
2024-04-15 08:29:55,445:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:29:55,445:INFO:version 3.2.0
2024-04-15 08:29:55,445:INFO:Initializing setup()
2024-04-15 08:29:55,445:INFO:self.USI: 257d
2024-04-15 08:29:55,445:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:29:55,445:INFO:Checking environment
2024-04-15 08:29:55,445:INFO:python_version: 3.8.0
2024-04-15 08:29:55,446:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:29:55,446:INFO:machine: AMD64
2024-04-15 08:29:55,446:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:29:55,452:INFO:Memory: svmem(total=34301427712, available=17942233088, percent=47.7, used=16359194624, free=17942233088)
2024-04-15 08:29:55,452:INFO:Physical Core: 6
2024-04-15 08:29:55,452:INFO:Logical Core: 12
2024-04-15 08:29:55,452:INFO:Checking libraries
2024-04-15 08:29:55,453:INFO:System:
2024-04-15 08:29:55,453:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:29:55,453:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:29:55,453:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:29:55,453:INFO:PyCaret required dependencies:
2024-04-15 08:29:55,453:INFO:                 pip: 19.2.3
2024-04-15 08:29:55,453:INFO:          setuptools: 41.2.0
2024-04-15 08:29:55,453:INFO:             pycaret: 3.2.0
2024-04-15 08:29:55,453:INFO:             IPython: 8.12.3
2024-04-15 08:29:55,453:INFO:          ipywidgets: 8.1.2
2024-04-15 08:29:55,453:INFO:                tqdm: 4.66.2
2024-04-15 08:29:55,453:INFO:               numpy: 1.24.4
2024-04-15 08:29:55,453:INFO:              pandas: 1.5.3
2024-04-15 08:29:55,453:INFO:              jinja2: 3.1.3
2024-04-15 08:29:55,453:INFO:               scipy: 1.10.1
2024-04-15 08:29:55,453:INFO:              joblib: 1.3.2
2024-04-15 08:29:55,453:INFO:             sklearn: 1.2.0
2024-04-15 08:29:55,453:INFO:                pyod: 1.1.3
2024-04-15 08:29:55,453:INFO:            imblearn: 0.12.2
2024-04-15 08:29:55,453:INFO:   category_encoders: 2.6.3
2024-04-15 08:29:55,453:INFO:            lightgbm: 4.3.0
2024-04-15 08:29:55,453:INFO:               numba: 0.58.1
2024-04-15 08:29:55,453:INFO:            requests: 2.31.0
2024-04-15 08:29:55,453:INFO:          matplotlib: 3.6.0
2024-04-15 08:29:55,453:INFO:          scikitplot: 0.3.7
2024-04-15 08:29:55,453:INFO:         yellowbrick: 1.5
2024-04-15 08:29:55,453:INFO:              plotly: 5.20.0
2024-04-15 08:29:55,453:INFO:    plotly-resampler: Not installed
2024-04-15 08:29:55,453:INFO:             kaleido: 0.2.1
2024-04-15 08:29:55,453:INFO:           schemdraw: 0.15
2024-04-15 08:29:55,453:INFO:         statsmodels: 0.14.1
2024-04-15 08:29:55,453:INFO:              sktime: 0.21.1
2024-04-15 08:29:55,453:INFO:               tbats: 1.1.3
2024-04-15 08:29:55,453:INFO:            pmdarima: 2.0.4
2024-04-15 08:29:55,453:INFO:              psutil: 5.9.8
2024-04-15 08:29:55,453:INFO:          markupsafe: 2.1.5
2024-04-15 08:29:55,454:INFO:             pickle5: Not installed
2024-04-15 08:29:55,454:INFO:         cloudpickle: 3.0.0
2024-04-15 08:29:55,454:INFO:         deprecation: 2.1.0
2024-04-15 08:29:55,454:INFO:              xxhash: 3.4.1
2024-04-15 08:29:55,454:INFO:           wurlitzer: Not installed
2024-04-15 08:29:55,454:INFO:PyCaret optional dependencies:
2024-04-15 08:29:55,454:INFO:                shap: Not installed
2024-04-15 08:29:55,454:INFO:           interpret: Not installed
2024-04-15 08:29:55,454:INFO:                umap: Not installed
2024-04-15 08:29:55,454:INFO:     ydata_profiling: Not installed
2024-04-15 08:29:55,454:INFO:  explainerdashboard: Not installed
2024-04-15 08:29:55,454:INFO:             autoviz: Not installed
2024-04-15 08:29:55,454:INFO:           fairlearn: Not installed
2024-04-15 08:29:55,454:INFO:          deepchecks: Not installed
2024-04-15 08:29:55,454:INFO:             xgboost: Not installed
2024-04-15 08:29:55,454:INFO:            catboost: Not installed
2024-04-15 08:29:55,454:INFO:              kmodes: Not installed
2024-04-15 08:29:55,454:INFO:             mlxtend: Not installed
2024-04-15 08:29:55,454:INFO:       statsforecast: Not installed
2024-04-15 08:29:55,454:INFO:        tune_sklearn: Not installed
2024-04-15 08:29:55,454:INFO:                 ray: Not installed
2024-04-15 08:29:55,454:INFO:            hyperopt: Not installed
2024-04-15 08:29:55,454:INFO:              optuna: Not installed
2024-04-15 08:29:55,454:INFO:               skopt: Not installed
2024-04-15 08:29:55,454:INFO:              mlflow: 2.11.3
2024-04-15 08:29:55,454:INFO:              gradio: Not installed
2024-04-15 08:29:55,454:INFO:             fastapi: Not installed
2024-04-15 08:29:55,454:INFO:             uvicorn: Not installed
2024-04-15 08:29:55,454:INFO:              m2cgen: Not installed
2024-04-15 08:29:55,454:INFO:           evidently: Not installed
2024-04-15 08:29:55,454:INFO:               fugue: Not installed
2024-04-15 08:29:55,454:INFO:           streamlit: 1.33.0
2024-04-15 08:29:55,454:INFO:             prophet: Not installed
2024-04-15 08:29:55,455:INFO:None
2024-04-15 08:29:55,455:INFO:Set up data.
2024-04-15 08:29:55,459:INFO:Set up folding strategy.
2024-04-15 08:29:55,459:INFO:Set up train/test split.
2024-04-15 08:29:55,459:INFO:Set up data.
2024-04-15 08:29:55,462:INFO:Set up index.
2024-04-15 08:29:55,463:INFO:Assigning column types.
2024-04-15 08:29:55,465:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:29:55,503:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:29:55,504:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:29:55,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,567:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:29:55,567:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:29:55,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,593:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:29:55,630:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:29:55,653:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,692:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:29:55,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,714:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,714:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:29:55,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,777:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,836:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,836:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,838:INFO:Preparing preprocessing pipeline...
2024-04-15 08:29:55,839:INFO:Set up simple imputation.
2024-04-15 08:29:55,839:INFO:Set up feature normalization.
2024-04-15 08:29:55,856:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:29:55,860:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:29:55,860:INFO:Creating final display dataframe.
2024-04-15 08:29:55,923:INFO:Setup _display_container:                     Description             Value
0                    Session id              5632
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              257d
2024-04-15 08:29:55,990:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:55,990:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:56,051:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:56,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:29:56,052:INFO:setup() successfully completed in 0.61s...............
2024-04-15 08:29:56,053:INFO:Initializing compare_models()
2024-04-15 08:29:56,053:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:29:56,053:INFO:Checking exceptions
2024-04-15 08:29:56,056:INFO:Preparing display monitor
2024-04-15 08:29:56,073:INFO:Initializing Logistic Regression
2024-04-15 08:29:56,073:INFO:Total runtime is 0.0 minutes
2024-04-15 08:29:56,075:INFO:SubProcess create_model() called ==================================
2024-04-15 08:29:56,076:INFO:Initializing create_model()
2024-04-15 08:29:56,076:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5889C4220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:29:56,076:INFO:Checking exceptions
2024-04-15 08:29:56,076:INFO:Importing libraries
2024-04-15 08:29:56,076:INFO:Copying training dataset
2024-04-15 08:29:56,080:INFO:Defining folds
2024-04-15 08:29:56,081:INFO:Declaring metric variables
2024-04-15 08:29:56,084:INFO:Importing untrained model
2024-04-15 08:29:56,087:INFO:Logistic Regression Imported successfully
2024-04-15 08:29:56,093:INFO:Starting cross validation
2024-04-15 08:29:56,094:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:29:59,909:INFO:Calculating mean and std
2024-04-15 08:29:59,912:INFO:Creating metrics dataframe
2024-04-15 08:29:59,918:INFO:Uploading results into container
2024-04-15 08:29:59,918:INFO:Uploading model into container now
2024-04-15 08:29:59,919:INFO:_master_model_container: 1
2024-04-15 08:29:59,919:INFO:_display_container: 2
2024-04-15 08:29:59,920:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:29:59,920:INFO:create_model() successfully completed......................................
2024-04-15 08:30:00,145:INFO:SubProcess create_model() end ==================================
2024-04-15 08:30:00,145:INFO:Creating metrics dataframe
2024-04-15 08:30:00,151:INFO:Initializing Decision Tree Classifier
2024-04-15 08:30:00,151:INFO:Total runtime is 0.06796534061431884 minutes
2024-04-15 08:30:00,153:INFO:SubProcess create_model() called ==================================
2024-04-15 08:30:00,153:INFO:Initializing create_model()
2024-04-15 08:30:00,153:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5889C4220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:30:00,153:INFO:Checking exceptions
2024-04-15 08:30:00,154:INFO:Importing libraries
2024-04-15 08:30:00,154:INFO:Copying training dataset
2024-04-15 08:30:00,158:INFO:Defining folds
2024-04-15 08:30:00,158:INFO:Declaring metric variables
2024-04-15 08:30:00,161:INFO:Importing untrained model
2024-04-15 08:30:00,165:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:30:00,169:INFO:Starting cross validation
2024-04-15 08:30:00,170:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:30:01,964:INFO:Calculating mean and std
2024-04-15 08:30:01,965:INFO:Creating metrics dataframe
2024-04-15 08:30:01,971:INFO:Uploading results into container
2024-04-15 08:30:01,972:INFO:Uploading model into container now
2024-04-15 08:30:01,972:INFO:_master_model_container: 2
2024-04-15 08:30:01,972:INFO:_display_container: 2
2024-04-15 08:30:01,973:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5632, splitter='best')
2024-04-15 08:30:01,973:INFO:create_model() successfully completed......................................
2024-04-15 08:30:02,188:INFO:SubProcess create_model() end ==================================
2024-04-15 08:30:02,188:INFO:Creating metrics dataframe
2024-04-15 08:30:02,203:INFO:Initializing create_model()
2024-04-15 08:30:02,203:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5632, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:30:02,203:INFO:Checking exceptions
2024-04-15 08:30:02,204:INFO:Importing libraries
2024-04-15 08:30:02,204:INFO:Copying training dataset
2024-04-15 08:30:02,209:INFO:Defining folds
2024-04-15 08:30:02,209:INFO:Declaring metric variables
2024-04-15 08:30:02,209:INFO:Importing untrained model
2024-04-15 08:30:02,209:INFO:Declaring custom model
2024-04-15 08:30:02,209:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:30:02,210:INFO:Cross validation set to False
2024-04-15 08:30:02,210:INFO:Fitting Model
2024-04-15 08:30:02,262:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5632, splitter='best')
2024-04-15 08:30:02,262:INFO:create_model() successfully completed......................................
2024-04-15 08:30:02,463:INFO:Initializing create_model()
2024-04-15 08:30:02,463:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:30:02,464:INFO:Checking exceptions
2024-04-15 08:30:02,465:INFO:Importing libraries
2024-04-15 08:30:02,465:INFO:Copying training dataset
2024-04-15 08:30:02,468:INFO:Defining folds
2024-04-15 08:30:02,468:INFO:Declaring metric variables
2024-04-15 08:30:02,469:INFO:Importing untrained model
2024-04-15 08:30:02,469:INFO:Declaring custom model
2024-04-15 08:30:02,469:INFO:Logistic Regression Imported successfully
2024-04-15 08:30:02,470:INFO:Cross validation set to False
2024-04-15 08:30:02,470:INFO:Fitting Model
2024-04-15 08:30:02,487:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:30:02,487:INFO:create_model() successfully completed......................................
2024-04-15 08:30:02,692:INFO:_master_model_container: 2
2024-04-15 08:30:02,693:INFO:_display_container: 2
2024-04-15 08:30:02,693:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5632, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:30:02,694:INFO:compare_models() successfully completed......................................
2024-04-15 08:30:02,694:INFO:Initializing predict_model()
2024-04-15 08:30:02,694:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587E0DCD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5632, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C585F02EE0>)
2024-04-15 08:30:02,694:INFO:Checking exceptions
2024-04-15 08:30:02,694:INFO:Preloading libraries
2024-04-15 08:35:22,348:INFO:PyCaret ClassificationExperiment
2024-04-15 08:35:22,348:INFO:Logging name: clf-default-name
2024-04-15 08:35:22,348:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:35:22,348:INFO:version 3.2.0
2024-04-15 08:35:22,348:INFO:Initializing setup()
2024-04-15 08:35:22,348:INFO:self.USI: 01cc
2024-04-15 08:35:22,348:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:35:22,348:INFO:Checking environment
2024-04-15 08:35:22,348:INFO:python_version: 3.8.0
2024-04-15 08:35:22,348:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:35:22,348:INFO:machine: AMD64
2024-04-15 08:35:22,348:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:35:22,355:INFO:Memory: svmem(total=34301427712, available=17886429184, percent=47.9, used=16414998528, free=17886429184)
2024-04-15 08:35:22,355:INFO:Physical Core: 6
2024-04-15 08:35:22,355:INFO:Logical Core: 12
2024-04-15 08:35:22,355:INFO:Checking libraries
2024-04-15 08:35:22,355:INFO:System:
2024-04-15 08:35:22,355:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:35:22,355:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:35:22,355:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:35:22,355:INFO:PyCaret required dependencies:
2024-04-15 08:35:22,355:INFO:                 pip: 19.2.3
2024-04-15 08:35:22,355:INFO:          setuptools: 41.2.0
2024-04-15 08:35:22,355:INFO:             pycaret: 3.2.0
2024-04-15 08:35:22,355:INFO:             IPython: 8.12.3
2024-04-15 08:35:22,355:INFO:          ipywidgets: 8.1.2
2024-04-15 08:35:22,355:INFO:                tqdm: 4.66.2
2024-04-15 08:35:22,355:INFO:               numpy: 1.24.4
2024-04-15 08:35:22,355:INFO:              pandas: 1.5.3
2024-04-15 08:35:22,355:INFO:              jinja2: 3.1.3
2024-04-15 08:35:22,355:INFO:               scipy: 1.10.1
2024-04-15 08:35:22,355:INFO:              joblib: 1.3.2
2024-04-15 08:35:22,356:INFO:             sklearn: 1.2.0
2024-04-15 08:35:22,356:INFO:                pyod: 1.1.3
2024-04-15 08:35:22,356:INFO:            imblearn: 0.12.2
2024-04-15 08:35:22,356:INFO:   category_encoders: 2.6.3
2024-04-15 08:35:22,356:INFO:            lightgbm: 4.3.0
2024-04-15 08:35:22,356:INFO:               numba: 0.58.1
2024-04-15 08:35:22,356:INFO:            requests: 2.31.0
2024-04-15 08:35:22,356:INFO:          matplotlib: 3.6.0
2024-04-15 08:35:22,356:INFO:          scikitplot: 0.3.7
2024-04-15 08:35:22,356:INFO:         yellowbrick: 1.5
2024-04-15 08:35:22,356:INFO:              plotly: 5.20.0
2024-04-15 08:35:22,356:INFO:    plotly-resampler: Not installed
2024-04-15 08:35:22,356:INFO:             kaleido: 0.2.1
2024-04-15 08:35:22,356:INFO:           schemdraw: 0.15
2024-04-15 08:35:22,356:INFO:         statsmodels: 0.14.1
2024-04-15 08:35:22,356:INFO:              sktime: 0.21.1
2024-04-15 08:35:22,356:INFO:               tbats: 1.1.3
2024-04-15 08:35:22,356:INFO:            pmdarima: 2.0.4
2024-04-15 08:35:22,356:INFO:              psutil: 5.9.8
2024-04-15 08:35:22,356:INFO:          markupsafe: 2.1.5
2024-04-15 08:35:22,356:INFO:             pickle5: Not installed
2024-04-15 08:35:22,356:INFO:         cloudpickle: 3.0.0
2024-04-15 08:35:22,356:INFO:         deprecation: 2.1.0
2024-04-15 08:35:22,356:INFO:              xxhash: 3.4.1
2024-04-15 08:35:22,356:INFO:           wurlitzer: Not installed
2024-04-15 08:35:22,356:INFO:PyCaret optional dependencies:
2024-04-15 08:35:22,356:INFO:                shap: Not installed
2024-04-15 08:35:22,356:INFO:           interpret: Not installed
2024-04-15 08:35:22,356:INFO:                umap: Not installed
2024-04-15 08:35:22,356:INFO:     ydata_profiling: Not installed
2024-04-15 08:35:22,356:INFO:  explainerdashboard: Not installed
2024-04-15 08:35:22,356:INFO:             autoviz: Not installed
2024-04-15 08:35:22,356:INFO:           fairlearn: Not installed
2024-04-15 08:35:22,356:INFO:          deepchecks: Not installed
2024-04-15 08:35:22,356:INFO:             xgboost: Not installed
2024-04-15 08:35:22,357:INFO:            catboost: Not installed
2024-04-15 08:35:22,357:INFO:              kmodes: Not installed
2024-04-15 08:35:22,357:INFO:             mlxtend: Not installed
2024-04-15 08:35:22,357:INFO:       statsforecast: Not installed
2024-04-15 08:35:22,357:INFO:        tune_sklearn: Not installed
2024-04-15 08:35:22,357:INFO:                 ray: Not installed
2024-04-15 08:35:22,357:INFO:            hyperopt: Not installed
2024-04-15 08:35:22,357:INFO:              optuna: Not installed
2024-04-15 08:35:22,357:INFO:               skopt: Not installed
2024-04-15 08:35:22,357:INFO:              mlflow: 2.11.3
2024-04-15 08:35:22,357:INFO:              gradio: Not installed
2024-04-15 08:35:22,357:INFO:             fastapi: Not installed
2024-04-15 08:35:22,357:INFO:             uvicorn: Not installed
2024-04-15 08:35:22,357:INFO:              m2cgen: Not installed
2024-04-15 08:35:22,357:INFO:           evidently: Not installed
2024-04-15 08:35:22,357:INFO:               fugue: Not installed
2024-04-15 08:35:22,357:INFO:           streamlit: 1.33.0
2024-04-15 08:35:22,357:INFO:             prophet: Not installed
2024-04-15 08:35:22,357:INFO:None
2024-04-15 08:35:22,357:INFO:Set up data.
2024-04-15 08:35:22,361:INFO:Set up folding strategy.
2024-04-15 08:35:22,361:INFO:Set up train/test split.
2024-04-15 08:35:22,361:INFO:Set up data.
2024-04-15 08:35:22,364:INFO:Set up index.
2024-04-15 08:35:22,364:INFO:Assigning column types.
2024-04-15 08:35:22,367:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:35:22,402:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:35:22,403:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:22,426:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,426:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,461:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:35:22,462:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:22,485:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,485:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,485:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:35:22,522:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:22,543:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,544:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,582:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:22,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,604:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,604:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:35:22,663:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,663:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,722:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,723:INFO:Preparing preprocessing pipeline...
2024-04-15 08:35:22,724:INFO:Set up simple imputation.
2024-04-15 08:35:22,724:INFO:Set up feature normalization.
2024-04-15 08:35:22,742:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:35:22,744:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:35:22,745:INFO:Creating final display dataframe.
2024-04-15 08:35:22,807:INFO:Setup _display_container:                     Description             Value
0                    Session id              5510
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              01cc
2024-04-15 08:35:22,875:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,875:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,937:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,937:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:22,938:INFO:setup() successfully completed in 0.59s...............
2024-04-15 08:35:22,939:INFO:Initializing compare_models()
2024-04-15 08:35:22,939:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:35:22,939:INFO:Checking exceptions
2024-04-15 08:35:22,942:INFO:Preparing display monitor
2024-04-15 08:35:22,958:INFO:Initializing Logistic Regression
2024-04-15 08:35:22,958:INFO:Total runtime is 0.0 minutes
2024-04-15 08:35:22,960:INFO:SubProcess create_model() called ==================================
2024-04-15 08:35:22,961:INFO:Initializing create_model()
2024-04-15 08:35:22,961:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C587DC74F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:35:22,961:INFO:Checking exceptions
2024-04-15 08:35:22,961:INFO:Importing libraries
2024-04-15 08:35:22,961:INFO:Copying training dataset
2024-04-15 08:35:22,966:INFO:Defining folds
2024-04-15 08:35:22,966:INFO:Declaring metric variables
2024-04-15 08:35:22,970:INFO:Importing untrained model
2024-04-15 08:35:22,974:INFO:Logistic Regression Imported successfully
2024-04-15 08:35:22,979:INFO:Starting cross validation
2024-04-15 08:35:22,980:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:35:26,798:INFO:Calculating mean and std
2024-04-15 08:35:26,800:INFO:Creating metrics dataframe
2024-04-15 08:35:26,807:INFO:Uploading results into container
2024-04-15 08:35:26,808:INFO:Uploading model into container now
2024-04-15 08:35:26,808:INFO:_master_model_container: 1
2024-04-15 08:35:26,809:INFO:_display_container: 2
2024-04-15 08:35:26,809:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5510, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:35:26,809:INFO:create_model() successfully completed......................................
2024-04-15 08:35:27,066:INFO:SubProcess create_model() end ==================================
2024-04-15 08:35:27,066:INFO:Creating metrics dataframe
2024-04-15 08:35:27,073:INFO:Initializing Decision Tree Classifier
2024-04-15 08:35:27,073:INFO:Total runtime is 0.06858214934666952 minutes
2024-04-15 08:35:27,075:INFO:SubProcess create_model() called ==================================
2024-04-15 08:35:27,076:INFO:Initializing create_model()
2024-04-15 08:35:27,076:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C587DC74F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:35:27,076:INFO:Checking exceptions
2024-04-15 08:35:27,076:INFO:Importing libraries
2024-04-15 08:35:27,076:INFO:Copying training dataset
2024-04-15 08:35:27,081:INFO:Defining folds
2024-04-15 08:35:27,081:INFO:Declaring metric variables
2024-04-15 08:35:27,084:INFO:Importing untrained model
2024-04-15 08:35:27,087:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:35:27,092:INFO:Starting cross validation
2024-04-15 08:35:27,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:35:28,987:INFO:Calculating mean and std
2024-04-15 08:35:28,989:INFO:Creating metrics dataframe
2024-04-15 08:35:28,993:INFO:Uploading results into container
2024-04-15 08:35:28,993:INFO:Uploading model into container now
2024-04-15 08:35:28,994:INFO:_master_model_container: 2
2024-04-15 08:35:28,994:INFO:_display_container: 2
2024-04-15 08:35:28,994:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5510, splitter='best')
2024-04-15 08:35:28,994:INFO:create_model() successfully completed......................................
2024-04-15 08:35:29,215:INFO:SubProcess create_model() end ==================================
2024-04-15 08:35:29,215:INFO:Creating metrics dataframe
2024-04-15 08:35:29,230:INFO:Initializing create_model()
2024-04-15 08:35:29,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5510, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:35:29,230:INFO:Checking exceptions
2024-04-15 08:35:29,231:INFO:Importing libraries
2024-04-15 08:35:29,231:INFO:Copying training dataset
2024-04-15 08:35:29,236:INFO:Defining folds
2024-04-15 08:35:29,236:INFO:Declaring metric variables
2024-04-15 08:35:29,236:INFO:Importing untrained model
2024-04-15 08:35:29,236:INFO:Declaring custom model
2024-04-15 08:35:29,236:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:35:29,237:INFO:Cross validation set to False
2024-04-15 08:35:29,237:INFO:Fitting Model
2024-04-15 08:35:29,289:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5510, splitter='best')
2024-04-15 08:35:29,289:INFO:create_model() successfully completed......................................
2024-04-15 08:35:29,487:INFO:Initializing create_model()
2024-04-15 08:35:29,487:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5510, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:35:29,487:INFO:Checking exceptions
2024-04-15 08:35:29,489:INFO:Importing libraries
2024-04-15 08:35:29,489:INFO:Copying training dataset
2024-04-15 08:35:29,493:INFO:Defining folds
2024-04-15 08:35:29,493:INFO:Declaring metric variables
2024-04-15 08:35:29,493:INFO:Importing untrained model
2024-04-15 08:35:29,493:INFO:Declaring custom model
2024-04-15 08:35:29,494:INFO:Logistic Regression Imported successfully
2024-04-15 08:35:29,494:INFO:Cross validation set to False
2024-04-15 08:35:29,494:INFO:Fitting Model
2024-04-15 08:35:29,511:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5510, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:35:29,511:INFO:create_model() successfully completed......................................
2024-04-15 08:35:29,719:INFO:_master_model_container: 2
2024-04-15 08:35:29,719:INFO:_display_container: 2
2024-04-15 08:35:29,719:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5510, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5510, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:35:29,720:INFO:compare_models() successfully completed......................................
2024-04-15 08:35:29,720:INFO:Initializing predict_model()
2024-04-15 08:35:29,720:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C584F39DF0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5510, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C588419E50>)
2024-04-15 08:35:29,720:INFO:Checking exceptions
2024-04-15 08:35:29,721:INFO:Preloading libraries
2024-04-15 08:35:54,431:INFO:PyCaret ClassificationExperiment
2024-04-15 08:35:54,431:INFO:Logging name: clf-default-name
2024-04-15 08:35:54,432:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:35:54,432:INFO:version 3.2.0
2024-04-15 08:35:54,432:INFO:Initializing setup()
2024-04-15 08:35:54,432:INFO:self.USI: 9d17
2024-04-15 08:35:54,432:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:35:54,432:INFO:Checking environment
2024-04-15 08:35:54,432:INFO:python_version: 3.8.0
2024-04-15 08:35:54,432:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:35:54,432:INFO:machine: AMD64
2024-04-15 08:35:54,432:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:35:54,438:INFO:Memory: svmem(total=34301427712, available=18005217280, percent=47.5, used=16296210432, free=18005217280)
2024-04-15 08:35:54,438:INFO:Physical Core: 6
2024-04-15 08:35:54,438:INFO:Logical Core: 12
2024-04-15 08:35:54,438:INFO:Checking libraries
2024-04-15 08:35:54,438:INFO:System:
2024-04-15 08:35:54,438:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:35:54,438:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:35:54,439:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:35:54,439:INFO:PyCaret required dependencies:
2024-04-15 08:35:54,439:INFO:                 pip: 19.2.3
2024-04-15 08:35:54,439:INFO:          setuptools: 41.2.0
2024-04-15 08:35:54,439:INFO:             pycaret: 3.2.0
2024-04-15 08:35:54,439:INFO:             IPython: 8.12.3
2024-04-15 08:35:54,439:INFO:          ipywidgets: 8.1.2
2024-04-15 08:35:54,439:INFO:                tqdm: 4.66.2
2024-04-15 08:35:54,439:INFO:               numpy: 1.24.4
2024-04-15 08:35:54,439:INFO:              pandas: 1.5.3
2024-04-15 08:35:54,439:INFO:              jinja2: 3.1.3
2024-04-15 08:35:54,439:INFO:               scipy: 1.10.1
2024-04-15 08:35:54,439:INFO:              joblib: 1.3.2
2024-04-15 08:35:54,439:INFO:             sklearn: 1.2.0
2024-04-15 08:35:54,439:INFO:                pyod: 1.1.3
2024-04-15 08:35:54,439:INFO:            imblearn: 0.12.2
2024-04-15 08:35:54,439:INFO:   category_encoders: 2.6.3
2024-04-15 08:35:54,439:INFO:            lightgbm: 4.3.0
2024-04-15 08:35:54,439:INFO:               numba: 0.58.1
2024-04-15 08:35:54,439:INFO:            requests: 2.31.0
2024-04-15 08:35:54,439:INFO:          matplotlib: 3.6.0
2024-04-15 08:35:54,439:INFO:          scikitplot: 0.3.7
2024-04-15 08:35:54,439:INFO:         yellowbrick: 1.5
2024-04-15 08:35:54,439:INFO:              plotly: 5.20.0
2024-04-15 08:35:54,439:INFO:    plotly-resampler: Not installed
2024-04-15 08:35:54,439:INFO:             kaleido: 0.2.1
2024-04-15 08:35:54,439:INFO:           schemdraw: 0.15
2024-04-15 08:35:54,439:INFO:         statsmodels: 0.14.1
2024-04-15 08:35:54,439:INFO:              sktime: 0.21.1
2024-04-15 08:35:54,440:INFO:               tbats: 1.1.3
2024-04-15 08:35:54,440:INFO:            pmdarima: 2.0.4
2024-04-15 08:35:54,440:INFO:              psutil: 5.9.8
2024-04-15 08:35:54,440:INFO:          markupsafe: 2.1.5
2024-04-15 08:35:54,440:INFO:             pickle5: Not installed
2024-04-15 08:35:54,440:INFO:         cloudpickle: 3.0.0
2024-04-15 08:35:54,440:INFO:         deprecation: 2.1.0
2024-04-15 08:35:54,440:INFO:              xxhash: 3.4.1
2024-04-15 08:35:54,440:INFO:           wurlitzer: Not installed
2024-04-15 08:35:54,440:INFO:PyCaret optional dependencies:
2024-04-15 08:35:54,440:INFO:                shap: Not installed
2024-04-15 08:35:54,440:INFO:           interpret: Not installed
2024-04-15 08:35:54,440:INFO:                umap: Not installed
2024-04-15 08:35:54,440:INFO:     ydata_profiling: Not installed
2024-04-15 08:35:54,440:INFO:  explainerdashboard: Not installed
2024-04-15 08:35:54,440:INFO:             autoviz: Not installed
2024-04-15 08:35:54,440:INFO:           fairlearn: Not installed
2024-04-15 08:35:54,440:INFO:          deepchecks: Not installed
2024-04-15 08:35:54,440:INFO:             xgboost: Not installed
2024-04-15 08:35:54,440:INFO:            catboost: Not installed
2024-04-15 08:35:54,440:INFO:              kmodes: Not installed
2024-04-15 08:35:54,440:INFO:             mlxtend: Not installed
2024-04-15 08:35:54,440:INFO:       statsforecast: Not installed
2024-04-15 08:35:54,440:INFO:        tune_sklearn: Not installed
2024-04-15 08:35:54,440:INFO:                 ray: Not installed
2024-04-15 08:35:54,440:INFO:            hyperopt: Not installed
2024-04-15 08:35:54,440:INFO:              optuna: Not installed
2024-04-15 08:35:54,440:INFO:               skopt: Not installed
2024-04-15 08:35:54,440:INFO:              mlflow: 2.11.3
2024-04-15 08:35:54,440:INFO:              gradio: Not installed
2024-04-15 08:35:54,440:INFO:             fastapi: Not installed
2024-04-15 08:35:54,440:INFO:             uvicorn: Not installed
2024-04-15 08:35:54,440:INFO:              m2cgen: Not installed
2024-04-15 08:35:54,441:INFO:           evidently: Not installed
2024-04-15 08:35:54,441:INFO:               fugue: Not installed
2024-04-15 08:35:54,441:INFO:           streamlit: 1.33.0
2024-04-15 08:35:54,441:INFO:             prophet: Not installed
2024-04-15 08:35:54,441:INFO:None
2024-04-15 08:35:54,441:INFO:Set up data.
2024-04-15 08:35:54,446:INFO:Set up folding strategy.
2024-04-15 08:35:54,446:INFO:Set up train/test split.
2024-04-15 08:35:54,446:INFO:Set up data.
2024-04-15 08:35:54,450:INFO:Set up index.
2024-04-15 08:35:54,450:INFO:Assigning column types.
2024-04-15 08:35:54,452:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:35:54,492:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:35:54,493:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:54,516:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,556:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:35:54,557:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:54,581:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,582:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:35:54,619:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:54,645:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,646:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,692:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:35:54,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,715:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:35:54,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,777:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,836:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,837:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,838:INFO:Preparing preprocessing pipeline...
2024-04-15 08:35:54,839:INFO:Set up simple imputation.
2024-04-15 08:35:54,839:INFO:Set up feature normalization.
2024-04-15 08:35:54,855:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:35:54,859:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:35:54,859:INFO:Creating final display dataframe.
2024-04-15 08:35:54,923:INFO:Setup _display_container:                     Description             Value
0                    Session id              2456
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              9d17
2024-04-15 08:35:54,991:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:54,992:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:55,052:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:55,053:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:35:55,053:INFO:setup() successfully completed in 0.62s...............
2024-04-15 08:35:55,054:INFO:Initializing compare_models()
2024-04-15 08:35:55,054:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:35:55,054:INFO:Checking exceptions
2024-04-15 08:35:55,058:INFO:Preparing display monitor
2024-04-15 08:35:55,073:INFO:Initializing Logistic Regression
2024-04-15 08:35:55,074:INFO:Total runtime is 1.6669432322184246e-05 minutes
2024-04-15 08:35:55,076:INFO:SubProcess create_model() called ==================================
2024-04-15 08:35:55,077:INFO:Initializing create_model()
2024-04-15 08:35:55,077:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5889CF2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:35:55,077:INFO:Checking exceptions
2024-04-15 08:35:55,077:INFO:Importing libraries
2024-04-15 08:35:55,077:INFO:Copying training dataset
2024-04-15 08:35:55,082:INFO:Defining folds
2024-04-15 08:35:55,082:INFO:Declaring metric variables
2024-04-15 08:35:55,085:INFO:Importing untrained model
2024-04-15 08:35:55,088:INFO:Logistic Regression Imported successfully
2024-04-15 08:35:55,092:INFO:Starting cross validation
2024-04-15 08:35:55,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:35:59,018:INFO:Calculating mean and std
2024-04-15 08:35:59,020:INFO:Creating metrics dataframe
2024-04-15 08:35:59,025:INFO:Uploading results into container
2024-04-15 08:35:59,026:INFO:Uploading model into container now
2024-04-15 08:35:59,027:INFO:_master_model_container: 1
2024-04-15 08:35:59,027:INFO:_display_container: 2
2024-04-15 08:35:59,027:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2456, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:35:59,028:INFO:create_model() successfully completed......................................
2024-04-15 08:35:59,270:INFO:SubProcess create_model() end ==================================
2024-04-15 08:35:59,270:INFO:Creating metrics dataframe
2024-04-15 08:35:59,277:INFO:Initializing Decision Tree Classifier
2024-04-15 08:35:59,277:INFO:Total runtime is 0.07006607453028361 minutes
2024-04-15 08:35:59,279:INFO:SubProcess create_model() called ==================================
2024-04-15 08:35:59,279:INFO:Initializing create_model()
2024-04-15 08:35:59,280:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5889CF2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:35:59,280:INFO:Checking exceptions
2024-04-15 08:35:59,280:INFO:Importing libraries
2024-04-15 08:35:59,280:INFO:Copying training dataset
2024-04-15 08:35:59,284:INFO:Defining folds
2024-04-15 08:35:59,284:INFO:Declaring metric variables
2024-04-15 08:35:59,286:INFO:Importing untrained model
2024-04-15 08:35:59,288:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:35:59,294:INFO:Starting cross validation
2024-04-15 08:35:59,295:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:36:01,113:INFO:Calculating mean and std
2024-04-15 08:36:01,115:INFO:Creating metrics dataframe
2024-04-15 08:36:01,118:INFO:Uploading results into container
2024-04-15 08:36:01,119:INFO:Uploading model into container now
2024-04-15 08:36:01,119:INFO:_master_model_container: 2
2024-04-15 08:36:01,120:INFO:_display_container: 2
2024-04-15 08:36:01,120:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2456, splitter='best')
2024-04-15 08:36:01,120:INFO:create_model() successfully completed......................................
2024-04-15 08:36:01,336:INFO:SubProcess create_model() end ==================================
2024-04-15 08:36:01,336:INFO:Creating metrics dataframe
2024-04-15 08:36:01,350:INFO:Initializing create_model()
2024-04-15 08:36:01,350:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2456, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:36:01,350:INFO:Checking exceptions
2024-04-15 08:36:01,352:INFO:Importing libraries
2024-04-15 08:36:01,352:INFO:Copying training dataset
2024-04-15 08:36:01,356:INFO:Defining folds
2024-04-15 08:36:01,356:INFO:Declaring metric variables
2024-04-15 08:36:01,356:INFO:Importing untrained model
2024-04-15 08:36:01,356:INFO:Declaring custom model
2024-04-15 08:36:01,356:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:36:01,357:INFO:Cross validation set to False
2024-04-15 08:36:01,357:INFO:Fitting Model
2024-04-15 08:36:01,411:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2456, splitter='best')
2024-04-15 08:36:01,411:INFO:create_model() successfully completed......................................
2024-04-15 08:36:01,609:INFO:Initializing create_model()
2024-04-15 08:36:01,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2456, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:36:01,609:INFO:Checking exceptions
2024-04-15 08:36:01,611:INFO:Importing libraries
2024-04-15 08:36:01,611:INFO:Copying training dataset
2024-04-15 08:36:01,615:INFO:Defining folds
2024-04-15 08:36:01,615:INFO:Declaring metric variables
2024-04-15 08:36:01,615:INFO:Importing untrained model
2024-04-15 08:36:01,615:INFO:Declaring custom model
2024-04-15 08:36:01,615:INFO:Logistic Regression Imported successfully
2024-04-15 08:36:01,616:INFO:Cross validation set to False
2024-04-15 08:36:01,616:INFO:Fitting Model
2024-04-15 08:36:01,632:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2456, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:36:01,632:INFO:create_model() successfully completed......................................
2024-04-15 08:36:01,850:INFO:_master_model_container: 2
2024-04-15 08:36:01,851:INFO:_display_container: 2
2024-04-15 08:36:01,851:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2456, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2456, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:36:01,851:INFO:compare_models() successfully completed......................................
2024-04-15 08:36:01,852:INFO:Initializing predict_model()
2024-04-15 08:36:01,852:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586395EE0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2456, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C584BDE160>)
2024-04-15 08:36:01,852:INFO:Checking exceptions
2024-04-15 08:36:01,852:INFO:Preloading libraries
2024-04-15 08:36:14,103:INFO:PyCaret ClassificationExperiment
2024-04-15 08:36:14,103:INFO:Logging name: clf-default-name
2024-04-15 08:36:14,103:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:36:14,103:INFO:version 3.2.0
2024-04-15 08:36:14,103:INFO:Initializing setup()
2024-04-15 08:36:14,103:INFO:self.USI: 618d
2024-04-15 08:36:14,103:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:36:14,103:INFO:Checking environment
2024-04-15 08:36:14,103:INFO:python_version: 3.8.0
2024-04-15 08:36:14,103:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:36:14,104:INFO:machine: AMD64
2024-04-15 08:36:14,104:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:36:14,111:INFO:Memory: svmem(total=34301427712, available=17970839552, percent=47.6, used=16330588160, free=17970839552)
2024-04-15 08:36:14,111:INFO:Physical Core: 6
2024-04-15 08:36:14,111:INFO:Logical Core: 12
2024-04-15 08:36:14,111:INFO:Checking libraries
2024-04-15 08:36:14,111:INFO:System:
2024-04-15 08:36:14,111:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:36:14,111:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:36:14,111:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:36:14,112:INFO:PyCaret required dependencies:
2024-04-15 08:36:14,112:INFO:                 pip: 19.2.3
2024-04-15 08:36:14,112:INFO:          setuptools: 41.2.0
2024-04-15 08:36:14,112:INFO:             pycaret: 3.2.0
2024-04-15 08:36:14,112:INFO:             IPython: 8.12.3
2024-04-15 08:36:14,112:INFO:          ipywidgets: 8.1.2
2024-04-15 08:36:14,112:INFO:                tqdm: 4.66.2
2024-04-15 08:36:14,112:INFO:               numpy: 1.24.4
2024-04-15 08:36:14,112:INFO:              pandas: 1.5.3
2024-04-15 08:36:14,112:INFO:              jinja2: 3.1.3
2024-04-15 08:36:14,112:INFO:               scipy: 1.10.1
2024-04-15 08:36:14,112:INFO:              joblib: 1.3.2
2024-04-15 08:36:14,112:INFO:             sklearn: 1.2.0
2024-04-15 08:36:14,112:INFO:                pyod: 1.1.3
2024-04-15 08:36:14,112:INFO:            imblearn: 0.12.2
2024-04-15 08:36:14,112:INFO:   category_encoders: 2.6.3
2024-04-15 08:36:14,112:INFO:            lightgbm: 4.3.0
2024-04-15 08:36:14,112:INFO:               numba: 0.58.1
2024-04-15 08:36:14,112:INFO:            requests: 2.31.0
2024-04-15 08:36:14,112:INFO:          matplotlib: 3.6.0
2024-04-15 08:36:14,112:INFO:          scikitplot: 0.3.7
2024-04-15 08:36:14,112:INFO:         yellowbrick: 1.5
2024-04-15 08:36:14,112:INFO:              plotly: 5.20.0
2024-04-15 08:36:14,112:INFO:    plotly-resampler: Not installed
2024-04-15 08:36:14,113:INFO:             kaleido: 0.2.1
2024-04-15 08:36:14,113:INFO:           schemdraw: 0.15
2024-04-15 08:36:14,113:INFO:         statsmodels: 0.14.1
2024-04-15 08:36:14,113:INFO:              sktime: 0.21.1
2024-04-15 08:36:14,113:INFO:               tbats: 1.1.3
2024-04-15 08:36:14,113:INFO:            pmdarima: 2.0.4
2024-04-15 08:36:14,113:INFO:              psutil: 5.9.8
2024-04-15 08:36:14,113:INFO:          markupsafe: 2.1.5
2024-04-15 08:36:14,113:INFO:             pickle5: Not installed
2024-04-15 08:36:14,113:INFO:         cloudpickle: 3.0.0
2024-04-15 08:36:14,113:INFO:         deprecation: 2.1.0
2024-04-15 08:36:14,113:INFO:              xxhash: 3.4.1
2024-04-15 08:36:14,113:INFO:           wurlitzer: Not installed
2024-04-15 08:36:14,113:INFO:PyCaret optional dependencies:
2024-04-15 08:36:14,113:INFO:                shap: Not installed
2024-04-15 08:36:14,113:INFO:           interpret: Not installed
2024-04-15 08:36:14,113:INFO:                umap: Not installed
2024-04-15 08:36:14,113:INFO:     ydata_profiling: Not installed
2024-04-15 08:36:14,113:INFO:  explainerdashboard: Not installed
2024-04-15 08:36:14,113:INFO:             autoviz: Not installed
2024-04-15 08:36:14,113:INFO:           fairlearn: Not installed
2024-04-15 08:36:14,114:INFO:          deepchecks: Not installed
2024-04-15 08:36:14,114:INFO:             xgboost: Not installed
2024-04-15 08:36:14,114:INFO:            catboost: Not installed
2024-04-15 08:36:14,114:INFO:              kmodes: Not installed
2024-04-15 08:36:14,114:INFO:             mlxtend: Not installed
2024-04-15 08:36:14,114:INFO:       statsforecast: Not installed
2024-04-15 08:36:14,114:INFO:        tune_sklearn: Not installed
2024-04-15 08:36:14,114:INFO:                 ray: Not installed
2024-04-15 08:36:14,114:INFO:            hyperopt: Not installed
2024-04-15 08:36:14,114:INFO:              optuna: Not installed
2024-04-15 08:36:14,114:INFO:               skopt: Not installed
2024-04-15 08:36:14,114:INFO:              mlflow: 2.11.3
2024-04-15 08:36:14,114:INFO:              gradio: Not installed
2024-04-15 08:36:14,114:INFO:             fastapi: Not installed
2024-04-15 08:36:14,114:INFO:             uvicorn: Not installed
2024-04-15 08:36:14,114:INFO:              m2cgen: Not installed
2024-04-15 08:36:14,114:INFO:           evidently: Not installed
2024-04-15 08:36:14,114:INFO:               fugue: Not installed
2024-04-15 08:36:14,114:INFO:           streamlit: 1.33.0
2024-04-15 08:36:14,114:INFO:             prophet: Not installed
2024-04-15 08:36:14,114:INFO:None
2024-04-15 08:36:14,114:INFO:Set up data.
2024-04-15 08:36:14,123:INFO:Set up folding strategy.
2024-04-15 08:36:14,123:INFO:Set up train/test split.
2024-04-15 08:36:14,123:INFO:Set up data.
2024-04-15 08:36:14,128:INFO:Set up index.
2024-04-15 08:36:14,128:INFO:Assigning column types.
2024-04-15 08:36:14,131:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:36:14,173:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:36:14,173:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:36:14,197:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,197:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,234:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:36:14,234:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:36:14,258:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,259:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,259:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:36:14,297:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:36:14,324:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,325:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,362:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:36:14,385:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,385:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,385:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:36:14,446:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,446:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,507:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,507:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,508:INFO:Preparing preprocessing pipeline...
2024-04-15 08:36:14,509:INFO:Set up simple imputation.
2024-04-15 08:36:14,509:INFO:Set up feature normalization.
2024-04-15 08:36:14,526:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:36:14,529:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:36:14,529:INFO:Creating final display dataframe.
2024-04-15 08:36:14,593:INFO:Setup _display_container:                     Description             Value
0                    Session id              4061
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              618d
2024-04-15 08:36:14,658:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,659:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,717:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,717:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:36:14,718:INFO:setup() successfully completed in 0.62s...............
2024-04-15 08:36:14,719:INFO:Initializing compare_models()
2024-04-15 08:36:14,719:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:36:14,719:INFO:Checking exceptions
2024-04-15 08:36:14,723:INFO:Preparing display monitor
2024-04-15 08:36:14,737:INFO:Initializing Logistic Regression
2024-04-15 08:36:14,739:INFO:Total runtime is 3.3342838287353514e-05 minutes
2024-04-15 08:36:14,742:INFO:SubProcess create_model() called ==================================
2024-04-15 08:36:14,743:INFO:Initializing create_model()
2024-04-15 08:36:14,743:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B47EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:36:14,743:INFO:Checking exceptions
2024-04-15 08:36:14,743:INFO:Importing libraries
2024-04-15 08:36:14,743:INFO:Copying training dataset
2024-04-15 08:36:14,747:INFO:Defining folds
2024-04-15 08:36:14,748:INFO:Declaring metric variables
2024-04-15 08:36:14,750:INFO:Importing untrained model
2024-04-15 08:36:14,753:INFO:Logistic Regression Imported successfully
2024-04-15 08:36:14,758:INFO:Starting cross validation
2024-04-15 08:36:14,759:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:36:18,813:INFO:Calculating mean and std
2024-04-15 08:36:18,816:INFO:Creating metrics dataframe
2024-04-15 08:36:18,820:INFO:Uploading results into container
2024-04-15 08:36:18,821:INFO:Uploading model into container now
2024-04-15 08:36:18,821:INFO:_master_model_container: 1
2024-04-15 08:36:18,822:INFO:_display_container: 2
2024-04-15 08:36:18,822:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:36:18,822:INFO:create_model() successfully completed......................................
2024-04-15 08:36:19,201:INFO:SubProcess create_model() end ==================================
2024-04-15 08:36:19,202:INFO:Creating metrics dataframe
2024-04-15 08:36:19,214:INFO:Initializing Decision Tree Classifier
2024-04-15 08:36:19,215:INFO:Total runtime is 0.07463212807973225 minutes
2024-04-15 08:36:19,219:INFO:SubProcess create_model() called ==================================
2024-04-15 08:36:19,220:INFO:Initializing create_model()
2024-04-15 08:36:19,220:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B47EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:36:19,220:INFO:Checking exceptions
2024-04-15 08:36:19,220:INFO:Importing libraries
2024-04-15 08:36:19,220:INFO:Copying training dataset
2024-04-15 08:36:19,228:INFO:Defining folds
2024-04-15 08:36:19,229:INFO:Declaring metric variables
2024-04-15 08:36:19,232:INFO:Importing untrained model
2024-04-15 08:36:19,237:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:36:19,243:INFO:Starting cross validation
2024-04-15 08:36:19,244:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:36:21,487:INFO:Calculating mean and std
2024-04-15 08:36:21,489:INFO:Creating metrics dataframe
2024-04-15 08:36:21,493:INFO:Uploading results into container
2024-04-15 08:36:21,494:INFO:Uploading model into container now
2024-04-15 08:36:21,494:INFO:_master_model_container: 2
2024-04-15 08:36:21,494:INFO:_display_container: 2
2024-04-15 08:36:21,495:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4061, splitter='best')
2024-04-15 08:36:21,495:INFO:create_model() successfully completed......................................
2024-04-15 08:36:21,791:INFO:SubProcess create_model() end ==================================
2024-04-15 08:36:21,791:INFO:Creating metrics dataframe
2024-04-15 08:36:21,805:INFO:Initializing create_model()
2024-04-15 08:36:21,805:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4061, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:36:21,806:INFO:Checking exceptions
2024-04-15 08:36:21,807:INFO:Importing libraries
2024-04-15 08:36:21,807:INFO:Copying training dataset
2024-04-15 08:36:21,812:INFO:Defining folds
2024-04-15 08:36:21,812:INFO:Declaring metric variables
2024-04-15 08:36:21,812:INFO:Importing untrained model
2024-04-15 08:36:21,812:INFO:Declaring custom model
2024-04-15 08:36:21,813:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:36:21,813:INFO:Cross validation set to False
2024-04-15 08:36:21,813:INFO:Fitting Model
2024-04-15 08:36:21,870:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4061, splitter='best')
2024-04-15 08:36:21,870:INFO:create_model() successfully completed......................................
2024-04-15 08:36:22,118:INFO:Initializing create_model()
2024-04-15 08:36:22,118:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:36:22,118:INFO:Checking exceptions
2024-04-15 08:36:22,120:INFO:Importing libraries
2024-04-15 08:36:22,120:INFO:Copying training dataset
2024-04-15 08:36:22,125:INFO:Defining folds
2024-04-15 08:36:22,125:INFO:Declaring metric variables
2024-04-15 08:36:22,125:INFO:Importing untrained model
2024-04-15 08:36:22,125:INFO:Declaring custom model
2024-04-15 08:36:22,125:INFO:Logistic Regression Imported successfully
2024-04-15 08:36:22,126:INFO:Cross validation set to False
2024-04-15 08:36:22,126:INFO:Fitting Model
2024-04-15 08:36:22,143:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:36:22,143:INFO:create_model() successfully completed......................................
2024-04-15 08:36:22,381:INFO:_master_model_container: 2
2024-04-15 08:36:22,381:INFO:_display_container: 2
2024-04-15 08:36:22,382:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4061, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:36:22,382:INFO:compare_models() successfully completed......................................
2024-04-15 08:36:22,382:INFO:Initializing predict_model()
2024-04-15 08:36:22,382:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58564C5B0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4061, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C584BDE160>)
2024-04-15 08:36:22,383:INFO:Checking exceptions
2024-04-15 08:36:22,383:INFO:Preloading libraries
2024-04-15 08:39:05,364:INFO:PyCaret ClassificationExperiment
2024-04-15 08:39:05,365:INFO:Logging name: clf-default-name
2024-04-15 08:39:05,365:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:39:05,365:INFO:version 3.2.0
2024-04-15 08:39:05,365:INFO:Initializing setup()
2024-04-15 08:39:05,365:INFO:self.USI: 3360
2024-04-15 08:39:05,365:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:39:05,365:INFO:Checking environment
2024-04-15 08:39:05,365:INFO:python_version: 3.8.0
2024-04-15 08:39:05,365:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:39:05,365:INFO:machine: AMD64
2024-04-15 08:39:05,365:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:39:05,372:INFO:Memory: svmem(total=34301427712, available=17925029888, percent=47.7, used=16376397824, free=17925029888)
2024-04-15 08:39:05,373:INFO:Physical Core: 6
2024-04-15 08:39:05,373:INFO:Logical Core: 12
2024-04-15 08:39:05,373:INFO:Checking libraries
2024-04-15 08:39:05,373:INFO:System:
2024-04-15 08:39:05,373:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:39:05,373:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:39:05,373:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:39:05,373:INFO:PyCaret required dependencies:
2024-04-15 08:39:05,373:INFO:                 pip: 19.2.3
2024-04-15 08:39:05,373:INFO:          setuptools: 41.2.0
2024-04-15 08:39:05,373:INFO:             pycaret: 3.2.0
2024-04-15 08:39:05,373:INFO:             IPython: 8.12.3
2024-04-15 08:39:05,373:INFO:          ipywidgets: 8.1.2
2024-04-15 08:39:05,373:INFO:                tqdm: 4.66.2
2024-04-15 08:39:05,373:INFO:               numpy: 1.24.4
2024-04-15 08:39:05,373:INFO:              pandas: 1.5.3
2024-04-15 08:39:05,373:INFO:              jinja2: 3.1.3
2024-04-15 08:39:05,373:INFO:               scipy: 1.10.1
2024-04-15 08:39:05,373:INFO:              joblib: 1.3.2
2024-04-15 08:39:05,373:INFO:             sklearn: 1.2.0
2024-04-15 08:39:05,373:INFO:                pyod: 1.1.3
2024-04-15 08:39:05,373:INFO:            imblearn: 0.12.2
2024-04-15 08:39:05,373:INFO:   category_encoders: 2.6.3
2024-04-15 08:39:05,373:INFO:            lightgbm: 4.3.0
2024-04-15 08:39:05,373:INFO:               numba: 0.58.1
2024-04-15 08:39:05,373:INFO:            requests: 2.31.0
2024-04-15 08:39:05,374:INFO:          matplotlib: 3.6.0
2024-04-15 08:39:05,374:INFO:          scikitplot: 0.3.7
2024-04-15 08:39:05,374:INFO:         yellowbrick: 1.5
2024-04-15 08:39:05,374:INFO:              plotly: 5.20.0
2024-04-15 08:39:05,374:INFO:    plotly-resampler: Not installed
2024-04-15 08:39:05,374:INFO:             kaleido: 0.2.1
2024-04-15 08:39:05,374:INFO:           schemdraw: 0.15
2024-04-15 08:39:05,374:INFO:         statsmodels: 0.14.1
2024-04-15 08:39:05,374:INFO:              sktime: 0.21.1
2024-04-15 08:39:05,374:INFO:               tbats: 1.1.3
2024-04-15 08:39:05,374:INFO:            pmdarima: 2.0.4
2024-04-15 08:39:05,374:INFO:              psutil: 5.9.8
2024-04-15 08:39:05,374:INFO:          markupsafe: 2.1.5
2024-04-15 08:39:05,374:INFO:             pickle5: Not installed
2024-04-15 08:39:05,374:INFO:         cloudpickle: 3.0.0
2024-04-15 08:39:05,374:INFO:         deprecation: 2.1.0
2024-04-15 08:39:05,374:INFO:              xxhash: 3.4.1
2024-04-15 08:39:05,374:INFO:           wurlitzer: Not installed
2024-04-15 08:39:05,374:INFO:PyCaret optional dependencies:
2024-04-15 08:39:05,374:INFO:                shap: Not installed
2024-04-15 08:39:05,374:INFO:           interpret: Not installed
2024-04-15 08:39:05,374:INFO:                umap: Not installed
2024-04-15 08:39:05,374:INFO:     ydata_profiling: Not installed
2024-04-15 08:39:05,374:INFO:  explainerdashboard: Not installed
2024-04-15 08:39:05,374:INFO:             autoviz: Not installed
2024-04-15 08:39:05,374:INFO:           fairlearn: Not installed
2024-04-15 08:39:05,374:INFO:          deepchecks: Not installed
2024-04-15 08:39:05,374:INFO:             xgboost: Not installed
2024-04-15 08:39:05,374:INFO:            catboost: Not installed
2024-04-15 08:39:05,374:INFO:              kmodes: Not installed
2024-04-15 08:39:05,374:INFO:             mlxtend: Not installed
2024-04-15 08:39:05,374:INFO:       statsforecast: Not installed
2024-04-15 08:39:05,374:INFO:        tune_sklearn: Not installed
2024-04-15 08:39:05,375:INFO:                 ray: Not installed
2024-04-15 08:39:05,375:INFO:            hyperopt: Not installed
2024-04-15 08:39:05,375:INFO:              optuna: Not installed
2024-04-15 08:39:05,375:INFO:               skopt: Not installed
2024-04-15 08:39:05,375:INFO:              mlflow: 2.11.3
2024-04-15 08:39:05,375:INFO:              gradio: Not installed
2024-04-15 08:39:05,375:INFO:             fastapi: Not installed
2024-04-15 08:39:05,375:INFO:             uvicorn: Not installed
2024-04-15 08:39:05,375:INFO:              m2cgen: Not installed
2024-04-15 08:39:05,375:INFO:           evidently: Not installed
2024-04-15 08:39:05,375:INFO:               fugue: Not installed
2024-04-15 08:39:05,375:INFO:           streamlit: 1.33.0
2024-04-15 08:39:05,375:INFO:             prophet: Not installed
2024-04-15 08:39:05,375:INFO:None
2024-04-15 08:39:05,375:INFO:Set up data.
2024-04-15 08:39:05,380:INFO:Set up folding strategy.
2024-04-15 08:39:05,380:INFO:Set up train/test split.
2024-04-15 08:39:05,380:INFO:Set up data.
2024-04-15 08:39:05,384:INFO:Set up index.
2024-04-15 08:39:05,384:INFO:Assigning column types.
2024-04-15 08:39:05,387:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:39:05,428:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:39:05,429:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:39:05,453:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,498:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:39:05,499:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:39:05,524:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,524:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,524:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:39:05,567:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:39:05,593:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,636:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:39:05,662:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,662:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,662:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:39:05,722:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,785:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,786:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,787:INFO:Preparing preprocessing pipeline...
2024-04-15 08:39:05,788:INFO:Set up simple imputation.
2024-04-15 08:39:05,788:INFO:Set up feature normalization.
2024-04-15 08:39:05,804:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:39:05,807:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:39:05,807:INFO:Creating final display dataframe.
2024-04-15 08:39:05,868:INFO:Setup _display_container:                     Description             Value
0                    Session id              7957
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              3360
2024-04-15 08:39:05,936:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,937:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,996:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,997:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:39:05,997:INFO:setup() successfully completed in 0.63s...............
2024-04-15 08:39:05,998:INFO:Initializing compare_models()
2024-04-15 08:39:05,998:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:39:05,998:INFO:Checking exceptions
2024-04-15 08:39:06,001:INFO:Preparing display monitor
2024-04-15 08:39:06,017:INFO:Initializing Logistic Regression
2024-04-15 08:39:06,017:INFO:Total runtime is 0.0 minutes
2024-04-15 08:39:06,020:INFO:SubProcess create_model() called ==================================
2024-04-15 08:39:06,020:INFO:Initializing create_model()
2024-04-15 08:39:06,020:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586AAC0A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:39:06,020:INFO:Checking exceptions
2024-04-15 08:39:06,020:INFO:Importing libraries
2024-04-15 08:39:06,020:INFO:Copying training dataset
2024-04-15 08:39:06,026:INFO:Defining folds
2024-04-15 08:39:06,026:INFO:Declaring metric variables
2024-04-15 08:39:06,037:INFO:Importing untrained model
2024-04-15 08:39:06,045:INFO:Logistic Regression Imported successfully
2024-04-15 08:39:06,054:INFO:Starting cross validation
2024-04-15 08:39:06,057:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:39:09,799:INFO:Calculating mean and std
2024-04-15 08:39:09,802:INFO:Creating metrics dataframe
2024-04-15 08:39:09,809:INFO:Uploading results into container
2024-04-15 08:39:09,810:INFO:Uploading model into container now
2024-04-15 08:39:09,811:INFO:_master_model_container: 1
2024-04-15 08:39:09,811:INFO:_display_container: 2
2024-04-15 08:39:09,811:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7957, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:39:09,811:INFO:create_model() successfully completed......................................
2024-04-15 08:39:10,031:INFO:SubProcess create_model() end ==================================
2024-04-15 08:39:10,031:INFO:Creating metrics dataframe
2024-04-15 08:39:10,037:INFO:Initializing Decision Tree Classifier
2024-04-15 08:39:10,037:INFO:Total runtime is 0.06699350277582804 minutes
2024-04-15 08:39:10,040:INFO:SubProcess create_model() called ==================================
2024-04-15 08:39:10,040:INFO:Initializing create_model()
2024-04-15 08:39:10,040:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586AAC0A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:39:10,040:INFO:Checking exceptions
2024-04-15 08:39:10,040:INFO:Importing libraries
2024-04-15 08:39:10,040:INFO:Copying training dataset
2024-04-15 08:39:10,045:INFO:Defining folds
2024-04-15 08:39:10,046:INFO:Declaring metric variables
2024-04-15 08:39:10,048:INFO:Importing untrained model
2024-04-15 08:39:10,051:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:39:10,055:INFO:Starting cross validation
2024-04-15 08:39:10,056:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:39:11,855:INFO:Calculating mean and std
2024-04-15 08:39:11,857:INFO:Creating metrics dataframe
2024-04-15 08:39:11,862:INFO:Uploading results into container
2024-04-15 08:39:11,863:INFO:Uploading model into container now
2024-04-15 08:39:11,864:INFO:_master_model_container: 2
2024-04-15 08:39:11,864:INFO:_display_container: 2
2024-04-15 08:39:11,864:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7957, splitter='best')
2024-04-15 08:39:11,864:INFO:create_model() successfully completed......................................
2024-04-15 08:39:12,079:INFO:SubProcess create_model() end ==================================
2024-04-15 08:39:12,079:INFO:Creating metrics dataframe
2024-04-15 08:39:12,093:INFO:Initializing create_model()
2024-04-15 08:39:12,093:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7957, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:39:12,093:INFO:Checking exceptions
2024-04-15 08:39:12,095:INFO:Importing libraries
2024-04-15 08:39:12,095:INFO:Copying training dataset
2024-04-15 08:39:12,098:INFO:Defining folds
2024-04-15 08:39:12,098:INFO:Declaring metric variables
2024-04-15 08:39:12,099:INFO:Importing untrained model
2024-04-15 08:39:12,099:INFO:Declaring custom model
2024-04-15 08:39:12,099:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:39:12,099:INFO:Cross validation set to False
2024-04-15 08:39:12,099:INFO:Fitting Model
2024-04-15 08:39:12,154:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7957, splitter='best')
2024-04-15 08:39:12,154:INFO:create_model() successfully completed......................................
2024-04-15 08:39:12,360:INFO:Initializing create_model()
2024-04-15 08:39:12,360:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7957, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:39:12,360:INFO:Checking exceptions
2024-04-15 08:39:12,362:INFO:Importing libraries
2024-04-15 08:39:12,362:INFO:Copying training dataset
2024-04-15 08:39:12,366:INFO:Defining folds
2024-04-15 08:39:12,366:INFO:Declaring metric variables
2024-04-15 08:39:12,366:INFO:Importing untrained model
2024-04-15 08:39:12,366:INFO:Declaring custom model
2024-04-15 08:39:12,367:INFO:Logistic Regression Imported successfully
2024-04-15 08:39:12,367:INFO:Cross validation set to False
2024-04-15 08:39:12,367:INFO:Fitting Model
2024-04-15 08:39:12,384:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7957, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:39:12,384:INFO:create_model() successfully completed......................................
2024-04-15 08:39:12,601:INFO:_master_model_container: 2
2024-04-15 08:39:12,602:INFO:_display_container: 2
2024-04-15 08:39:12,602:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7957, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7957, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:39:12,602:INFO:compare_models() successfully completed......................................
2024-04-15 08:39:12,603:INFO:Initializing predict_model()
2024-04-15 08:39:12,603:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AE3A60>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7957, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5E56649D0>)
2024-04-15 08:39:12,603:INFO:Checking exceptions
2024-04-15 08:39:12,603:INFO:Preloading libraries
2024-04-15 08:40:20,117:INFO:PyCaret ClassificationExperiment
2024-04-15 08:40:20,117:INFO:Logging name: clf-default-name
2024-04-15 08:40:20,117:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:40:20,117:INFO:version 3.2.0
2024-04-15 08:40:20,117:INFO:Initializing setup()
2024-04-15 08:40:20,117:INFO:self.USI: 8ecc
2024-04-15 08:40:20,117:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:40:20,117:INFO:Checking environment
2024-04-15 08:40:20,117:INFO:python_version: 3.8.0
2024-04-15 08:40:20,117:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:40:20,117:INFO:machine: AMD64
2024-04-15 08:40:20,117:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:40:20,124:INFO:Memory: svmem(total=34301427712, available=17918889984, percent=47.8, used=16382537728, free=17918889984)
2024-04-15 08:40:20,125:INFO:Physical Core: 6
2024-04-15 08:40:20,125:INFO:Logical Core: 12
2024-04-15 08:40:20,125:INFO:Checking libraries
2024-04-15 08:40:20,125:INFO:System:
2024-04-15 08:40:20,125:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:40:20,125:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:40:20,125:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:40:20,125:INFO:PyCaret required dependencies:
2024-04-15 08:40:20,125:INFO:                 pip: 19.2.3
2024-04-15 08:40:20,125:INFO:          setuptools: 41.2.0
2024-04-15 08:40:20,125:INFO:             pycaret: 3.2.0
2024-04-15 08:40:20,125:INFO:             IPython: 8.12.3
2024-04-15 08:40:20,125:INFO:          ipywidgets: 8.1.2
2024-04-15 08:40:20,125:INFO:                tqdm: 4.66.2
2024-04-15 08:40:20,125:INFO:               numpy: 1.24.4
2024-04-15 08:40:20,125:INFO:              pandas: 1.5.3
2024-04-15 08:40:20,125:INFO:              jinja2: 3.1.3
2024-04-15 08:40:20,125:INFO:               scipy: 1.10.1
2024-04-15 08:40:20,125:INFO:              joblib: 1.3.2
2024-04-15 08:40:20,125:INFO:             sklearn: 1.2.0
2024-04-15 08:40:20,125:INFO:                pyod: 1.1.3
2024-04-15 08:40:20,125:INFO:            imblearn: 0.12.2
2024-04-15 08:40:20,125:INFO:   category_encoders: 2.6.3
2024-04-15 08:40:20,125:INFO:            lightgbm: 4.3.0
2024-04-15 08:40:20,125:INFO:               numba: 0.58.1
2024-04-15 08:40:20,125:INFO:            requests: 2.31.0
2024-04-15 08:40:20,125:INFO:          matplotlib: 3.6.0
2024-04-15 08:40:20,125:INFO:          scikitplot: 0.3.7
2024-04-15 08:40:20,126:INFO:         yellowbrick: 1.5
2024-04-15 08:40:20,126:INFO:              plotly: 5.20.0
2024-04-15 08:40:20,126:INFO:    plotly-resampler: Not installed
2024-04-15 08:40:20,126:INFO:             kaleido: 0.2.1
2024-04-15 08:40:20,126:INFO:           schemdraw: 0.15
2024-04-15 08:40:20,126:INFO:         statsmodels: 0.14.1
2024-04-15 08:40:20,126:INFO:              sktime: 0.21.1
2024-04-15 08:40:20,126:INFO:               tbats: 1.1.3
2024-04-15 08:40:20,126:INFO:            pmdarima: 2.0.4
2024-04-15 08:40:20,126:INFO:              psutil: 5.9.8
2024-04-15 08:40:20,126:INFO:          markupsafe: 2.1.5
2024-04-15 08:40:20,126:INFO:             pickle5: Not installed
2024-04-15 08:40:20,126:INFO:         cloudpickle: 3.0.0
2024-04-15 08:40:20,126:INFO:         deprecation: 2.1.0
2024-04-15 08:40:20,126:INFO:              xxhash: 3.4.1
2024-04-15 08:40:20,126:INFO:           wurlitzer: Not installed
2024-04-15 08:40:20,126:INFO:PyCaret optional dependencies:
2024-04-15 08:40:20,126:INFO:                shap: Not installed
2024-04-15 08:40:20,126:INFO:           interpret: Not installed
2024-04-15 08:40:20,126:INFO:                umap: Not installed
2024-04-15 08:40:20,126:INFO:     ydata_profiling: Not installed
2024-04-15 08:40:20,126:INFO:  explainerdashboard: Not installed
2024-04-15 08:40:20,126:INFO:             autoviz: Not installed
2024-04-15 08:40:20,126:INFO:           fairlearn: Not installed
2024-04-15 08:40:20,126:INFO:          deepchecks: Not installed
2024-04-15 08:40:20,126:INFO:             xgboost: Not installed
2024-04-15 08:40:20,126:INFO:            catboost: Not installed
2024-04-15 08:40:20,126:INFO:              kmodes: Not installed
2024-04-15 08:40:20,126:INFO:             mlxtend: Not installed
2024-04-15 08:40:20,126:INFO:       statsforecast: Not installed
2024-04-15 08:40:20,126:INFO:        tune_sklearn: Not installed
2024-04-15 08:40:20,126:INFO:                 ray: Not installed
2024-04-15 08:40:20,126:INFO:            hyperopt: Not installed
2024-04-15 08:40:20,126:INFO:              optuna: Not installed
2024-04-15 08:40:20,126:INFO:               skopt: Not installed
2024-04-15 08:40:20,126:INFO:              mlflow: 2.11.3
2024-04-15 08:40:20,127:INFO:              gradio: Not installed
2024-04-15 08:40:20,127:INFO:             fastapi: Not installed
2024-04-15 08:40:20,127:INFO:             uvicorn: Not installed
2024-04-15 08:40:20,127:INFO:              m2cgen: Not installed
2024-04-15 08:40:20,127:INFO:           evidently: Not installed
2024-04-15 08:40:20,127:INFO:               fugue: Not installed
2024-04-15 08:40:20,127:INFO:           streamlit: 1.33.0
2024-04-15 08:40:20,127:INFO:             prophet: Not installed
2024-04-15 08:40:20,127:INFO:None
2024-04-15 08:40:20,127:INFO:Set up data.
2024-04-15 08:41:29,496:INFO:PyCaret ClassificationExperiment
2024-04-15 08:41:29,496:INFO:Logging name: clf-default-name
2024-04-15 08:41:29,497:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:41:29,497:INFO:version 3.2.0
2024-04-15 08:41:29,497:INFO:Initializing setup()
2024-04-15 08:41:29,497:INFO:self.USI: d022
2024-04-15 08:41:29,497:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:41:29,497:INFO:Checking environment
2024-04-15 08:41:29,497:INFO:python_version: 3.8.0
2024-04-15 08:41:29,497:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:41:29,497:INFO:machine: AMD64
2024-04-15 08:41:29,497:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:41:29,503:INFO:Memory: svmem(total=34301427712, available=17875230720, percent=47.9, used=16426196992, free=17875230720)
2024-04-15 08:41:29,503:INFO:Physical Core: 6
2024-04-15 08:41:29,503:INFO:Logical Core: 12
2024-04-15 08:41:29,503:INFO:Checking libraries
2024-04-15 08:41:29,504:INFO:System:
2024-04-15 08:41:29,504:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:41:29,504:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:41:29,504:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:41:29,504:INFO:PyCaret required dependencies:
2024-04-15 08:41:29,504:INFO:                 pip: 19.2.3
2024-04-15 08:41:29,504:INFO:          setuptools: 41.2.0
2024-04-15 08:41:29,504:INFO:             pycaret: 3.2.0
2024-04-15 08:41:29,504:INFO:             IPython: 8.12.3
2024-04-15 08:41:29,504:INFO:          ipywidgets: 8.1.2
2024-04-15 08:41:29,504:INFO:                tqdm: 4.66.2
2024-04-15 08:41:29,504:INFO:               numpy: 1.24.4
2024-04-15 08:41:29,504:INFO:              pandas: 1.5.3
2024-04-15 08:41:29,504:INFO:              jinja2: 3.1.3
2024-04-15 08:41:29,504:INFO:               scipy: 1.10.1
2024-04-15 08:41:29,504:INFO:              joblib: 1.3.2
2024-04-15 08:41:29,504:INFO:             sklearn: 1.2.0
2024-04-15 08:41:29,504:INFO:                pyod: 1.1.3
2024-04-15 08:41:29,504:INFO:            imblearn: 0.12.2
2024-04-15 08:41:29,504:INFO:   category_encoders: 2.6.3
2024-04-15 08:41:29,504:INFO:            lightgbm: 4.3.0
2024-04-15 08:41:29,504:INFO:               numba: 0.58.1
2024-04-15 08:41:29,504:INFO:            requests: 2.31.0
2024-04-15 08:41:29,504:INFO:          matplotlib: 3.6.0
2024-04-15 08:41:29,504:INFO:          scikitplot: 0.3.7
2024-04-15 08:41:29,505:INFO:         yellowbrick: 1.5
2024-04-15 08:41:29,505:INFO:              plotly: 5.20.0
2024-04-15 08:41:29,505:INFO:    plotly-resampler: Not installed
2024-04-15 08:41:29,505:INFO:             kaleido: 0.2.1
2024-04-15 08:41:29,505:INFO:           schemdraw: 0.15
2024-04-15 08:41:29,505:INFO:         statsmodels: 0.14.1
2024-04-15 08:41:29,505:INFO:              sktime: 0.21.1
2024-04-15 08:41:29,505:INFO:               tbats: 1.1.3
2024-04-15 08:41:29,505:INFO:            pmdarima: 2.0.4
2024-04-15 08:41:29,505:INFO:              psutil: 5.9.8
2024-04-15 08:41:29,505:INFO:          markupsafe: 2.1.5
2024-04-15 08:41:29,505:INFO:             pickle5: Not installed
2024-04-15 08:41:29,505:INFO:         cloudpickle: 3.0.0
2024-04-15 08:41:29,505:INFO:         deprecation: 2.1.0
2024-04-15 08:41:29,505:INFO:              xxhash: 3.4.1
2024-04-15 08:41:29,505:INFO:           wurlitzer: Not installed
2024-04-15 08:41:29,505:INFO:PyCaret optional dependencies:
2024-04-15 08:41:29,505:INFO:                shap: Not installed
2024-04-15 08:41:29,505:INFO:           interpret: Not installed
2024-04-15 08:41:29,505:INFO:                umap: Not installed
2024-04-15 08:41:29,505:INFO:     ydata_profiling: Not installed
2024-04-15 08:41:29,505:INFO:  explainerdashboard: Not installed
2024-04-15 08:41:29,505:INFO:             autoviz: Not installed
2024-04-15 08:41:29,505:INFO:           fairlearn: Not installed
2024-04-15 08:41:29,505:INFO:          deepchecks: Not installed
2024-04-15 08:41:29,506:INFO:             xgboost: Not installed
2024-04-15 08:41:29,506:INFO:            catboost: Not installed
2024-04-15 08:41:29,506:INFO:              kmodes: Not installed
2024-04-15 08:41:29,506:INFO:             mlxtend: Not installed
2024-04-15 08:41:29,506:INFO:       statsforecast: Not installed
2024-04-15 08:41:29,506:INFO:        tune_sklearn: Not installed
2024-04-15 08:41:29,506:INFO:                 ray: Not installed
2024-04-15 08:41:29,506:INFO:            hyperopt: Not installed
2024-04-15 08:41:29,506:INFO:              optuna: Not installed
2024-04-15 08:41:29,506:INFO:               skopt: Not installed
2024-04-15 08:41:29,506:INFO:              mlflow: 2.11.3
2024-04-15 08:41:29,506:INFO:              gradio: Not installed
2024-04-15 08:41:29,506:INFO:             fastapi: Not installed
2024-04-15 08:41:29,506:INFO:             uvicorn: Not installed
2024-04-15 08:41:29,506:INFO:              m2cgen: Not installed
2024-04-15 08:41:29,506:INFO:           evidently: Not installed
2024-04-15 08:41:29,506:INFO:               fugue: Not installed
2024-04-15 08:41:29,506:INFO:           streamlit: 1.33.0
2024-04-15 08:41:29,506:INFO:             prophet: Not installed
2024-04-15 08:41:29,506:INFO:None
2024-04-15 08:41:29,506:INFO:Set up data.
2024-04-15 08:41:29,510:INFO:Set up folding strategy.
2024-04-15 08:41:29,510:INFO:Set up train/test split.
2024-04-15 08:41:29,510:INFO:Set up data.
2024-04-15 08:41:29,514:INFO:Set up index.
2024-04-15 08:41:29,514:INFO:Assigning column types.
2024-04-15 08:41:29,517:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:41:29,555:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:41:29,556:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:41:29,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,583:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,624:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:41:29,625:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:41:29,647:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,647:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,647:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:41:29,690:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:41:29,713:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,713:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,750:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:41:29,774:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,774:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:41:29,833:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,834:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,894:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,894:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:29,895:INFO:Preparing preprocessing pipeline...
2024-04-15 08:41:29,896:INFO:Set up simple imputation.
2024-04-15 08:41:29,896:INFO:Set up feature normalization.
2024-04-15 08:41:29,912:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:41:29,916:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:41:29,916:INFO:Creating final display dataframe.
2024-04-15 08:41:29,977:INFO:Setup _display_container:                     Description             Value
0                    Session id              5657
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              d022
2024-04-15 08:41:30,043:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:30,043:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:30,104:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:30,104:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:41:30,104:INFO:setup() successfully completed in 0.61s...............
2024-04-15 08:41:30,105:INFO:Initializing compare_models()
2024-04-15 08:41:30,105:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:41:30,105:INFO:Checking exceptions
2024-04-15 08:41:30,108:INFO:Preparing display monitor
2024-04-15 08:41:30,123:INFO:Initializing Logistic Regression
2024-04-15 08:41:30,123:INFO:Total runtime is 0.0 minutes
2024-04-15 08:41:30,125:INFO:SubProcess create_model() called ==================================
2024-04-15 08:41:30,126:INFO:Initializing create_model()
2024-04-15 08:41:30,126:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58866DD60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:41:30,126:INFO:Checking exceptions
2024-04-15 08:41:30,126:INFO:Importing libraries
2024-04-15 08:41:30,126:INFO:Copying training dataset
2024-04-15 08:41:30,131:INFO:Defining folds
2024-04-15 08:41:30,131:INFO:Declaring metric variables
2024-04-15 08:41:30,139:INFO:Importing untrained model
2024-04-15 08:41:30,147:INFO:Logistic Regression Imported successfully
2024-04-15 08:41:30,155:INFO:Starting cross validation
2024-04-15 08:41:30,157:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:41:34,103:INFO:Calculating mean and std
2024-04-15 08:41:34,105:INFO:Creating metrics dataframe
2024-04-15 08:41:34,108:INFO:Uploading results into container
2024-04-15 08:41:34,109:INFO:Uploading model into container now
2024-04-15 08:41:34,110:INFO:_master_model_container: 1
2024-04-15 08:41:34,110:INFO:_display_container: 2
2024-04-15 08:41:34,110:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5657, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:41:34,110:INFO:create_model() successfully completed......................................
2024-04-15 08:41:34,318:INFO:SubProcess create_model() end ==================================
2024-04-15 08:41:34,318:INFO:Creating metrics dataframe
2024-04-15 08:41:34,326:INFO:Initializing Decision Tree Classifier
2024-04-15 08:41:34,326:INFO:Total runtime is 0.07004331747690837 minutes
2024-04-15 08:41:34,329:INFO:SubProcess create_model() called ==================================
2024-04-15 08:41:34,329:INFO:Initializing create_model()
2024-04-15 08:41:34,329:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58866DD60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:41:34,329:INFO:Checking exceptions
2024-04-15 08:41:34,329:INFO:Importing libraries
2024-04-15 08:41:34,329:INFO:Copying training dataset
2024-04-15 08:41:34,335:INFO:Defining folds
2024-04-15 08:41:34,335:INFO:Declaring metric variables
2024-04-15 08:41:34,338:INFO:Importing untrained model
2024-04-15 08:41:34,341:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:41:34,347:INFO:Starting cross validation
2024-04-15 08:41:34,348:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:41:36,148:INFO:Calculating mean and std
2024-04-15 08:41:36,151:INFO:Creating metrics dataframe
2024-04-15 08:41:36,158:INFO:Uploading results into container
2024-04-15 08:41:36,159:INFO:Uploading model into container now
2024-04-15 08:41:36,160:INFO:_master_model_container: 2
2024-04-15 08:41:36,160:INFO:_display_container: 2
2024-04-15 08:41:36,160:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5657, splitter='best')
2024-04-15 08:41:36,161:INFO:create_model() successfully completed......................................
2024-04-15 08:41:36,377:INFO:SubProcess create_model() end ==================================
2024-04-15 08:41:36,377:INFO:Creating metrics dataframe
2024-04-15 08:41:36,391:INFO:Initializing create_model()
2024-04-15 08:41:36,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5657, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:41:36,391:INFO:Checking exceptions
2024-04-15 08:41:36,393:INFO:Importing libraries
2024-04-15 08:41:36,393:INFO:Copying training dataset
2024-04-15 08:41:36,397:INFO:Defining folds
2024-04-15 08:41:36,397:INFO:Declaring metric variables
2024-04-15 08:41:36,397:INFO:Importing untrained model
2024-04-15 08:41:36,397:INFO:Declaring custom model
2024-04-15 08:41:36,398:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:41:36,398:INFO:Cross validation set to False
2024-04-15 08:41:36,398:INFO:Fitting Model
2024-04-15 08:41:36,452:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5657, splitter='best')
2024-04-15 08:41:36,452:INFO:create_model() successfully completed......................................
2024-04-15 08:41:36,650:INFO:Initializing create_model()
2024-04-15 08:41:36,650:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5657, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:41:36,650:INFO:Checking exceptions
2024-04-15 08:41:36,652:INFO:Importing libraries
2024-04-15 08:41:36,652:INFO:Copying training dataset
2024-04-15 08:41:36,656:INFO:Defining folds
2024-04-15 08:41:36,656:INFO:Declaring metric variables
2024-04-15 08:41:36,656:INFO:Importing untrained model
2024-04-15 08:41:36,656:INFO:Declaring custom model
2024-04-15 08:41:36,656:INFO:Logistic Regression Imported successfully
2024-04-15 08:41:36,657:INFO:Cross validation set to False
2024-04-15 08:41:36,657:INFO:Fitting Model
2024-04-15 08:41:36,674:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5657, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:41:36,674:INFO:create_model() successfully completed......................................
2024-04-15 08:41:36,886:INFO:_master_model_container: 2
2024-04-15 08:41:36,887:INFO:_display_container: 2
2024-04-15 08:41:36,887:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5657, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5657, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:41:36,887:INFO:compare_models() successfully completed......................................
2024-04-15 08:41:36,888:INFO:Initializing predict_model()
2024-04-15 08:41:36,888:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5887212B0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5657, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C587ED3A60>)
2024-04-15 08:41:36,888:INFO:Checking exceptions
2024-04-15 08:41:36,888:INFO:Preloading libraries
2024-04-15 08:42:52,289:INFO:PyCaret ClassificationExperiment
2024-04-15 08:42:52,289:INFO:Logging name: clf-default-name
2024-04-15 08:42:52,289:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:42:52,289:INFO:version 3.2.0
2024-04-15 08:42:52,289:INFO:Initializing setup()
2024-04-15 08:42:52,289:INFO:self.USI: cd8d
2024-04-15 08:42:52,289:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:42:52,289:INFO:Checking environment
2024-04-15 08:42:52,289:INFO:python_version: 3.8.0
2024-04-15 08:42:52,289:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:42:52,289:INFO:machine: AMD64
2024-04-15 08:42:52,289:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:42:52,300:INFO:Memory: svmem(total=34301427712, available=17917607936, percent=47.8, used=16383819776, free=17917607936)
2024-04-15 08:42:52,300:INFO:Physical Core: 6
2024-04-15 08:42:52,301:INFO:Logical Core: 12
2024-04-15 08:42:52,301:INFO:Checking libraries
2024-04-15 08:42:52,301:INFO:System:
2024-04-15 08:42:52,301:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:42:52,301:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:42:52,301:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:42:52,301:INFO:PyCaret required dependencies:
2024-04-15 08:42:52,301:INFO:                 pip: 19.2.3
2024-04-15 08:42:52,301:INFO:          setuptools: 41.2.0
2024-04-15 08:42:52,301:INFO:             pycaret: 3.2.0
2024-04-15 08:42:52,301:INFO:             IPython: 8.12.3
2024-04-15 08:42:52,301:INFO:          ipywidgets: 8.1.2
2024-04-15 08:42:52,301:INFO:                tqdm: 4.66.2
2024-04-15 08:42:52,301:INFO:               numpy: 1.24.4
2024-04-15 08:42:52,301:INFO:              pandas: 1.5.3
2024-04-15 08:42:52,301:INFO:              jinja2: 3.1.3
2024-04-15 08:42:52,301:INFO:               scipy: 1.10.1
2024-04-15 08:42:52,301:INFO:              joblib: 1.3.2
2024-04-15 08:42:52,301:INFO:             sklearn: 1.2.0
2024-04-15 08:42:52,301:INFO:                pyod: 1.1.3
2024-04-15 08:42:52,301:INFO:            imblearn: 0.12.2
2024-04-15 08:42:52,301:INFO:   category_encoders: 2.6.3
2024-04-15 08:42:52,301:INFO:            lightgbm: 4.3.0
2024-04-15 08:42:52,301:INFO:               numba: 0.58.1
2024-04-15 08:42:52,301:INFO:            requests: 2.31.0
2024-04-15 08:42:52,301:INFO:          matplotlib: 3.6.0
2024-04-15 08:42:52,301:INFO:          scikitplot: 0.3.7
2024-04-15 08:42:52,301:INFO:         yellowbrick: 1.5
2024-04-15 08:42:52,301:INFO:              plotly: 5.20.0
2024-04-15 08:42:52,301:INFO:    plotly-resampler: Not installed
2024-04-15 08:42:52,301:INFO:             kaleido: 0.2.1
2024-04-15 08:42:52,301:INFO:           schemdraw: 0.15
2024-04-15 08:42:52,302:INFO:         statsmodels: 0.14.1
2024-04-15 08:42:52,302:INFO:              sktime: 0.21.1
2024-04-15 08:42:52,302:INFO:               tbats: 1.1.3
2024-04-15 08:42:52,302:INFO:            pmdarima: 2.0.4
2024-04-15 08:42:52,302:INFO:              psutil: 5.9.8
2024-04-15 08:42:52,302:INFO:          markupsafe: 2.1.5
2024-04-15 08:42:52,302:INFO:             pickle5: Not installed
2024-04-15 08:42:52,302:INFO:         cloudpickle: 3.0.0
2024-04-15 08:42:52,302:INFO:         deprecation: 2.1.0
2024-04-15 08:42:52,302:INFO:              xxhash: 3.4.1
2024-04-15 08:42:52,302:INFO:           wurlitzer: Not installed
2024-04-15 08:42:52,302:INFO:PyCaret optional dependencies:
2024-04-15 08:42:52,302:INFO:                shap: Not installed
2024-04-15 08:42:52,302:INFO:           interpret: Not installed
2024-04-15 08:42:52,302:INFO:                umap: Not installed
2024-04-15 08:42:52,302:INFO:     ydata_profiling: Not installed
2024-04-15 08:42:52,302:INFO:  explainerdashboard: Not installed
2024-04-15 08:42:52,302:INFO:             autoviz: Not installed
2024-04-15 08:42:52,302:INFO:           fairlearn: Not installed
2024-04-15 08:42:52,302:INFO:          deepchecks: Not installed
2024-04-15 08:42:52,302:INFO:             xgboost: Not installed
2024-04-15 08:42:52,302:INFO:            catboost: Not installed
2024-04-15 08:42:52,302:INFO:              kmodes: Not installed
2024-04-15 08:42:52,302:INFO:             mlxtend: Not installed
2024-04-15 08:42:52,302:INFO:       statsforecast: Not installed
2024-04-15 08:42:52,302:INFO:        tune_sklearn: Not installed
2024-04-15 08:42:52,302:INFO:                 ray: Not installed
2024-04-15 08:42:52,302:INFO:            hyperopt: Not installed
2024-04-15 08:42:52,302:INFO:              optuna: Not installed
2024-04-15 08:42:52,302:INFO:               skopt: Not installed
2024-04-15 08:42:52,302:INFO:              mlflow: 2.11.3
2024-04-15 08:42:52,302:INFO:              gradio: Not installed
2024-04-15 08:42:52,302:INFO:             fastapi: Not installed
2024-04-15 08:42:52,302:INFO:             uvicorn: Not installed
2024-04-15 08:42:52,302:INFO:              m2cgen: Not installed
2024-04-15 08:42:52,302:INFO:           evidently: Not installed
2024-04-15 08:42:52,302:INFO:               fugue: Not installed
2024-04-15 08:42:52,302:INFO:           streamlit: 1.33.0
2024-04-15 08:42:52,302:INFO:             prophet: Not installed
2024-04-15 08:42:52,302:INFO:None
2024-04-15 08:42:52,303:INFO:Set up data.
2024-04-15 08:42:52,307:INFO:Set up folding strategy.
2024-04-15 08:42:52,307:INFO:Set up train/test split.
2024-04-15 08:42:52,307:INFO:Set up data.
2024-04-15 08:42:52,310:INFO:Set up index.
2024-04-15 08:42:52,311:INFO:Assigning column types.
2024-04-15 08:42:52,314:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:42:52,350:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:42:52,350:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:42:52,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,409:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:42:52,410:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:42:52,432:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,432:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:42:52,467:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:42:52,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,526:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:42:52,550:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,550:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,550:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:42:52,608:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,609:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,668:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,668:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,669:INFO:Preparing preprocessing pipeline...
2024-04-15 08:42:52,670:INFO:Set up simple imputation.
2024-04-15 08:42:52,670:INFO:Set up feature normalization.
2024-04-15 08:42:52,685:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:42:52,688:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:42:52,688:INFO:Creating final display dataframe.
2024-04-15 08:42:52,746:INFO:Setup _display_container:                     Description             Value
0                    Session id               821
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              cd8d
2024-04-15 08:42:52,808:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,809:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,866:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,866:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:42:52,867:INFO:setup() successfully completed in 0.58s...............
2024-04-15 08:42:52,868:INFO:Initializing compare_models()
2024-04-15 08:42:52,868:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:42:52,868:INFO:Checking exceptions
2024-04-15 08:42:52,871:INFO:Preparing display monitor
2024-04-15 08:42:52,885:INFO:Initializing Logistic Regression
2024-04-15 08:42:52,886:INFO:Total runtime is 1.6677379608154298e-05 minutes
2024-04-15 08:42:52,888:INFO:SubProcess create_model() called ==================================
2024-04-15 08:42:52,888:INFO:Initializing create_model()
2024-04-15 08:42:52,888:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58672F3A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:42:52,888:INFO:Checking exceptions
2024-04-15 08:42:52,888:INFO:Importing libraries
2024-04-15 08:42:52,889:INFO:Copying training dataset
2024-04-15 08:42:52,894:INFO:Defining folds
2024-04-15 08:42:52,894:INFO:Declaring metric variables
2024-04-15 08:42:52,897:INFO:Importing untrained model
2024-04-15 08:42:52,900:INFO:Logistic Regression Imported successfully
2024-04-15 08:42:52,905:INFO:Starting cross validation
2024-04-15 08:42:52,906:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:42:56,741:INFO:Calculating mean and std
2024-04-15 08:42:56,743:INFO:Creating metrics dataframe
2024-04-15 08:42:56,752:INFO:Uploading results into container
2024-04-15 08:42:56,753:INFO:Uploading model into container now
2024-04-15 08:42:56,754:INFO:_master_model_container: 1
2024-04-15 08:42:56,754:INFO:_display_container: 2
2024-04-15 08:42:56,754:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=821, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:42:56,755:INFO:create_model() successfully completed......................................
2024-04-15 08:42:56,982:INFO:SubProcess create_model() end ==================================
2024-04-15 08:42:56,982:INFO:Creating metrics dataframe
2024-04-15 08:42:56,989:INFO:Initializing Decision Tree Classifier
2024-04-15 08:42:56,989:INFO:Total runtime is 0.06839839617411296 minutes
2024-04-15 08:42:56,991:INFO:SubProcess create_model() called ==================================
2024-04-15 08:42:56,992:INFO:Initializing create_model()
2024-04-15 08:42:56,992:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58672F3A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:42:56,992:INFO:Checking exceptions
2024-04-15 08:42:56,992:INFO:Importing libraries
2024-04-15 08:42:56,992:INFO:Copying training dataset
2024-04-15 08:42:56,997:INFO:Defining folds
2024-04-15 08:42:56,997:INFO:Declaring metric variables
2024-04-15 08:42:56,999:INFO:Importing untrained model
2024-04-15 08:42:57,002:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:42:57,007:INFO:Starting cross validation
2024-04-15 08:42:57,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:42:58,787:INFO:Calculating mean and std
2024-04-15 08:42:58,789:INFO:Creating metrics dataframe
2024-04-15 08:42:58,795:INFO:Uploading results into container
2024-04-15 08:42:58,796:INFO:Uploading model into container now
2024-04-15 08:42:58,796:INFO:_master_model_container: 2
2024-04-15 08:42:58,796:INFO:_display_container: 2
2024-04-15 08:42:58,797:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=821, splitter='best')
2024-04-15 08:42:58,797:INFO:create_model() successfully completed......................................
2024-04-15 08:42:59,006:INFO:SubProcess create_model() end ==================================
2024-04-15 08:42:59,006:INFO:Creating metrics dataframe
2024-04-15 08:42:59,019:INFO:Initializing create_model()
2024-04-15 08:42:59,020:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=821, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:42:59,020:INFO:Checking exceptions
2024-04-15 08:42:59,021:INFO:Importing libraries
2024-04-15 08:42:59,021:INFO:Copying training dataset
2024-04-15 08:42:59,025:INFO:Defining folds
2024-04-15 08:42:59,025:INFO:Declaring metric variables
2024-04-15 08:42:59,025:INFO:Importing untrained model
2024-04-15 08:42:59,025:INFO:Declaring custom model
2024-04-15 08:42:59,025:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:42:59,026:INFO:Cross validation set to False
2024-04-15 08:42:59,026:INFO:Fitting Model
2024-04-15 08:42:59,080:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=821, splitter='best')
2024-04-15 08:42:59,081:INFO:create_model() successfully completed......................................
2024-04-15 08:42:59,281:INFO:Initializing create_model()
2024-04-15 08:42:59,282:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=821, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:42:59,282:INFO:Checking exceptions
2024-04-15 08:42:59,283:INFO:Importing libraries
2024-04-15 08:42:59,283:INFO:Copying training dataset
2024-04-15 08:42:59,286:INFO:Defining folds
2024-04-15 08:42:59,287:INFO:Declaring metric variables
2024-04-15 08:42:59,287:INFO:Importing untrained model
2024-04-15 08:42:59,287:INFO:Declaring custom model
2024-04-15 08:42:59,287:INFO:Logistic Regression Imported successfully
2024-04-15 08:42:59,288:INFO:Cross validation set to False
2024-04-15 08:42:59,288:INFO:Fitting Model
2024-04-15 08:42:59,303:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=821, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:42:59,303:INFO:create_model() successfully completed......................................
2024-04-15 08:42:59,516:INFO:_master_model_container: 2
2024-04-15 08:42:59,516:INFO:_display_container: 2
2024-04-15 08:42:59,516:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=821, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=821, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:42:59,516:INFO:compare_models() successfully completed......................................
2024-04-15 08:42:59,517:INFO:Initializing predict_model()
2024-04-15 08:42:59,517:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58566D700>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=821, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C588419E50>)
2024-04-15 08:42:59,517:INFO:Checking exceptions
2024-04-15 08:42:59,517:INFO:Preloading libraries
2024-04-15 08:43:11,555:INFO:PyCaret ClassificationExperiment
2024-04-15 08:43:11,555:INFO:Logging name: clf-default-name
2024-04-15 08:43:11,555:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 08:43:11,555:INFO:version 3.2.0
2024-04-15 08:43:11,555:INFO:Initializing setup()
2024-04-15 08:43:11,555:INFO:self.USI: 80ce
2024-04-15 08:43:11,555:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 08:43:11,555:INFO:Checking environment
2024-04-15 08:43:11,555:INFO:python_version: 3.8.0
2024-04-15 08:43:11,555:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 08:43:11,555:INFO:machine: AMD64
2024-04-15 08:43:11,555:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 08:43:11,562:INFO:Memory: svmem(total=34301427712, available=18082435072, percent=47.3, used=16218992640, free=18082435072)
2024-04-15 08:43:11,562:INFO:Physical Core: 6
2024-04-15 08:43:11,562:INFO:Logical Core: 12
2024-04-15 08:43:11,562:INFO:Checking libraries
2024-04-15 08:43:11,562:INFO:System:
2024-04-15 08:43:11,562:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 08:43:11,562:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 08:43:11,562:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 08:43:11,562:INFO:PyCaret required dependencies:
2024-04-15 08:43:11,563:INFO:                 pip: 19.2.3
2024-04-15 08:43:11,563:INFO:          setuptools: 41.2.0
2024-04-15 08:43:11,563:INFO:             pycaret: 3.2.0
2024-04-15 08:43:11,563:INFO:             IPython: 8.12.3
2024-04-15 08:43:11,563:INFO:          ipywidgets: 8.1.2
2024-04-15 08:43:11,563:INFO:                tqdm: 4.66.2
2024-04-15 08:43:11,563:INFO:               numpy: 1.24.4
2024-04-15 08:43:11,563:INFO:              pandas: 1.5.3
2024-04-15 08:43:11,563:INFO:              jinja2: 3.1.3
2024-04-15 08:43:11,563:INFO:               scipy: 1.10.1
2024-04-15 08:43:11,563:INFO:              joblib: 1.3.2
2024-04-15 08:43:11,563:INFO:             sklearn: 1.2.0
2024-04-15 08:43:11,563:INFO:                pyod: 1.1.3
2024-04-15 08:43:11,563:INFO:            imblearn: 0.12.2
2024-04-15 08:43:11,563:INFO:   category_encoders: 2.6.3
2024-04-15 08:43:11,563:INFO:            lightgbm: 4.3.0
2024-04-15 08:43:11,563:INFO:               numba: 0.58.1
2024-04-15 08:43:11,563:INFO:            requests: 2.31.0
2024-04-15 08:43:11,563:INFO:          matplotlib: 3.6.0
2024-04-15 08:43:11,563:INFO:          scikitplot: 0.3.7
2024-04-15 08:43:11,563:INFO:         yellowbrick: 1.5
2024-04-15 08:43:11,563:INFO:              plotly: 5.20.0
2024-04-15 08:43:11,563:INFO:    plotly-resampler: Not installed
2024-04-15 08:43:11,563:INFO:             kaleido: 0.2.1
2024-04-15 08:43:11,563:INFO:           schemdraw: 0.15
2024-04-15 08:43:11,563:INFO:         statsmodels: 0.14.1
2024-04-15 08:43:11,563:INFO:              sktime: 0.21.1
2024-04-15 08:43:11,563:INFO:               tbats: 1.1.3
2024-04-15 08:43:11,563:INFO:            pmdarima: 2.0.4
2024-04-15 08:43:11,563:INFO:              psutil: 5.9.8
2024-04-15 08:43:11,563:INFO:          markupsafe: 2.1.5
2024-04-15 08:43:11,563:INFO:             pickle5: Not installed
2024-04-15 08:43:11,563:INFO:         cloudpickle: 3.0.0
2024-04-15 08:43:11,563:INFO:         deprecation: 2.1.0
2024-04-15 08:43:11,563:INFO:              xxhash: 3.4.1
2024-04-15 08:43:11,563:INFO:           wurlitzer: Not installed
2024-04-15 08:43:11,563:INFO:PyCaret optional dependencies:
2024-04-15 08:43:11,564:INFO:                shap: Not installed
2024-04-15 08:43:11,564:INFO:           interpret: Not installed
2024-04-15 08:43:11,564:INFO:                umap: Not installed
2024-04-15 08:43:11,564:INFO:     ydata_profiling: Not installed
2024-04-15 08:43:11,564:INFO:  explainerdashboard: Not installed
2024-04-15 08:43:11,564:INFO:             autoviz: Not installed
2024-04-15 08:43:11,564:INFO:           fairlearn: Not installed
2024-04-15 08:43:11,564:INFO:          deepchecks: Not installed
2024-04-15 08:43:11,564:INFO:             xgboost: Not installed
2024-04-15 08:43:11,564:INFO:            catboost: Not installed
2024-04-15 08:43:11,564:INFO:              kmodes: Not installed
2024-04-15 08:43:11,564:INFO:             mlxtend: Not installed
2024-04-15 08:43:11,564:INFO:       statsforecast: Not installed
2024-04-15 08:43:11,564:INFO:        tune_sklearn: Not installed
2024-04-15 08:43:11,564:INFO:                 ray: Not installed
2024-04-15 08:43:11,564:INFO:            hyperopt: Not installed
2024-04-15 08:43:11,564:INFO:              optuna: Not installed
2024-04-15 08:43:11,564:INFO:               skopt: Not installed
2024-04-15 08:43:11,564:INFO:              mlflow: 2.11.3
2024-04-15 08:43:11,564:INFO:              gradio: Not installed
2024-04-15 08:43:11,564:INFO:             fastapi: Not installed
2024-04-15 08:43:11,564:INFO:             uvicorn: Not installed
2024-04-15 08:43:11,564:INFO:              m2cgen: Not installed
2024-04-15 08:43:11,564:INFO:           evidently: Not installed
2024-04-15 08:43:11,564:INFO:               fugue: Not installed
2024-04-15 08:43:11,564:INFO:           streamlit: 1.33.0
2024-04-15 08:43:11,564:INFO:             prophet: Not installed
2024-04-15 08:43:11,565:INFO:None
2024-04-15 08:43:11,565:INFO:Set up data.
2024-04-15 08:43:11,569:INFO:Set up folding strategy.
2024-04-15 08:43:11,569:INFO:Set up train/test split.
2024-04-15 08:43:11,570:INFO:Set up data.
2024-04-15 08:43:11,573:INFO:Set up index.
2024-04-15 08:43:11,573:INFO:Assigning column types.
2024-04-15 08:43:11,576:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 08:43:11,611:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:43:11,612:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:43:11,638:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,639:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,676:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 08:43:11,677:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:43:11,698:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,698:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 08:43:11,734:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:43:11,756:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,757:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,795:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 08:43:11,818:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,818:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,819:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 08:43:11,876:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,876:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,937:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,937:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:11,938:INFO:Preparing preprocessing pipeline...
2024-04-15 08:43:11,939:INFO:Set up simple imputation.
2024-04-15 08:43:11,940:INFO:Set up feature normalization.
2024-04-15 08:43:11,956:INFO:Finished creating preprocessing pipeline.
2024-04-15 08:43:11,959:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 08:43:11,959:INFO:Creating final display dataframe.
2024-04-15 08:43:12,019:INFO:Setup _display_container:                     Description             Value
0                    Session id              3233
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              80ce
2024-04-15 08:43:12,089:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:12,090:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:12,151:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:12,151:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 08:43:12,152:INFO:setup() successfully completed in 0.6s...............
2024-04-15 08:43:12,153:INFO:Initializing compare_models()
2024-04-15 08:43:12,153:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 08:43:12,153:INFO:Checking exceptions
2024-04-15 08:43:12,157:INFO:Preparing display monitor
2024-04-15 08:43:12,173:INFO:Initializing Logistic Regression
2024-04-15 08:43:12,174:INFO:Total runtime is 1.6689300537109375e-05 minutes
2024-04-15 08:43:12,176:INFO:SubProcess create_model() called ==================================
2024-04-15 08:43:12,176:INFO:Initializing create_model()
2024-04-15 08:43:12,176:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58845B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:43:12,176:INFO:Checking exceptions
2024-04-15 08:43:12,176:INFO:Importing libraries
2024-04-15 08:43:12,176:INFO:Copying training dataset
2024-04-15 08:43:12,181:INFO:Defining folds
2024-04-15 08:43:12,181:INFO:Declaring metric variables
2024-04-15 08:43:12,184:INFO:Importing untrained model
2024-04-15 08:43:12,188:INFO:Logistic Regression Imported successfully
2024-04-15 08:43:12,194:INFO:Starting cross validation
2024-04-15 08:43:12,195:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:43:16,089:INFO:Calculating mean and std
2024-04-15 08:43:16,091:INFO:Creating metrics dataframe
2024-04-15 08:43:16,096:INFO:Uploading results into container
2024-04-15 08:43:16,097:INFO:Uploading model into container now
2024-04-15 08:43:16,098:INFO:_master_model_container: 1
2024-04-15 08:43:16,098:INFO:_display_container: 2
2024-04-15 08:43:16,098:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3233, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:43:16,098:INFO:create_model() successfully completed......................................
2024-04-15 08:43:16,348:INFO:SubProcess create_model() end ==================================
2024-04-15 08:43:16,349:INFO:Creating metrics dataframe
2024-04-15 08:43:16,356:INFO:Initializing Decision Tree Classifier
2024-04-15 08:43:16,356:INFO:Total runtime is 0.06971359650293986 minutes
2024-04-15 08:43:16,359:INFO:SubProcess create_model() called ==================================
2024-04-15 08:43:16,359:INFO:Initializing create_model()
2024-04-15 08:43:16,359:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58845B190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:43:16,360:INFO:Checking exceptions
2024-04-15 08:43:16,360:INFO:Importing libraries
2024-04-15 08:43:16,360:INFO:Copying training dataset
2024-04-15 08:43:16,364:INFO:Defining folds
2024-04-15 08:43:16,364:INFO:Declaring metric variables
2024-04-15 08:43:16,366:INFO:Importing untrained model
2024-04-15 08:43:16,369:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:43:16,374:INFO:Starting cross validation
2024-04-15 08:43:16,375:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 08:43:18,238:INFO:Calculating mean and std
2024-04-15 08:43:18,240:INFO:Creating metrics dataframe
2024-04-15 08:43:18,246:INFO:Uploading results into container
2024-04-15 08:43:18,247:INFO:Uploading model into container now
2024-04-15 08:43:18,248:INFO:_master_model_container: 2
2024-04-15 08:43:18,248:INFO:_display_container: 2
2024-04-15 08:43:18,248:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3233, splitter='best')
2024-04-15 08:43:18,248:INFO:create_model() successfully completed......................................
2024-04-15 08:43:18,468:INFO:SubProcess create_model() end ==================================
2024-04-15 08:43:18,468:INFO:Creating metrics dataframe
2024-04-15 08:43:18,481:INFO:Initializing create_model()
2024-04-15 08:43:18,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3233, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:43:18,481:INFO:Checking exceptions
2024-04-15 08:43:18,483:INFO:Importing libraries
2024-04-15 08:43:18,483:INFO:Copying training dataset
2024-04-15 08:43:18,487:INFO:Defining folds
2024-04-15 08:43:18,487:INFO:Declaring metric variables
2024-04-15 08:43:18,487:INFO:Importing untrained model
2024-04-15 08:43:18,487:INFO:Declaring custom model
2024-04-15 08:43:18,487:INFO:Decision Tree Classifier Imported successfully
2024-04-15 08:43:18,488:INFO:Cross validation set to False
2024-04-15 08:43:18,488:INFO:Fitting Model
2024-04-15 08:43:18,541:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3233, splitter='best')
2024-04-15 08:43:18,541:INFO:create_model() successfully completed......................................
2024-04-15 08:43:18,739:INFO:Initializing create_model()
2024-04-15 08:43:18,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3233, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 08:43:18,740:INFO:Checking exceptions
2024-04-15 08:43:18,741:INFO:Importing libraries
2024-04-15 08:43:18,741:INFO:Copying training dataset
2024-04-15 08:43:18,744:INFO:Defining folds
2024-04-15 08:43:18,744:INFO:Declaring metric variables
2024-04-15 08:43:18,745:INFO:Importing untrained model
2024-04-15 08:43:18,745:INFO:Declaring custom model
2024-04-15 08:43:18,745:INFO:Logistic Regression Imported successfully
2024-04-15 08:43:18,746:INFO:Cross validation set to False
2024-04-15 08:43:18,746:INFO:Fitting Model
2024-04-15 08:43:18,761:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3233, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 08:43:18,761:INFO:create_model() successfully completed......................................
2024-04-15 08:43:18,967:INFO:_master_model_container: 2
2024-04-15 08:43:18,967:INFO:_display_container: 2
2024-04-15 08:43:18,968:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3233, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3233, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 08:43:18,968:INFO:compare_models() successfully completed......................................
2024-04-15 08:43:18,968:INFO:Initializing predict_model()
2024-04-15 08:43:18,968:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586B47A00>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3233, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58853B820>)
2024-04-15 08:43:18,968:INFO:Checking exceptions
2024-04-15 08:43:18,969:INFO:Preloading libraries
2024-04-15 09:01:50,096:INFO:PyCaret ClassificationExperiment
2024-04-15 09:01:50,096:INFO:Logging name: clf-default-name
2024-04-15 09:01:50,096:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:01:50,096:INFO:version 3.2.0
2024-04-15 09:01:50,096:INFO:Initializing setup()
2024-04-15 09:01:50,096:INFO:self.USI: 6b85
2024-04-15 09:01:50,096:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:01:50,096:INFO:Checking environment
2024-04-15 09:01:50,096:INFO:python_version: 3.8.0
2024-04-15 09:01:50,096:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:01:50,096:INFO:machine: AMD64
2024-04-15 09:01:50,096:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:01:50,103:INFO:Memory: svmem(total=34301427712, available=17822789632, percent=48.0, used=16478638080, free=17822789632)
2024-04-15 09:01:50,103:INFO:Physical Core: 6
2024-04-15 09:01:50,103:INFO:Logical Core: 12
2024-04-15 09:01:50,103:INFO:Checking libraries
2024-04-15 09:01:50,103:INFO:System:
2024-04-15 09:01:50,103:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:01:50,103:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:01:50,103:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:01:50,103:INFO:PyCaret required dependencies:
2024-04-15 09:01:50,103:INFO:                 pip: 19.2.3
2024-04-15 09:01:50,103:INFO:          setuptools: 41.2.0
2024-04-15 09:01:50,103:INFO:             pycaret: 3.2.0
2024-04-15 09:01:50,103:INFO:             IPython: 8.12.3
2024-04-15 09:01:50,103:INFO:          ipywidgets: 8.1.2
2024-04-15 09:01:50,103:INFO:                tqdm: 4.66.2
2024-04-15 09:01:50,103:INFO:               numpy: 1.24.4
2024-04-15 09:01:50,103:INFO:              pandas: 1.5.3
2024-04-15 09:01:50,103:INFO:              jinja2: 3.1.3
2024-04-15 09:01:50,103:INFO:               scipy: 1.10.1
2024-04-15 09:01:50,103:INFO:              joblib: 1.3.2
2024-04-15 09:01:50,103:INFO:             sklearn: 1.2.0
2024-04-15 09:01:50,103:INFO:                pyod: 1.1.3
2024-04-15 09:01:50,104:INFO:            imblearn: 0.12.2
2024-04-15 09:01:50,104:INFO:   category_encoders: 2.6.3
2024-04-15 09:01:50,104:INFO:            lightgbm: 4.3.0
2024-04-15 09:01:50,104:INFO:               numba: 0.58.1
2024-04-15 09:01:50,104:INFO:            requests: 2.31.0
2024-04-15 09:01:50,104:INFO:          matplotlib: 3.6.0
2024-04-15 09:01:50,104:INFO:          scikitplot: 0.3.7
2024-04-15 09:01:50,104:INFO:         yellowbrick: 1.5
2024-04-15 09:01:50,104:INFO:              plotly: 5.20.0
2024-04-15 09:01:50,104:INFO:    plotly-resampler: Not installed
2024-04-15 09:01:50,104:INFO:             kaleido: 0.2.1
2024-04-15 09:01:50,104:INFO:           schemdraw: 0.15
2024-04-15 09:01:50,104:INFO:         statsmodels: 0.14.1
2024-04-15 09:01:50,104:INFO:              sktime: 0.21.1
2024-04-15 09:01:50,104:INFO:               tbats: 1.1.3
2024-04-15 09:01:50,104:INFO:            pmdarima: 2.0.4
2024-04-15 09:01:50,104:INFO:              psutil: 5.9.8
2024-04-15 09:01:50,104:INFO:          markupsafe: 2.1.5
2024-04-15 09:01:50,104:INFO:             pickle5: Not installed
2024-04-15 09:01:50,104:INFO:         cloudpickle: 3.0.0
2024-04-15 09:01:50,104:INFO:         deprecation: 2.1.0
2024-04-15 09:01:50,104:INFO:              xxhash: 3.4.1
2024-04-15 09:01:50,104:INFO:           wurlitzer: Not installed
2024-04-15 09:01:50,104:INFO:PyCaret optional dependencies:
2024-04-15 09:01:50,104:INFO:                shap: Not installed
2024-04-15 09:01:50,104:INFO:           interpret: Not installed
2024-04-15 09:01:50,104:INFO:                umap: Not installed
2024-04-15 09:01:50,104:INFO:     ydata_profiling: Not installed
2024-04-15 09:01:50,104:INFO:  explainerdashboard: Not installed
2024-04-15 09:01:50,104:INFO:             autoviz: Not installed
2024-04-15 09:01:50,104:INFO:           fairlearn: Not installed
2024-04-15 09:01:50,104:INFO:          deepchecks: Not installed
2024-04-15 09:01:50,104:INFO:             xgboost: Not installed
2024-04-15 09:01:50,104:INFO:            catboost: Not installed
2024-04-15 09:01:50,105:INFO:              kmodes: Not installed
2024-04-15 09:01:50,105:INFO:             mlxtend: Not installed
2024-04-15 09:01:50,105:INFO:       statsforecast: Not installed
2024-04-15 09:01:50,105:INFO:        tune_sklearn: Not installed
2024-04-15 09:01:50,105:INFO:                 ray: Not installed
2024-04-15 09:01:50,105:INFO:            hyperopt: Not installed
2024-04-15 09:01:50,105:INFO:              optuna: Not installed
2024-04-15 09:01:50,105:INFO:               skopt: Not installed
2024-04-15 09:01:50,105:INFO:              mlflow: 2.11.3
2024-04-15 09:01:50,105:INFO:              gradio: Not installed
2024-04-15 09:01:50,105:INFO:             fastapi: Not installed
2024-04-15 09:01:50,105:INFO:             uvicorn: Not installed
2024-04-15 09:01:50,105:INFO:              m2cgen: Not installed
2024-04-15 09:01:50,105:INFO:           evidently: Not installed
2024-04-15 09:01:50,105:INFO:               fugue: Not installed
2024-04-15 09:01:50,105:INFO:           streamlit: 1.33.0
2024-04-15 09:01:50,105:INFO:             prophet: Not installed
2024-04-15 09:01:50,105:INFO:None
2024-04-15 09:01:50,105:INFO:Set up data.
2024-04-15 09:01:50,110:INFO:Set up folding strategy.
2024-04-15 09:01:50,110:INFO:Set up train/test split.
2024-04-15 09:01:50,110:INFO:Set up data.
2024-04-15 09:01:50,113:INFO:Set up index.
2024-04-15 09:01:50,114:INFO:Assigning column types.
2024-04-15 09:01:50,116:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:01:50,160:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:01:50,161:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:01:50,188:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,188:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,223:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:01:50,224:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:01:50,246:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,246:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,246:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:01:50,281:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:01:50,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,342:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:01:50,363:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,364:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:01:50,422:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,422:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,482:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,483:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,484:INFO:Preparing preprocessing pipeline...
2024-04-15 09:01:50,485:INFO:Set up simple imputation.
2024-04-15 09:01:50,485:INFO:Set up feature normalization.
2024-04-15 09:01:50,503:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:01:50,506:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:01:50,506:INFO:Creating final display dataframe.
2024-04-15 09:01:50,570:INFO:Setup _display_container:                     Description             Value
0                    Session id              5809
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              6b85
2024-04-15 09:01:50,638:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,638:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,698:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:01:50,699:INFO:setup() successfully completed in 0.61s...............
2024-04-15 09:01:50,700:INFO:Initializing compare_models()
2024-04-15 09:01:50,700:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=F1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'F1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:01:50,700:INFO:Checking exceptions
2024-04-15 09:01:50,703:INFO:Preparing display monitor
2024-04-15 09:01:50,719:INFO:Initializing Logistic Regression
2024-04-15 09:01:50,719:INFO:Total runtime is 0.0 minutes
2024-04-15 09:01:50,721:INFO:SubProcess create_model() called ==================================
2024-04-15 09:01:50,722:INFO:Initializing create_model()
2024-04-15 09:01:50,722:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5886AE7C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:01:50,722:INFO:Checking exceptions
2024-04-15 09:01:50,722:INFO:Importing libraries
2024-04-15 09:01:50,722:INFO:Copying training dataset
2024-04-15 09:01:50,728:INFO:Defining folds
2024-04-15 09:01:50,728:INFO:Declaring metric variables
2024-04-15 09:01:50,732:INFO:Importing untrained model
2024-04-15 09:01:50,735:INFO:Logistic Regression Imported successfully
2024-04-15 09:01:50,740:INFO:Starting cross validation
2024-04-15 09:01:50,741:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:01:54,649:INFO:Calculating mean and std
2024-04-15 09:01:54,651:INFO:Creating metrics dataframe
2024-04-15 09:01:54,656:INFO:Uploading results into container
2024-04-15 09:01:54,657:INFO:Uploading model into container now
2024-04-15 09:01:54,657:INFO:_master_model_container: 1
2024-04-15 09:01:54,657:INFO:_display_container: 2
2024-04-15 09:01:54,658:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5809, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:01:54,658:INFO:create_model() successfully completed......................................
2024-04-15 09:01:54,901:INFO:SubProcess create_model() end ==================================
2024-04-15 09:01:54,901:INFO:Creating metrics dataframe
2024-04-15 09:01:54,908:INFO:Initializing Decision Tree Classifier
2024-04-15 09:01:54,908:INFO:Total runtime is 0.06981557210286458 minutes
2024-04-15 09:01:54,910:INFO:SubProcess create_model() called ==================================
2024-04-15 09:01:54,911:INFO:Initializing create_model()
2024-04-15 09:01:54,911:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5886AE7C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:01:54,911:INFO:Checking exceptions
2024-04-15 09:01:54,911:INFO:Importing libraries
2024-04-15 09:01:54,911:INFO:Copying training dataset
2024-04-15 09:01:54,915:INFO:Defining folds
2024-04-15 09:01:54,916:INFO:Declaring metric variables
2024-04-15 09:01:54,918:INFO:Importing untrained model
2024-04-15 09:01:54,921:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:01:54,926:INFO:Starting cross validation
2024-04-15 09:01:54,926:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:01:56,765:INFO:Calculating mean and std
2024-04-15 09:01:56,767:INFO:Creating metrics dataframe
2024-04-15 09:01:56,774:INFO:Uploading results into container
2024-04-15 09:01:56,775:INFO:Uploading model into container now
2024-04-15 09:01:56,775:INFO:_master_model_container: 2
2024-04-15 09:01:56,775:INFO:_display_container: 2
2024-04-15 09:01:56,776:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5809, splitter='best')
2024-04-15 09:01:56,776:INFO:create_model() successfully completed......................................
2024-04-15 09:01:56,998:INFO:SubProcess create_model() end ==================================
2024-04-15 09:01:56,998:INFO:Creating metrics dataframe
2024-04-15 09:01:57,013:INFO:Initializing create_model()
2024-04-15 09:01:57,013:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5809, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:01:57,013:INFO:Checking exceptions
2024-04-15 09:01:57,014:INFO:Importing libraries
2024-04-15 09:01:57,015:INFO:Copying training dataset
2024-04-15 09:01:57,018:INFO:Defining folds
2024-04-15 09:01:57,019:INFO:Declaring metric variables
2024-04-15 09:01:57,019:INFO:Importing untrained model
2024-04-15 09:01:57,019:INFO:Declaring custom model
2024-04-15 09:01:57,019:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:01:57,020:INFO:Cross validation set to False
2024-04-15 09:01:57,020:INFO:Fitting Model
2024-04-15 09:01:57,074:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5809, splitter='best')
2024-04-15 09:01:57,074:INFO:create_model() successfully completed......................................
2024-04-15 09:01:57,281:INFO:Initializing create_model()
2024-04-15 09:01:57,281:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5809, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:01:57,281:INFO:Checking exceptions
2024-04-15 09:01:57,283:INFO:Importing libraries
2024-04-15 09:01:57,283:INFO:Copying training dataset
2024-04-15 09:01:57,288:INFO:Defining folds
2024-04-15 09:01:57,289:INFO:Declaring metric variables
2024-04-15 09:01:57,289:INFO:Importing untrained model
2024-04-15 09:01:57,289:INFO:Declaring custom model
2024-04-15 09:01:57,289:INFO:Logistic Regression Imported successfully
2024-04-15 09:01:57,290:INFO:Cross validation set to False
2024-04-15 09:01:57,290:INFO:Fitting Model
2024-04-15 09:01:57,307:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5809, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:01:57,307:INFO:create_model() successfully completed......................................
2024-04-15 09:01:57,522:INFO:_master_model_container: 2
2024-04-15 09:01:57,522:INFO:_display_container: 2
2024-04-15 09:01:57,522:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5809, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5809, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:01:57,523:INFO:compare_models() successfully completed......................................
2024-04-15 09:01:57,523:INFO:Initializing predict_model()
2024-04-15 09:01:57,523:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672FFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5809, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5888E20D0>)
2024-04-15 09:01:57,523:INFO:Checking exceptions
2024-04-15 09:01:57,523:INFO:Preloading libraries
2024-04-15 09:21:43,728:INFO:PyCaret ClassificationExperiment
2024-04-15 09:21:43,728:INFO:Logging name: clf-default-name
2024-04-15 09:21:43,728:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:21:43,728:INFO:version 3.2.0
2024-04-15 09:21:43,728:INFO:Initializing setup()
2024-04-15 09:21:43,728:INFO:self.USI: cb58
2024-04-15 09:21:43,728:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:21:43,728:INFO:Checking environment
2024-04-15 09:21:43,728:INFO:python_version: 3.8.0
2024-04-15 09:21:43,728:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:21:43,729:INFO:machine: AMD64
2024-04-15 09:21:43,729:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:21:43,735:INFO:Memory: svmem(total=34301427712, available=19700903936, percent=42.6, used=14600523776, free=19700903936)
2024-04-15 09:21:43,735:INFO:Physical Core: 6
2024-04-15 09:21:43,735:INFO:Logical Core: 12
2024-04-15 09:21:43,735:INFO:Checking libraries
2024-04-15 09:21:43,735:INFO:System:
2024-04-15 09:21:43,735:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:21:43,735:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:21:43,735:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:21:43,735:INFO:PyCaret required dependencies:
2024-04-15 09:21:43,735:INFO:                 pip: 19.2.3
2024-04-15 09:21:43,736:INFO:          setuptools: 41.2.0
2024-04-15 09:21:43,736:INFO:             pycaret: 3.2.0
2024-04-15 09:21:43,736:INFO:             IPython: 8.12.3
2024-04-15 09:21:43,736:INFO:          ipywidgets: 8.1.2
2024-04-15 09:21:43,736:INFO:                tqdm: 4.66.2
2024-04-15 09:21:43,736:INFO:               numpy: 1.24.4
2024-04-15 09:21:43,736:INFO:              pandas: 1.5.3
2024-04-15 09:21:43,736:INFO:              jinja2: 3.1.3
2024-04-15 09:21:43,736:INFO:               scipy: 1.10.1
2024-04-15 09:21:43,736:INFO:              joblib: 1.3.2
2024-04-15 09:21:43,736:INFO:             sklearn: 1.2.0
2024-04-15 09:21:43,736:INFO:                pyod: 1.1.3
2024-04-15 09:21:43,736:INFO:            imblearn: 0.12.2
2024-04-15 09:21:43,736:INFO:   category_encoders: 2.6.3
2024-04-15 09:21:43,736:INFO:            lightgbm: 4.3.0
2024-04-15 09:21:43,736:INFO:               numba: 0.58.1
2024-04-15 09:21:43,736:INFO:            requests: 2.31.0
2024-04-15 09:21:43,736:INFO:          matplotlib: 3.6.0
2024-04-15 09:21:43,736:INFO:          scikitplot: 0.3.7
2024-04-15 09:21:43,736:INFO:         yellowbrick: 1.5
2024-04-15 09:21:43,736:INFO:              plotly: 5.20.0
2024-04-15 09:21:43,736:INFO:    plotly-resampler: Not installed
2024-04-15 09:21:43,736:INFO:             kaleido: 0.2.1
2024-04-15 09:21:43,736:INFO:           schemdraw: 0.15
2024-04-15 09:21:43,736:INFO:         statsmodels: 0.14.1
2024-04-15 09:21:43,736:INFO:              sktime: 0.21.1
2024-04-15 09:21:43,736:INFO:               tbats: 1.1.3
2024-04-15 09:21:43,736:INFO:            pmdarima: 2.0.4
2024-04-15 09:21:43,736:INFO:              psutil: 5.9.8
2024-04-15 09:21:43,736:INFO:          markupsafe: 2.1.5
2024-04-15 09:21:43,736:INFO:             pickle5: Not installed
2024-04-15 09:21:43,737:INFO:         cloudpickle: 3.0.0
2024-04-15 09:21:43,737:INFO:         deprecation: 2.1.0
2024-04-15 09:21:43,737:INFO:              xxhash: 3.4.1
2024-04-15 09:21:43,737:INFO:           wurlitzer: Not installed
2024-04-15 09:21:43,737:INFO:PyCaret optional dependencies:
2024-04-15 09:21:43,737:INFO:                shap: Not installed
2024-04-15 09:21:43,737:INFO:           interpret: Not installed
2024-04-15 09:21:43,737:INFO:                umap: Not installed
2024-04-15 09:21:43,737:INFO:     ydata_profiling: Not installed
2024-04-15 09:21:43,737:INFO:  explainerdashboard: Not installed
2024-04-15 09:21:43,737:INFO:             autoviz: Not installed
2024-04-15 09:21:43,737:INFO:           fairlearn: Not installed
2024-04-15 09:21:43,737:INFO:          deepchecks: Not installed
2024-04-15 09:21:43,737:INFO:             xgboost: Not installed
2024-04-15 09:21:43,737:INFO:            catboost: Not installed
2024-04-15 09:21:43,737:INFO:              kmodes: Not installed
2024-04-15 09:21:43,737:INFO:             mlxtend: Not installed
2024-04-15 09:21:43,737:INFO:       statsforecast: Not installed
2024-04-15 09:21:43,737:INFO:        tune_sklearn: Not installed
2024-04-15 09:21:43,737:INFO:                 ray: Not installed
2024-04-15 09:21:43,737:INFO:            hyperopt: Not installed
2024-04-15 09:21:43,737:INFO:              optuna: Not installed
2024-04-15 09:21:43,737:INFO:               skopt: Not installed
2024-04-15 09:21:43,737:INFO:              mlflow: 2.11.3
2024-04-15 09:21:43,737:INFO:              gradio: Not installed
2024-04-15 09:21:43,737:INFO:             fastapi: Not installed
2024-04-15 09:21:43,737:INFO:             uvicorn: Not installed
2024-04-15 09:21:43,737:INFO:              m2cgen: Not installed
2024-04-15 09:21:43,738:INFO:           evidently: Not installed
2024-04-15 09:21:43,738:INFO:               fugue: Not installed
2024-04-15 09:21:43,738:INFO:           streamlit: 1.33.0
2024-04-15 09:21:43,738:INFO:             prophet: Not installed
2024-04-15 09:21:43,738:INFO:None
2024-04-15 09:21:43,738:INFO:Set up data.
2024-04-15 09:21:43,743:INFO:Set up folding strategy.
2024-04-15 09:21:43,743:INFO:Set up train/test split.
2024-04-15 09:21:43,743:INFO:Set up data.
2024-04-15 09:21:43,746:INFO:Set up index.
2024-04-15 09:21:43,747:INFO:Assigning column types.
2024-04-15 09:21:43,749:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:21:43,793:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:21:43,793:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:21:43,823:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:43,824:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:43,865:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:21:43,865:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:21:43,893:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:43,893:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:43,893:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:21:43,931:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:21:43,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:43,955:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:43,991:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:21:44,013:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,013:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,013:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:21:44,073:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,073:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,132:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,132:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,133:INFO:Preparing preprocessing pipeline...
2024-04-15 09:21:44,135:INFO:Set up simple imputation.
2024-04-15 09:21:44,135:INFO:Set up feature normalization.
2024-04-15 09:21:44,152:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:21:44,155:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:21:44,155:INFO:Creating final display dataframe.
2024-04-15 09:21:44,219:INFO:Setup _display_container:                     Description             Value
0                    Session id              4373
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              cb58
2024-04-15 09:21:44,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,290:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,353:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:21:44,353:INFO:setup() successfully completed in 0.63s...............
2024-04-15 09:21:44,355:INFO:Initializing compare_models()
2024-04-15 09:21:44,355:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=F1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'F1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:21:44,355:INFO:Checking exceptions
2024-04-15 09:21:44,358:INFO:Preparing display monitor
2024-04-15 09:21:44,394:INFO:Initializing Logistic Regression
2024-04-15 09:21:44,394:INFO:Total runtime is 0.0 minutes
2024-04-15 09:21:44,398:INFO:SubProcess create_model() called ==================================
2024-04-15 09:21:44,398:INFO:Initializing create_model()
2024-04-15 09:21:44,398:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586A5FB20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:21:44,398:INFO:Checking exceptions
2024-04-15 09:21:44,398:INFO:Importing libraries
2024-04-15 09:21:44,398:INFO:Copying training dataset
2024-04-15 09:21:44,405:INFO:Defining folds
2024-04-15 09:21:44,405:INFO:Declaring metric variables
2024-04-15 09:21:44,410:INFO:Importing untrained model
2024-04-15 09:21:44,414:INFO:Logistic Regression Imported successfully
2024-04-15 09:21:44,422:INFO:Starting cross validation
2024-04-15 09:21:44,423:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:21:48,300:INFO:Calculating mean and std
2024-04-15 09:21:48,302:INFO:Creating metrics dataframe
2024-04-15 09:21:48,307:INFO:Uploading results into container
2024-04-15 09:21:48,307:INFO:Uploading model into container now
2024-04-15 09:21:48,308:INFO:_master_model_container: 1
2024-04-15 09:21:48,308:INFO:_display_container: 2
2024-04-15 09:21:48,309:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4373, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:21:48,309:INFO:create_model() successfully completed......................................
2024-04-15 09:21:48,551:INFO:SubProcess create_model() end ==================================
2024-04-15 09:21:48,551:INFO:Creating metrics dataframe
2024-04-15 09:21:48,558:INFO:Initializing Decision Tree Classifier
2024-04-15 09:21:48,558:INFO:Total runtime is 0.06939899524052938 minutes
2024-04-15 09:21:48,561:INFO:SubProcess create_model() called ==================================
2024-04-15 09:21:48,561:INFO:Initializing create_model()
2024-04-15 09:21:48,561:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586A5FB20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:21:48,561:INFO:Checking exceptions
2024-04-15 09:21:48,561:INFO:Importing libraries
2024-04-15 09:21:48,561:INFO:Copying training dataset
2024-04-15 09:21:48,566:INFO:Defining folds
2024-04-15 09:21:48,566:INFO:Declaring metric variables
2024-04-15 09:21:48,569:INFO:Importing untrained model
2024-04-15 09:21:48,572:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:21:48,576:INFO:Starting cross validation
2024-04-15 09:21:48,577:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:21:50,390:INFO:Calculating mean and std
2024-04-15 09:21:50,392:INFO:Creating metrics dataframe
2024-04-15 09:21:50,398:INFO:Uploading results into container
2024-04-15 09:21:50,399:INFO:Uploading model into container now
2024-04-15 09:21:50,400:INFO:_master_model_container: 2
2024-04-15 09:21:50,400:INFO:_display_container: 2
2024-04-15 09:21:50,400:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4373, splitter='best')
2024-04-15 09:21:50,400:INFO:create_model() successfully completed......................................
2024-04-15 09:21:50,636:INFO:SubProcess create_model() end ==================================
2024-04-15 09:21:50,636:INFO:Creating metrics dataframe
2024-04-15 09:21:50,651:INFO:Initializing create_model()
2024-04-15 09:21:50,651:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4373, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:21:50,651:INFO:Checking exceptions
2024-04-15 09:21:50,652:INFO:Importing libraries
2024-04-15 09:21:50,652:INFO:Copying training dataset
2024-04-15 09:21:50,656:INFO:Defining folds
2024-04-15 09:21:50,656:INFO:Declaring metric variables
2024-04-15 09:21:50,656:INFO:Importing untrained model
2024-04-15 09:21:50,656:INFO:Declaring custom model
2024-04-15 09:21:50,657:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:21:50,657:INFO:Cross validation set to False
2024-04-15 09:21:50,657:INFO:Fitting Model
2024-04-15 09:21:50,713:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4373, splitter='best')
2024-04-15 09:21:50,713:INFO:create_model() successfully completed......................................
2024-04-15 09:21:50,919:INFO:Initializing create_model()
2024-04-15 09:21:50,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4373, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:21:50,920:INFO:Checking exceptions
2024-04-15 09:21:50,921:INFO:Importing libraries
2024-04-15 09:21:50,921:INFO:Copying training dataset
2024-04-15 09:21:50,925:INFO:Defining folds
2024-04-15 09:21:50,925:INFO:Declaring metric variables
2024-04-15 09:21:50,926:INFO:Importing untrained model
2024-04-15 09:21:50,926:INFO:Declaring custom model
2024-04-15 09:21:50,926:INFO:Logistic Regression Imported successfully
2024-04-15 09:21:50,927:INFO:Cross validation set to False
2024-04-15 09:21:50,927:INFO:Fitting Model
2024-04-15 09:21:50,943:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4373, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:21:50,943:INFO:create_model() successfully completed......................................
2024-04-15 09:21:51,161:INFO:_master_model_container: 2
2024-04-15 09:21:51,161:INFO:_display_container: 2
2024-04-15 09:21:51,162:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4373, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4373, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:21:51,162:INFO:compare_models() successfully completed......................................
2024-04-15 09:21:51,162:INFO:Initializing predict_model()
2024-04-15 09:21:51,163:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4373, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58C151040>)
2024-04-15 09:21:51,163:INFO:Checking exceptions
2024-04-15 09:21:51,163:INFO:Preloading libraries
2024-04-15 09:21:51,611:INFO:Initializing predict_model()
2024-04-15 09:21:51,611:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B3D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4373, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58863DEE0>)
2024-04-15 09:21:51,611:INFO:Checking exceptions
2024-04-15 09:21:51,611:INFO:Preloading libraries
2024-04-15 09:27:17,428:INFO:PyCaret ClassificationExperiment
2024-04-15 09:27:17,428:INFO:Logging name: clf-default-name
2024-04-15 09:27:17,428:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:27:17,428:INFO:version 3.2.0
2024-04-15 09:27:17,428:INFO:Initializing setup()
2024-04-15 09:27:17,428:INFO:self.USI: 0c67
2024-04-15 09:27:17,428:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:27:17,428:INFO:Checking environment
2024-04-15 09:27:17,428:INFO:python_version: 3.8.0
2024-04-15 09:27:17,428:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:27:17,428:INFO:machine: AMD64
2024-04-15 09:27:17,428:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:27:17,435:INFO:Memory: svmem(total=34301427712, available=19697446912, percent=42.6, used=14603980800, free=19697446912)
2024-04-15 09:27:17,435:INFO:Physical Core: 6
2024-04-15 09:27:17,435:INFO:Logical Core: 12
2024-04-15 09:27:17,435:INFO:Checking libraries
2024-04-15 09:27:17,435:INFO:System:
2024-04-15 09:27:17,435:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:27:17,435:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:27:17,435:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:27:17,435:INFO:PyCaret required dependencies:
2024-04-15 09:27:17,435:INFO:                 pip: 19.2.3
2024-04-15 09:27:17,435:INFO:          setuptools: 41.2.0
2024-04-15 09:27:17,435:INFO:             pycaret: 3.2.0
2024-04-15 09:27:17,435:INFO:             IPython: 8.12.3
2024-04-15 09:27:17,435:INFO:          ipywidgets: 8.1.2
2024-04-15 09:27:17,435:INFO:                tqdm: 4.66.2
2024-04-15 09:27:17,436:INFO:               numpy: 1.24.4
2024-04-15 09:27:17,436:INFO:              pandas: 1.5.3
2024-04-15 09:27:17,436:INFO:              jinja2: 3.1.3
2024-04-15 09:27:17,436:INFO:               scipy: 1.10.1
2024-04-15 09:27:17,436:INFO:              joblib: 1.3.2
2024-04-15 09:27:17,436:INFO:             sklearn: 1.2.0
2024-04-15 09:27:17,436:INFO:                pyod: 1.1.3
2024-04-15 09:27:17,436:INFO:            imblearn: 0.12.2
2024-04-15 09:27:17,436:INFO:   category_encoders: 2.6.3
2024-04-15 09:27:17,436:INFO:            lightgbm: 4.3.0
2024-04-15 09:27:17,436:INFO:               numba: 0.58.1
2024-04-15 09:27:17,436:INFO:            requests: 2.31.0
2024-04-15 09:27:17,436:INFO:          matplotlib: 3.6.0
2024-04-15 09:27:17,436:INFO:          scikitplot: 0.3.7
2024-04-15 09:27:17,436:INFO:         yellowbrick: 1.5
2024-04-15 09:27:17,436:INFO:              plotly: 5.20.0
2024-04-15 09:27:17,436:INFO:    plotly-resampler: Not installed
2024-04-15 09:27:17,436:INFO:             kaleido: 0.2.1
2024-04-15 09:27:17,436:INFO:           schemdraw: 0.15
2024-04-15 09:27:17,436:INFO:         statsmodels: 0.14.1
2024-04-15 09:27:17,436:INFO:              sktime: 0.21.1
2024-04-15 09:27:17,436:INFO:               tbats: 1.1.3
2024-04-15 09:27:17,437:INFO:            pmdarima: 2.0.4
2024-04-15 09:27:17,437:INFO:              psutil: 5.9.8
2024-04-15 09:27:17,437:INFO:          markupsafe: 2.1.5
2024-04-15 09:27:17,437:INFO:             pickle5: Not installed
2024-04-15 09:27:17,437:INFO:         cloudpickle: 3.0.0
2024-04-15 09:27:17,437:INFO:         deprecation: 2.1.0
2024-04-15 09:27:17,437:INFO:              xxhash: 3.4.1
2024-04-15 09:27:17,437:INFO:           wurlitzer: Not installed
2024-04-15 09:27:17,437:INFO:PyCaret optional dependencies:
2024-04-15 09:27:17,437:INFO:                shap: Not installed
2024-04-15 09:27:17,437:INFO:           interpret: Not installed
2024-04-15 09:27:17,437:INFO:                umap: Not installed
2024-04-15 09:27:17,437:INFO:     ydata_profiling: Not installed
2024-04-15 09:27:17,437:INFO:  explainerdashboard: Not installed
2024-04-15 09:27:17,437:INFO:             autoviz: Not installed
2024-04-15 09:27:17,437:INFO:           fairlearn: Not installed
2024-04-15 09:27:17,437:INFO:          deepchecks: Not installed
2024-04-15 09:27:17,437:INFO:             xgboost: Not installed
2024-04-15 09:27:17,437:INFO:            catboost: Not installed
2024-04-15 09:27:17,437:INFO:              kmodes: Not installed
2024-04-15 09:27:17,437:INFO:             mlxtend: Not installed
2024-04-15 09:27:17,437:INFO:       statsforecast: Not installed
2024-04-15 09:27:17,437:INFO:        tune_sklearn: Not installed
2024-04-15 09:27:17,438:INFO:                 ray: Not installed
2024-04-15 09:27:17,438:INFO:            hyperopt: Not installed
2024-04-15 09:27:17,438:INFO:              optuna: Not installed
2024-04-15 09:27:17,438:INFO:               skopt: Not installed
2024-04-15 09:27:17,438:INFO:              mlflow: 2.11.3
2024-04-15 09:27:17,438:INFO:              gradio: Not installed
2024-04-15 09:27:17,438:INFO:             fastapi: Not installed
2024-04-15 09:27:17,438:INFO:             uvicorn: Not installed
2024-04-15 09:27:17,438:INFO:              m2cgen: Not installed
2024-04-15 09:27:17,438:INFO:           evidently: Not installed
2024-04-15 09:27:17,438:INFO:               fugue: Not installed
2024-04-15 09:27:17,438:INFO:           streamlit: 1.33.0
2024-04-15 09:27:17,438:INFO:             prophet: Not installed
2024-04-15 09:27:17,438:INFO:None
2024-04-15 09:27:17,438:INFO:Set up data.
2024-04-15 09:27:17,444:INFO:Set up folding strategy.
2024-04-15 09:27:17,444:INFO:Set up train/test split.
2024-04-15 09:27:17,444:INFO:Set up data.
2024-04-15 09:27:17,448:INFO:Set up index.
2024-04-15 09:27:17,449:INFO:Assigning column types.
2024-04-15 09:27:17,452:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:27:17,492:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:27:17,494:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:27:17,522:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,522:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,560:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:27:17,561:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:27:17,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,587:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,587:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:27:17,628:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:27:17,651:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,651:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,689:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:27:17,711:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,712:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,712:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:27:17,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,773:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,834:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,834:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,835:INFO:Preparing preprocessing pipeline...
2024-04-15 09:27:17,836:INFO:Set up simple imputation.
2024-04-15 09:27:17,836:INFO:Set up feature normalization.
2024-04-15 09:27:17,853:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:27:17,856:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:27:17,857:INFO:Creating final display dataframe.
2024-04-15 09:27:17,917:INFO:Setup _display_container:                     Description             Value
0                    Session id              8705
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              0c67
2024-04-15 09:27:17,988:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:17,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:18,050:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:18,050:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:27:18,051:INFO:setup() successfully completed in 0.62s...............
2024-04-15 09:27:18,052:INFO:Initializing compare_models()
2024-04-15 09:27:18,052:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=F1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'F1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:27:18,052:INFO:Checking exceptions
2024-04-15 09:27:18,055:INFO:Preparing display monitor
2024-04-15 09:27:18,074:INFO:Initializing Logistic Regression
2024-04-15 09:27:18,074:INFO:Total runtime is 0.0 minutes
2024-04-15 09:27:18,077:INFO:SubProcess create_model() called ==================================
2024-04-15 09:27:18,077:INFO:Initializing create_model()
2024-04-15 09:27:18,077:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C587DFA760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:27:18,077:INFO:Checking exceptions
2024-04-15 09:27:18,077:INFO:Importing libraries
2024-04-15 09:27:18,078:INFO:Copying training dataset
2024-04-15 09:27:18,085:INFO:Defining folds
2024-04-15 09:27:18,085:INFO:Declaring metric variables
2024-04-15 09:27:18,099:INFO:Importing untrained model
2024-04-15 09:27:18,109:INFO:Logistic Regression Imported successfully
2024-04-15 09:27:18,117:INFO:Starting cross validation
2024-04-15 09:27:18,118:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:27:20,453:INFO:Calculating mean and std
2024-04-15 09:27:20,455:INFO:Creating metrics dataframe
2024-04-15 09:27:20,458:INFO:Uploading results into container
2024-04-15 09:27:20,459:INFO:Uploading model into container now
2024-04-15 09:27:20,459:INFO:_master_model_container: 1
2024-04-15 09:27:20,459:INFO:_display_container: 2
2024-04-15 09:27:20,460:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:27:20,460:INFO:create_model() successfully completed......................................
2024-04-15 09:27:20,746:INFO:SubProcess create_model() end ==================================
2024-04-15 09:27:20,746:INFO:Creating metrics dataframe
2024-04-15 09:27:20,753:INFO:Initializing Decision Tree Classifier
2024-04-15 09:27:20,753:INFO:Total runtime is 0.044660083452860516 minutes
2024-04-15 09:27:20,756:INFO:SubProcess create_model() called ==================================
2024-04-15 09:27:20,756:INFO:Initializing create_model()
2024-04-15 09:27:20,756:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C587DFA760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:27:20,756:INFO:Checking exceptions
2024-04-15 09:27:20,756:INFO:Importing libraries
2024-04-15 09:27:20,756:INFO:Copying training dataset
2024-04-15 09:27:20,761:INFO:Defining folds
2024-04-15 09:27:20,761:INFO:Declaring metric variables
2024-04-15 09:27:20,765:INFO:Importing untrained model
2024-04-15 09:27:20,767:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:27:20,773:INFO:Starting cross validation
2024-04-15 09:27:20,774:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:27:24,061:INFO:Calculating mean and std
2024-04-15 09:27:24,064:INFO:Creating metrics dataframe
2024-04-15 09:27:24,072:INFO:Uploading results into container
2024-04-15 09:27:24,073:INFO:Uploading model into container now
2024-04-15 09:27:24,073:INFO:_master_model_container: 2
2024-04-15 09:27:24,074:INFO:_display_container: 2
2024-04-15 09:27:24,074:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best')
2024-04-15 09:27:24,075:INFO:create_model() successfully completed......................................
2024-04-15 09:27:24,356:INFO:SubProcess create_model() end ==================================
2024-04-15 09:27:24,356:INFO:Creating metrics dataframe
2024-04-15 09:27:24,372:INFO:Initializing create_model()
2024-04-15 09:27:24,373:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:27:24,373:INFO:Checking exceptions
2024-04-15 09:27:24,374:INFO:Importing libraries
2024-04-15 09:27:24,374:INFO:Copying training dataset
2024-04-15 09:27:24,378:INFO:Defining folds
2024-04-15 09:27:24,379:INFO:Declaring metric variables
2024-04-15 09:27:24,379:INFO:Importing untrained model
2024-04-15 09:27:24,379:INFO:Declaring custom model
2024-04-15 09:27:24,379:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:27:24,380:INFO:Cross validation set to False
2024-04-15 09:27:24,380:INFO:Fitting Model
2024-04-15 09:27:24,435:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best')
2024-04-15 09:27:24,436:INFO:create_model() successfully completed......................................
2024-04-15 09:27:24,683:INFO:Initializing create_model()
2024-04-15 09:27:24,683:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:27:24,683:INFO:Checking exceptions
2024-04-15 09:27:24,685:INFO:Importing libraries
2024-04-15 09:27:24,685:INFO:Copying training dataset
2024-04-15 09:27:24,689:INFO:Defining folds
2024-04-15 09:27:24,689:INFO:Declaring metric variables
2024-04-15 09:27:24,689:INFO:Importing untrained model
2024-04-15 09:27:24,689:INFO:Declaring custom model
2024-04-15 09:27:24,690:INFO:Logistic Regression Imported successfully
2024-04-15 09:27:24,690:INFO:Cross validation set to False
2024-04-15 09:27:24,690:INFO:Fitting Model
2024-04-15 09:27:24,707:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:27:24,707:INFO:create_model() successfully completed......................................
2024-04-15 09:27:24,954:INFO:_master_model_container: 2
2024-04-15 09:27:24,954:INFO:_display_container: 2
2024-04-15 09:27:24,955:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:27:24,955:INFO:compare_models() successfully completed......................................
2024-04-15 09:27:24,955:INFO:Initializing predict_model()
2024-04-15 09:27:24,955:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58C752F70>)
2024-04-15 09:27:24,955:INFO:Checking exceptions
2024-04-15 09:27:24,955:INFO:Preloading libraries
2024-04-15 09:27:25,565:INFO:Initializing predict_model()
2024-04-15 09:27:25,565:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5889C1B80>)
2024-04-15 09:27:25,565:INFO:Checking exceptions
2024-04-15 09:27:25,565:INFO:Preloading libraries
2024-04-15 09:27:25,970:INFO:Initializing tune_model()
2024-04-15 09:27:25,970:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>)
2024-04-15 09:27:25,970:INFO:Checking exceptions
2024-04-15 09:27:25,981:INFO:Copying training dataset
2024-04-15 09:27:25,985:INFO:Checking base model
2024-04-15 09:27:25,985:INFO:Base model : Decision Tree Classifier
2024-04-15 09:27:25,988:INFO:Declaring metric variables
2024-04-15 09:27:25,991:INFO:Defining Hyperparameters
2024-04-15 09:27:26,286:INFO:Tuning with n_jobs=-1
2024-04-15 09:27:26,286:INFO:Initializing RandomizedSearchCV
2024-04-15 09:27:28,067:INFO:best_params: {'actual_estimator__min_samples_split': 7, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.005, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 16, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:27:28,068:INFO:Hyperparameter search completed
2024-04-15 09:27:28,068:INFO:SubProcess create_model() called ==================================
2024-04-15 09:27:28,068:INFO:Initializing create_model()
2024-04-15 09:27:28,069:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58E4539D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 7, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.005, 'max_features': 1.0, 'max_depth': 16, 'criterion': 'entropy'})
2024-04-15 09:27:28,069:INFO:Checking exceptions
2024-04-15 09:27:28,069:INFO:Importing libraries
2024-04-15 09:27:28,069:INFO:Copying training dataset
2024-04-15 09:27:28,074:INFO:Defining folds
2024-04-15 09:27:28,074:INFO:Declaring metric variables
2024-04-15 09:27:28,077:INFO:Importing untrained model
2024-04-15 09:27:28,078:INFO:Declaring custom model
2024-04-15 09:27:28,081:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:27:28,086:INFO:Starting cross validation
2024-04-15 09:27:28,087:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:27:28,176:INFO:Calculating mean and std
2024-04-15 09:27:28,178:INFO:Creating metrics dataframe
2024-04-15 09:27:28,182:INFO:Finalizing model
2024-04-15 09:27:28,201:INFO:Uploading results into container
2024-04-15 09:27:28,201:INFO:Uploading model into container now
2024-04-15 09:27:28,201:INFO:_master_model_container: 3
2024-04-15 09:27:28,201:INFO:_display_container: 5
2024-04-15 09:27:28,202:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=16, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=4,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best')
2024-04-15 09:27:28,202:INFO:create_model() successfully completed......................................
2024-04-15 09:27:28,462:INFO:SubProcess create_model() end ==================================
2024-04-15 09:27:28,462:INFO:choose_better activated
2024-04-15 09:27:28,465:INFO:SubProcess create_model() called ==================================
2024-04-15 09:27:28,465:INFO:Initializing create_model()
2024-04-15 09:27:28,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:27:28,466:INFO:Checking exceptions
2024-04-15 09:27:28,467:INFO:Importing libraries
2024-04-15 09:27:28,467:INFO:Copying training dataset
2024-04-15 09:27:28,471:INFO:Defining folds
2024-04-15 09:27:28,472:INFO:Declaring metric variables
2024-04-15 09:27:28,472:INFO:Importing untrained model
2024-04-15 09:27:28,472:INFO:Declaring custom model
2024-04-15 09:27:28,472:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:27:28,473:INFO:Starting cross validation
2024-04-15 09:27:28,473:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:27:28,606:INFO:Calculating mean and std
2024-04-15 09:27:28,606:INFO:Creating metrics dataframe
2024-04-15 09:27:28,608:INFO:Finalizing model
2024-04-15 09:27:28,661:INFO:Uploading results into container
2024-04-15 09:27:28,662:INFO:Uploading model into container now
2024-04-15 09:27:28,662:INFO:_master_model_container: 4
2024-04-15 09:27:28,662:INFO:_display_container: 6
2024-04-15 09:27:28,663:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best')
2024-04-15 09:27:28,663:INFO:create_model() successfully completed......................................
2024-04-15 09:27:28,909:INFO:SubProcess create_model() end ==================================
2024-04-15 09:27:28,909:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best') result for F1 is 0.5448
2024-04-15 09:27:28,910:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=16, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=4,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best') result for F1 is 0.4516
2024-04-15 09:27:28,910:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best') is best model
2024-04-15 09:27:28,910:INFO:choose_better completed
2024-04-15 09:27:28,911:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:27:28,918:INFO:_master_model_container: 4
2024-04-15 09:27:28,918:INFO:_display_container: 5
2024-04-15 09:27:28,919:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best')
2024-04-15 09:27:28,919:INFO:tune_model() successfully completed......................................
2024-04-15 09:27:29,163:INFO:Initializing predict_model()
2024-04-15 09:27:29,164:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C588A59EE0>)
2024-04-15 09:27:29,164:INFO:Checking exceptions
2024-04-15 09:27:29,164:INFO:Preloading libraries
2024-04-15 09:27:29,515:INFO:Initializing finalize_model()
2024-04-15 09:27:29,515:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:27:29,515:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best')
2024-04-15 09:27:29,518:INFO:Initializing create_model()
2024-04-15 09:27:29,518:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DF12DC0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8705, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:27:29,518:INFO:Checking exceptions
2024-04-15 09:27:29,519:INFO:Importing libraries
2024-04-15 09:27:29,519:INFO:Copying training dataset
2024-04-15 09:27:29,519:INFO:Defining folds
2024-04-15 09:27:29,519:INFO:Declaring metric variables
2024-04-15 09:27:29,519:INFO:Importing untrained model
2024-04-15 09:27:29,519:INFO:Declaring custom model
2024-04-15 09:27:29,520:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:27:29,520:INFO:Cross validation set to False
2024-04-15 09:27:29,520:INFO:Fitting Model
2024-04-15 09:27:29,588:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8705, splitter='best'))],
         verbose=False)
2024-04-15 09:27:29,588:INFO:create_model() successfully completed......................................
2024-04-15 09:27:29,826:INFO:_master_model_container: 4
2024-04-15 09:27:29,826:INFO:_display_container: 6
2024-04-15 09:27:29,831:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8705, splitter='best'))],
         verbose=False)
2024-04-15 09:27:29,831:INFO:finalize_model() successfully completed......................................
2024-04-15 09:27:30,080:INFO:Initializing save_model()
2024-04-15 09:27:30,081:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8705, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:27:30,081:INFO:Adding model into prep_pipe
2024-04-15 09:27:30,081:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:27:30,084:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:27:30,088:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8705, splitter='best'))],
         verbose=False)
2024-04-15 09:27:30,088:INFO:save_model() successfully completed......................................
2024-04-15 09:27:30,339:INFO:Initializing load_model()
2024-04-15 09:27:30,340:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:27:30,426:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:27:34,820:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\2146586206.py:78: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name, stages=['None'])[-1].version

2024-04-15 09:37:19,069:INFO:PyCaret ClassificationExperiment
2024-04-15 09:37:19,070:INFO:Logging name: clf-default-name
2024-04-15 09:37:19,070:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:37:19,070:INFO:version 3.2.0
2024-04-15 09:37:19,070:INFO:Initializing setup()
2024-04-15 09:37:19,070:INFO:self.USI: 54d6
2024-04-15 09:37:19,070:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:37:19,070:INFO:Checking environment
2024-04-15 09:37:19,070:INFO:python_version: 3.8.0
2024-04-15 09:37:19,070:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:37:19,070:INFO:machine: AMD64
2024-04-15 09:37:19,070:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:37:19,076:INFO:Memory: svmem(total=34301427712, available=19610333184, percent=42.8, used=14691094528, free=19610333184)
2024-04-15 09:37:19,076:INFO:Physical Core: 6
2024-04-15 09:37:19,076:INFO:Logical Core: 12
2024-04-15 09:37:19,076:INFO:Checking libraries
2024-04-15 09:37:19,076:INFO:System:
2024-04-15 09:37:19,076:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:37:19,076:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:37:19,076:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:37:19,076:INFO:PyCaret required dependencies:
2024-04-15 09:37:19,076:INFO:                 pip: 19.2.3
2024-04-15 09:37:19,076:INFO:          setuptools: 41.2.0
2024-04-15 09:37:19,076:INFO:             pycaret: 3.2.0
2024-04-15 09:37:19,076:INFO:             IPython: 8.12.3
2024-04-15 09:37:19,076:INFO:          ipywidgets: 8.1.2
2024-04-15 09:37:19,076:INFO:                tqdm: 4.66.2
2024-04-15 09:37:19,076:INFO:               numpy: 1.24.4
2024-04-15 09:37:19,076:INFO:              pandas: 1.5.3
2024-04-15 09:37:19,076:INFO:              jinja2: 3.1.3
2024-04-15 09:37:19,077:INFO:               scipy: 1.10.1
2024-04-15 09:37:19,077:INFO:              joblib: 1.3.2
2024-04-15 09:37:19,077:INFO:             sklearn: 1.2.0
2024-04-15 09:37:19,077:INFO:                pyod: 1.1.3
2024-04-15 09:37:19,077:INFO:            imblearn: 0.12.2
2024-04-15 09:37:19,077:INFO:   category_encoders: 2.6.3
2024-04-15 09:37:19,077:INFO:            lightgbm: 4.3.0
2024-04-15 09:37:19,077:INFO:               numba: 0.58.1
2024-04-15 09:37:19,077:INFO:            requests: 2.31.0
2024-04-15 09:37:19,077:INFO:          matplotlib: 3.6.0
2024-04-15 09:37:19,077:INFO:          scikitplot: 0.3.7
2024-04-15 09:37:19,077:INFO:         yellowbrick: 1.5
2024-04-15 09:37:19,077:INFO:              plotly: 5.20.0
2024-04-15 09:37:19,077:INFO:    plotly-resampler: Not installed
2024-04-15 09:37:19,077:INFO:             kaleido: 0.2.1
2024-04-15 09:37:19,077:INFO:           schemdraw: 0.15
2024-04-15 09:37:19,077:INFO:         statsmodels: 0.14.1
2024-04-15 09:37:19,077:INFO:              sktime: 0.21.1
2024-04-15 09:37:19,077:INFO:               tbats: 1.1.3
2024-04-15 09:37:19,077:INFO:            pmdarima: 2.0.4
2024-04-15 09:37:19,077:INFO:              psutil: 5.9.8
2024-04-15 09:37:19,077:INFO:          markupsafe: 2.1.5
2024-04-15 09:37:19,077:INFO:             pickle5: Not installed
2024-04-15 09:37:19,077:INFO:         cloudpickle: 3.0.0
2024-04-15 09:37:19,077:INFO:         deprecation: 2.1.0
2024-04-15 09:37:19,077:INFO:              xxhash: 3.4.1
2024-04-15 09:37:19,077:INFO:           wurlitzer: Not installed
2024-04-15 09:37:19,077:INFO:PyCaret optional dependencies:
2024-04-15 09:37:19,077:INFO:                shap: Not installed
2024-04-15 09:37:19,077:INFO:           interpret: Not installed
2024-04-15 09:37:19,077:INFO:                umap: Not installed
2024-04-15 09:37:19,077:INFO:     ydata_profiling: Not installed
2024-04-15 09:37:19,077:INFO:  explainerdashboard: Not installed
2024-04-15 09:37:19,077:INFO:             autoviz: Not installed
2024-04-15 09:37:19,077:INFO:           fairlearn: Not installed
2024-04-15 09:37:19,077:INFO:          deepchecks: Not installed
2024-04-15 09:37:19,077:INFO:             xgboost: Not installed
2024-04-15 09:37:19,077:INFO:            catboost: Not installed
2024-04-15 09:37:19,078:INFO:              kmodes: Not installed
2024-04-15 09:37:19,078:INFO:             mlxtend: Not installed
2024-04-15 09:37:19,078:INFO:       statsforecast: Not installed
2024-04-15 09:37:19,078:INFO:        tune_sklearn: Not installed
2024-04-15 09:37:19,078:INFO:                 ray: Not installed
2024-04-15 09:37:19,078:INFO:            hyperopt: Not installed
2024-04-15 09:37:19,078:INFO:              optuna: Not installed
2024-04-15 09:37:19,078:INFO:               skopt: Not installed
2024-04-15 09:37:19,078:INFO:              mlflow: 2.11.3
2024-04-15 09:37:19,078:INFO:              gradio: Not installed
2024-04-15 09:37:19,078:INFO:             fastapi: Not installed
2024-04-15 09:37:19,078:INFO:             uvicorn: Not installed
2024-04-15 09:37:19,078:INFO:              m2cgen: Not installed
2024-04-15 09:37:19,078:INFO:           evidently: Not installed
2024-04-15 09:37:19,078:INFO:               fugue: Not installed
2024-04-15 09:37:19,078:INFO:           streamlit: 1.33.0
2024-04-15 09:37:19,078:INFO:             prophet: Not installed
2024-04-15 09:37:19,078:INFO:None
2024-04-15 09:37:19,078:INFO:Set up data.
2024-04-15 09:37:41,264:INFO:PyCaret ClassificationExperiment
2024-04-15 09:37:41,264:INFO:Logging name: clf-default-name
2024-04-15 09:37:41,264:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:37:41,264:INFO:version 3.2.0
2024-04-15 09:37:41,264:INFO:Initializing setup()
2024-04-15 09:37:41,264:INFO:self.USI: 5f2b
2024-04-15 09:37:41,264:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:37:41,264:INFO:Checking environment
2024-04-15 09:37:41,265:INFO:python_version: 3.8.0
2024-04-15 09:37:41,265:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:37:41,265:INFO:machine: AMD64
2024-04-15 09:37:41,265:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:37:41,271:INFO:Memory: svmem(total=34301427712, available=19681071104, percent=42.6, used=14620356608, free=19681071104)
2024-04-15 09:37:41,271:INFO:Physical Core: 6
2024-04-15 09:37:41,271:INFO:Logical Core: 12
2024-04-15 09:37:41,271:INFO:Checking libraries
2024-04-15 09:37:41,271:INFO:System:
2024-04-15 09:37:41,271:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:37:41,272:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:37:41,272:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:37:41,272:INFO:PyCaret required dependencies:
2024-04-15 09:37:41,272:INFO:                 pip: 19.2.3
2024-04-15 09:37:41,272:INFO:          setuptools: 41.2.0
2024-04-15 09:37:41,272:INFO:             pycaret: 3.2.0
2024-04-15 09:37:41,272:INFO:             IPython: 8.12.3
2024-04-15 09:37:41,272:INFO:          ipywidgets: 8.1.2
2024-04-15 09:37:41,272:INFO:                tqdm: 4.66.2
2024-04-15 09:37:41,272:INFO:               numpy: 1.24.4
2024-04-15 09:37:41,272:INFO:              pandas: 1.5.3
2024-04-15 09:37:41,272:INFO:              jinja2: 3.1.3
2024-04-15 09:37:41,272:INFO:               scipy: 1.10.1
2024-04-15 09:37:41,272:INFO:              joblib: 1.3.2
2024-04-15 09:37:41,272:INFO:             sklearn: 1.2.0
2024-04-15 09:37:41,272:INFO:                pyod: 1.1.3
2024-04-15 09:37:41,272:INFO:            imblearn: 0.12.2
2024-04-15 09:37:41,272:INFO:   category_encoders: 2.6.3
2024-04-15 09:37:41,272:INFO:            lightgbm: 4.3.0
2024-04-15 09:37:41,272:INFO:               numba: 0.58.1
2024-04-15 09:37:41,272:INFO:            requests: 2.31.0
2024-04-15 09:37:41,272:INFO:          matplotlib: 3.6.0
2024-04-15 09:37:41,272:INFO:          scikitplot: 0.3.7
2024-04-15 09:37:41,272:INFO:         yellowbrick: 1.5
2024-04-15 09:37:41,272:INFO:              plotly: 5.20.0
2024-04-15 09:37:41,272:INFO:    plotly-resampler: Not installed
2024-04-15 09:37:41,272:INFO:             kaleido: 0.2.1
2024-04-15 09:37:41,272:INFO:           schemdraw: 0.15
2024-04-15 09:37:41,272:INFO:         statsmodels: 0.14.1
2024-04-15 09:37:41,272:INFO:              sktime: 0.21.1
2024-04-15 09:37:41,273:INFO:               tbats: 1.1.3
2024-04-15 09:37:41,273:INFO:            pmdarima: 2.0.4
2024-04-15 09:37:41,273:INFO:              psutil: 5.9.8
2024-04-15 09:37:41,273:INFO:          markupsafe: 2.1.5
2024-04-15 09:37:41,273:INFO:             pickle5: Not installed
2024-04-15 09:37:41,273:INFO:         cloudpickle: 3.0.0
2024-04-15 09:37:41,273:INFO:         deprecation: 2.1.0
2024-04-15 09:37:41,273:INFO:              xxhash: 3.4.1
2024-04-15 09:37:41,273:INFO:           wurlitzer: Not installed
2024-04-15 09:37:41,273:INFO:PyCaret optional dependencies:
2024-04-15 09:37:41,273:INFO:                shap: Not installed
2024-04-15 09:37:41,273:INFO:           interpret: Not installed
2024-04-15 09:37:41,273:INFO:                umap: Not installed
2024-04-15 09:37:41,273:INFO:     ydata_profiling: Not installed
2024-04-15 09:37:41,273:INFO:  explainerdashboard: Not installed
2024-04-15 09:37:41,273:INFO:             autoviz: Not installed
2024-04-15 09:37:41,273:INFO:           fairlearn: Not installed
2024-04-15 09:37:41,273:INFO:          deepchecks: Not installed
2024-04-15 09:37:41,273:INFO:             xgboost: Not installed
2024-04-15 09:37:41,273:INFO:            catboost: Not installed
2024-04-15 09:37:41,273:INFO:              kmodes: Not installed
2024-04-15 09:37:41,273:INFO:             mlxtend: Not installed
2024-04-15 09:37:41,273:INFO:       statsforecast: Not installed
2024-04-15 09:37:41,273:INFO:        tune_sklearn: Not installed
2024-04-15 09:37:41,273:INFO:                 ray: Not installed
2024-04-15 09:37:41,273:INFO:            hyperopt: Not installed
2024-04-15 09:37:41,273:INFO:              optuna: Not installed
2024-04-15 09:37:41,273:INFO:               skopt: Not installed
2024-04-15 09:37:41,273:INFO:              mlflow: 2.11.3
2024-04-15 09:37:41,273:INFO:              gradio: Not installed
2024-04-15 09:37:41,273:INFO:             fastapi: Not installed
2024-04-15 09:37:41,273:INFO:             uvicorn: Not installed
2024-04-15 09:37:41,274:INFO:              m2cgen: Not installed
2024-04-15 09:37:41,274:INFO:           evidently: Not installed
2024-04-15 09:37:41,274:INFO:               fugue: Not installed
2024-04-15 09:37:41,274:INFO:           streamlit: 1.33.0
2024-04-15 09:37:41,274:INFO:             prophet: Not installed
2024-04-15 09:37:41,274:INFO:None
2024-04-15 09:37:41,274:INFO:Set up data.
2024-04-15 09:37:41,278:INFO:Set up folding strategy.
2024-04-15 09:37:41,278:INFO:Set up train/test split.
2024-04-15 09:37:41,278:INFO:Set up data.
2024-04-15 09:37:41,281:INFO:Set up index.
2024-04-15 09:37:41,281:INFO:Assigning column types.
2024-04-15 09:37:41,284:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:37:41,322:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:37:41,323:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:37:41,349:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,349:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,386:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:37:41,387:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:37:41,409:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,409:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,409:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:37:41,444:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:37:41,469:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,469:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,507:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:37:41,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,529:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:37:41,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,653:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,654:INFO:Preparing preprocessing pipeline...
2024-04-15 09:37:41,656:INFO:Set up simple imputation.
2024-04-15 09:37:41,656:INFO:Set up feature normalization.
2024-04-15 09:37:41,672:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:37:41,675:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:37:41,675:INFO:Creating final display dataframe.
2024-04-15 09:37:41,737:INFO:Setup _display_container:                     Description             Value
0                    Session id              7056
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              5f2b
2024-04-15 09:37:41,805:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,868:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:37:41,869:INFO:setup() successfully completed in 0.61s...............
2024-04-15 09:37:41,869:INFO:Initializing compare_models()
2024-04-15 09:37:41,869:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:37:41,869:INFO:Checking exceptions
2024-04-15 09:37:41,873:INFO:Preparing display monitor
2024-04-15 09:37:41,889:INFO:Initializing Logistic Regression
2024-04-15 09:37:41,890:INFO:Total runtime is 1.6673405965169272e-05 minutes
2024-04-15 09:37:41,892:INFO:SubProcess create_model() called ==================================
2024-04-15 09:37:41,892:INFO:Initializing create_model()
2024-04-15 09:37:41,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B27F40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:37:41,892:INFO:Checking exceptions
2024-04-15 09:37:41,892:INFO:Importing libraries
2024-04-15 09:37:41,892:INFO:Copying training dataset
2024-04-15 09:37:41,898:INFO:Defining folds
2024-04-15 09:37:41,898:INFO:Declaring metric variables
2024-04-15 09:37:41,902:INFO:Importing untrained model
2024-04-15 09:37:41,905:INFO:Logistic Regression Imported successfully
2024-04-15 09:37:41,911:INFO:Starting cross validation
2024-04-15 09:37:41,912:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:37:45,681:INFO:Calculating mean and std
2024-04-15 09:37:45,685:INFO:Creating metrics dataframe
2024-04-15 09:37:45,691:INFO:Uploading results into container
2024-04-15 09:37:45,692:INFO:Uploading model into container now
2024-04-15 09:37:45,692:INFO:_master_model_container: 1
2024-04-15 09:37:45,692:INFO:_display_container: 2
2024-04-15 09:37:45,693:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7056, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:37:45,693:INFO:create_model() successfully completed......................................
2024-04-15 09:37:46,039:INFO:SubProcess create_model() end ==================================
2024-04-15 09:37:46,039:INFO:Creating metrics dataframe
2024-04-15 09:37:46,046:INFO:Initializing Decision Tree Classifier
2024-04-15 09:37:46,046:INFO:Total runtime is 0.06929431756337484 minutes
2024-04-15 09:37:46,049:INFO:SubProcess create_model() called ==================================
2024-04-15 09:37:46,049:INFO:Initializing create_model()
2024-04-15 09:37:46,049:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B27F40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:37:46,049:INFO:Checking exceptions
2024-04-15 09:37:46,049:INFO:Importing libraries
2024-04-15 09:37:46,049:INFO:Copying training dataset
2024-04-15 09:37:46,053:INFO:Defining folds
2024-04-15 09:37:46,054:INFO:Declaring metric variables
2024-04-15 09:37:46,056:INFO:Importing untrained model
2024-04-15 09:37:46,059:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:37:46,065:INFO:Starting cross validation
2024-04-15 09:37:46,066:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:37:47,888:INFO:Calculating mean and std
2024-04-15 09:37:47,889:INFO:Creating metrics dataframe
2024-04-15 09:37:47,895:INFO:Uploading results into container
2024-04-15 09:37:47,895:INFO:Uploading model into container now
2024-04-15 09:37:47,896:INFO:_master_model_container: 2
2024-04-15 09:37:47,896:INFO:_display_container: 2
2024-04-15 09:37:47,896:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7056, splitter='best')
2024-04-15 09:37:47,896:INFO:create_model() successfully completed......................................
2024-04-15 09:37:48,184:INFO:SubProcess create_model() end ==================================
2024-04-15 09:37:48,184:INFO:Creating metrics dataframe
2024-04-15 09:37:48,198:INFO:Initializing create_model()
2024-04-15 09:37:48,198:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7056, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:37:48,198:INFO:Checking exceptions
2024-04-15 09:37:48,200:INFO:Importing libraries
2024-04-15 09:37:48,200:INFO:Copying training dataset
2024-04-15 09:37:48,204:INFO:Defining folds
2024-04-15 09:37:48,204:INFO:Declaring metric variables
2024-04-15 09:37:48,204:INFO:Importing untrained model
2024-04-15 09:37:48,205:INFO:Declaring custom model
2024-04-15 09:37:48,205:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:37:48,205:INFO:Cross validation set to False
2024-04-15 09:37:48,205:INFO:Fitting Model
2024-04-15 09:37:48,259:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7056, splitter='best')
2024-04-15 09:37:48,259:INFO:create_model() successfully completed......................................
2024-04-15 09:37:48,556:INFO:Initializing create_model()
2024-04-15 09:37:48,556:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7056, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:37:48,557:INFO:Checking exceptions
2024-04-15 09:37:48,558:INFO:Importing libraries
2024-04-15 09:37:48,558:INFO:Copying training dataset
2024-04-15 09:37:48,562:INFO:Defining folds
2024-04-15 09:37:48,562:INFO:Declaring metric variables
2024-04-15 09:37:48,562:INFO:Importing untrained model
2024-04-15 09:37:48,562:INFO:Declaring custom model
2024-04-15 09:37:48,563:INFO:Logistic Regression Imported successfully
2024-04-15 09:37:48,563:INFO:Cross validation set to False
2024-04-15 09:37:48,563:INFO:Fitting Model
2024-04-15 09:37:48,580:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7056, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:37:48,580:INFO:create_model() successfully completed......................................
2024-04-15 09:37:48,870:INFO:_master_model_container: 2
2024-04-15 09:37:48,870:INFO:_display_container: 2
2024-04-15 09:37:48,871:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7056, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7056, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:37:48,871:INFO:compare_models() successfully completed......................................
2024-04-15 09:37:48,871:INFO:Initializing predict_model()
2024-04-15 09:37:48,872:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BBB6220>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7056, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591E77280>)
2024-04-15 09:37:48,872:INFO:Checking exceptions
2024-04-15 09:37:48,872:INFO:Preloading libraries
2024-04-15 09:42:00,706:INFO:PyCaret ClassificationExperiment
2024-04-15 09:42:00,706:INFO:Logging name: clf-default-name
2024-04-15 09:42:00,706:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:42:00,706:INFO:version 3.2.0
2024-04-15 09:42:00,706:INFO:Initializing setup()
2024-04-15 09:42:00,706:INFO:self.USI: d491
2024-04-15 09:42:00,706:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:42:00,706:INFO:Checking environment
2024-04-15 09:42:00,707:INFO:python_version: 3.8.0
2024-04-15 09:42:00,707:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:42:00,707:INFO:machine: AMD64
2024-04-15 09:42:00,707:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:42:00,712:INFO:Memory: svmem(total=34301427712, available=18300850176, percent=46.6, used=16000577536, free=18300850176)
2024-04-15 09:42:00,712:INFO:Physical Core: 6
2024-04-15 09:42:00,712:INFO:Logical Core: 12
2024-04-15 09:42:00,712:INFO:Checking libraries
2024-04-15 09:42:00,712:INFO:System:
2024-04-15 09:42:00,712:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:42:00,712:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:42:00,712:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:42:00,712:INFO:PyCaret required dependencies:
2024-04-15 09:42:00,712:INFO:                 pip: 19.2.3
2024-04-15 09:42:00,712:INFO:          setuptools: 41.2.0
2024-04-15 09:42:00,712:INFO:             pycaret: 3.2.0
2024-04-15 09:42:00,712:INFO:             IPython: 8.12.3
2024-04-15 09:42:00,712:INFO:          ipywidgets: 8.1.2
2024-04-15 09:42:00,713:INFO:                tqdm: 4.66.2
2024-04-15 09:42:00,713:INFO:               numpy: 1.24.4
2024-04-15 09:42:00,713:INFO:              pandas: 1.5.3
2024-04-15 09:42:00,713:INFO:              jinja2: 3.1.3
2024-04-15 09:42:00,713:INFO:               scipy: 1.10.1
2024-04-15 09:42:00,713:INFO:              joblib: 1.3.2
2024-04-15 09:42:00,713:INFO:             sklearn: 1.2.0
2024-04-15 09:42:00,713:INFO:                pyod: 1.1.3
2024-04-15 09:42:00,713:INFO:            imblearn: 0.12.2
2024-04-15 09:42:00,713:INFO:   category_encoders: 2.6.3
2024-04-15 09:42:00,713:INFO:            lightgbm: 4.3.0
2024-04-15 09:42:00,713:INFO:               numba: 0.58.1
2024-04-15 09:42:00,713:INFO:            requests: 2.31.0
2024-04-15 09:42:00,713:INFO:          matplotlib: 3.6.0
2024-04-15 09:42:00,713:INFO:          scikitplot: 0.3.7
2024-04-15 09:42:00,713:INFO:         yellowbrick: 1.5
2024-04-15 09:42:00,713:INFO:              plotly: 5.20.0
2024-04-15 09:42:00,713:INFO:    plotly-resampler: Not installed
2024-04-15 09:42:00,713:INFO:             kaleido: 0.2.1
2024-04-15 09:42:00,713:INFO:           schemdraw: 0.15
2024-04-15 09:42:00,713:INFO:         statsmodels: 0.14.1
2024-04-15 09:42:00,713:INFO:              sktime: 0.21.1
2024-04-15 09:42:00,713:INFO:               tbats: 1.1.3
2024-04-15 09:42:00,713:INFO:            pmdarima: 2.0.4
2024-04-15 09:42:00,713:INFO:              psutil: 5.9.8
2024-04-15 09:42:00,713:INFO:          markupsafe: 2.1.5
2024-04-15 09:42:00,713:INFO:             pickle5: Not installed
2024-04-15 09:42:00,713:INFO:         cloudpickle: 3.0.0
2024-04-15 09:42:00,713:INFO:         deprecation: 2.1.0
2024-04-15 09:42:00,713:INFO:              xxhash: 3.4.1
2024-04-15 09:42:00,713:INFO:           wurlitzer: Not installed
2024-04-15 09:42:00,713:INFO:PyCaret optional dependencies:
2024-04-15 09:42:00,713:INFO:                shap: Not installed
2024-04-15 09:42:00,713:INFO:           interpret: Not installed
2024-04-15 09:42:00,713:INFO:                umap: Not installed
2024-04-15 09:42:00,714:INFO:     ydata_profiling: Not installed
2024-04-15 09:42:00,714:INFO:  explainerdashboard: Not installed
2024-04-15 09:42:00,714:INFO:             autoviz: Not installed
2024-04-15 09:42:00,714:INFO:           fairlearn: Not installed
2024-04-15 09:42:00,714:INFO:          deepchecks: Not installed
2024-04-15 09:42:00,714:INFO:             xgboost: Not installed
2024-04-15 09:42:00,714:INFO:            catboost: Not installed
2024-04-15 09:42:00,714:INFO:              kmodes: Not installed
2024-04-15 09:42:00,714:INFO:             mlxtend: Not installed
2024-04-15 09:42:00,714:INFO:       statsforecast: Not installed
2024-04-15 09:42:00,714:INFO:        tune_sklearn: Not installed
2024-04-15 09:42:00,714:INFO:                 ray: Not installed
2024-04-15 09:42:00,714:INFO:            hyperopt: Not installed
2024-04-15 09:42:00,714:INFO:              optuna: Not installed
2024-04-15 09:42:00,714:INFO:               skopt: Not installed
2024-04-15 09:42:00,714:INFO:              mlflow: 2.11.3
2024-04-15 09:42:00,714:INFO:              gradio: Not installed
2024-04-15 09:42:00,714:INFO:             fastapi: Not installed
2024-04-15 09:42:00,714:INFO:             uvicorn: Not installed
2024-04-15 09:42:00,714:INFO:              m2cgen: Not installed
2024-04-15 09:42:00,714:INFO:           evidently: Not installed
2024-04-15 09:42:00,714:INFO:               fugue: Not installed
2024-04-15 09:42:00,714:INFO:           streamlit: 1.33.0
2024-04-15 09:42:00,714:INFO:             prophet: Not installed
2024-04-15 09:42:00,714:INFO:None
2024-04-15 09:42:00,714:INFO:Set up data.
2024-04-15 09:42:00,719:INFO:Set up folding strategy.
2024-04-15 09:42:00,719:INFO:Set up train/test split.
2024-04-15 09:42:00,719:INFO:Set up data.
2024-04-15 09:42:00,722:INFO:Set up index.
2024-04-15 09:42:00,723:INFO:Assigning column types.
2024-04-15 09:42:00,725:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:42:00,760:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:42:00,761:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:00,782:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,783:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,822:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:42:00,823:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:00,851:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,851:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,851:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:42:00,888:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:00,910:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,947:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:00,970:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,970:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:00,970:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:42:01,033:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,033:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,095:INFO:Preparing preprocessing pipeline...
2024-04-15 09:42:01,096:INFO:Set up simple imputation.
2024-04-15 09:42:01,096:INFO:Set up feature normalization.
2024-04-15 09:42:01,112:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:42:01,116:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:42:01,116:INFO:Creating final display dataframe.
2024-04-15 09:42:01,180:INFO:Setup _display_container:                     Description             Value
0                    Session id              5110
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              d491
2024-04-15 09:42:01,243:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,243:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,305:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,305:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:01,306:INFO:setup() successfully completed in 0.6s...............
2024-04-15 09:42:01,307:INFO:Initializing compare_models()
2024-04-15 09:42:01,307:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:42:01,307:INFO:Checking exceptions
2024-04-15 09:42:01,311:INFO:Preparing display monitor
2024-04-15 09:42:01,329:INFO:Initializing Logistic Regression
2024-04-15 09:42:01,329:INFO:Total runtime is 0.0 minutes
2024-04-15 09:42:01,332:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:01,332:INFO:Initializing create_model()
2024-04-15 09:42:01,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59014B580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:01,332:INFO:Checking exceptions
2024-04-15 09:42:01,332:INFO:Importing libraries
2024-04-15 09:42:01,332:INFO:Copying training dataset
2024-04-15 09:42:01,338:INFO:Defining folds
2024-04-15 09:42:01,338:INFO:Declaring metric variables
2024-04-15 09:42:01,342:INFO:Importing untrained model
2024-04-15 09:42:01,344:INFO:Logistic Regression Imported successfully
2024-04-15 09:42:01,349:INFO:Starting cross validation
2024-04-15 09:42:01,350:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:01,438:INFO:Calculating mean and std
2024-04-15 09:42:01,438:INFO:Creating metrics dataframe
2024-04-15 09:42:01,441:INFO:Uploading results into container
2024-04-15 09:42:01,441:INFO:Uploading model into container now
2024-04-15 09:42:01,441:INFO:_master_model_container: 1
2024-04-15 09:42:01,441:INFO:_display_container: 2
2024-04-15 09:42:01,442:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5110, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:42:01,442:INFO:create_model() successfully completed......................................
2024-04-15 09:42:01,779:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:01,779:INFO:Creating metrics dataframe
2024-04-15 09:42:01,786:INFO:Initializing Decision Tree Classifier
2024-04-15 09:42:01,787:INFO:Total runtime is 0.007633936405181885 minutes
2024-04-15 09:42:01,789:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:01,789:INFO:Initializing create_model()
2024-04-15 09:42:01,790:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59014B580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:01,790:INFO:Checking exceptions
2024-04-15 09:42:01,790:INFO:Importing libraries
2024-04-15 09:42:01,790:INFO:Copying training dataset
2024-04-15 09:42:01,794:INFO:Defining folds
2024-04-15 09:42:01,794:INFO:Declaring metric variables
2024-04-15 09:42:01,797:INFO:Importing untrained model
2024-04-15 09:42:01,800:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:01,806:INFO:Starting cross validation
2024-04-15 09:42:01,806:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:01,948:INFO:Calculating mean and std
2024-04-15 09:42:01,949:INFO:Creating metrics dataframe
2024-04-15 09:42:01,951:INFO:Uploading results into container
2024-04-15 09:42:01,951:INFO:Uploading model into container now
2024-04-15 09:42:01,952:INFO:_master_model_container: 2
2024-04-15 09:42:01,952:INFO:_display_container: 2
2024-04-15 09:42:01,952:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best')
2024-04-15 09:42:01,952:INFO:create_model() successfully completed......................................
2024-04-15 09:42:02,236:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:02,236:INFO:Creating metrics dataframe
2024-04-15 09:42:02,251:INFO:Initializing create_model()
2024-04-15 09:42:02,251:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:02,251:INFO:Checking exceptions
2024-04-15 09:42:02,252:INFO:Importing libraries
2024-04-15 09:42:02,253:INFO:Copying training dataset
2024-04-15 09:42:02,257:INFO:Defining folds
2024-04-15 09:42:02,257:INFO:Declaring metric variables
2024-04-15 09:42:02,257:INFO:Importing untrained model
2024-04-15 09:42:02,257:INFO:Declaring custom model
2024-04-15 09:42:02,258:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:02,258:INFO:Cross validation set to False
2024-04-15 09:42:02,258:INFO:Fitting Model
2024-04-15 09:42:02,313:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best')
2024-04-15 09:42:02,314:INFO:create_model() successfully completed......................................
2024-04-15 09:42:02,602:INFO:Initializing create_model()
2024-04-15 09:42:02,602:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5110, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:02,602:INFO:Checking exceptions
2024-04-15 09:42:02,603:INFO:Importing libraries
2024-04-15 09:42:02,604:INFO:Copying training dataset
2024-04-15 09:42:02,608:INFO:Defining folds
2024-04-15 09:42:02,608:INFO:Declaring metric variables
2024-04-15 09:42:02,609:INFO:Importing untrained model
2024-04-15 09:42:02,609:INFO:Declaring custom model
2024-04-15 09:42:02,609:INFO:Logistic Regression Imported successfully
2024-04-15 09:42:02,610:INFO:Cross validation set to False
2024-04-15 09:42:02,610:INFO:Fitting Model
2024-04-15 09:42:02,626:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5110, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:42:02,626:INFO:create_model() successfully completed......................................
2024-04-15 09:42:02,907:INFO:_master_model_container: 2
2024-04-15 09:42:02,907:INFO:_display_container: 2
2024-04-15 09:42:02,908:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5110, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:42:02,908:INFO:compare_models() successfully completed......................................
2024-04-15 09:42:02,909:INFO:Initializing predict_model()
2024-04-15 09:42:02,909:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591EAA670>)
2024-04-15 09:42:02,909:INFO:Checking exceptions
2024-04-15 09:42:02,909:INFO:Preloading libraries
2024-04-15 09:42:03,426:INFO:Initializing predict_model()
2024-04-15 09:42:03,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5110, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590390940>)
2024-04-15 09:42:03,426:INFO:Checking exceptions
2024-04-15 09:42:03,426:INFO:Preloading libraries
2024-04-15 09:42:03,856:INFO:Initializing tune_model()
2024-04-15 09:42:03,856:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>)
2024-04-15 09:42:03,856:INFO:Checking exceptions
2024-04-15 09:42:03,868:INFO:Copying training dataset
2024-04-15 09:42:03,872:INFO:Checking base model
2024-04-15 09:42:03,872:INFO:Base model : Decision Tree Classifier
2024-04-15 09:42:03,874:INFO:Declaring metric variables
2024-04-15 09:42:03,877:INFO:Defining Hyperparameters
2024-04-15 09:42:04,215:INFO:Tuning with n_jobs=-1
2024-04-15 09:42:04,215:INFO:Initializing RandomizedSearchCV
2024-04-15 09:42:04,442:INFO:best_params: {'actual_estimator__min_samples_split': 2, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.005, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 10, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:42:04,443:INFO:Hyperparameter search completed
2024-04-15 09:42:04,443:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:04,444:INFO:Initializing create_model()
2024-04-15 09:42:04,444:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58E453D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 2, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.005, 'max_features': 1.0, 'max_depth': 10, 'criterion': 'entropy'})
2024-04-15 09:42:04,444:INFO:Checking exceptions
2024-04-15 09:42:04,444:INFO:Importing libraries
2024-04-15 09:42:04,444:INFO:Copying training dataset
2024-04-15 09:42:04,451:INFO:Defining folds
2024-04-15 09:42:04,451:INFO:Declaring metric variables
2024-04-15 09:42:04,455:INFO:Importing untrained model
2024-04-15 09:42:04,456:INFO:Declaring custom model
2024-04-15 09:42:04,460:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:04,466:INFO:Starting cross validation
2024-04-15 09:42:04,467:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:04,564:INFO:Calculating mean and std
2024-04-15 09:42:04,564:INFO:Creating metrics dataframe
2024-04-15 09:42:04,569:INFO:Finalizing model
2024-04-15 09:42:04,589:INFO:Uploading results into container
2024-04-15 09:42:04,590:INFO:Uploading model into container now
2024-04-15 09:42:04,591:INFO:_master_model_container: 3
2024-04-15 09:42:04,591:INFO:_display_container: 5
2024-04-15 09:42:04,591:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=10, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=6,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best')
2024-04-15 09:42:04,591:INFO:create_model() successfully completed......................................
2024-04-15 09:42:04,923:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:04,923:INFO:choose_better activated
2024-04-15 09:42:04,926:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:04,926:INFO:Initializing create_model()
2024-04-15 09:42:04,926:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:04,926:INFO:Checking exceptions
2024-04-15 09:42:04,928:INFO:Importing libraries
2024-04-15 09:42:04,928:INFO:Copying training dataset
2024-04-15 09:42:04,932:INFO:Defining folds
2024-04-15 09:42:04,933:INFO:Declaring metric variables
2024-04-15 09:42:04,933:INFO:Importing untrained model
2024-04-15 09:42:04,933:INFO:Declaring custom model
2024-04-15 09:42:04,933:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:04,934:INFO:Starting cross validation
2024-04-15 09:42:04,935:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:05,066:INFO:Calculating mean and std
2024-04-15 09:42:05,067:INFO:Creating metrics dataframe
2024-04-15 09:42:05,068:INFO:Finalizing model
2024-04-15 09:42:05,120:INFO:Uploading results into container
2024-04-15 09:42:05,120:INFO:Uploading model into container now
2024-04-15 09:42:05,120:INFO:_master_model_container: 4
2024-04-15 09:42:05,121:INFO:_display_container: 6
2024-04-15 09:42:05,121:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best')
2024-04-15 09:42:05,121:INFO:create_model() successfully completed......................................
2024-04-15 09:42:05,404:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:05,405:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best') result for F1 is 0.5441
2024-04-15 09:42:05,405:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=10, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=6,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best') result for F1 is 0.4516
2024-04-15 09:42:05,405:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best') is best model
2024-04-15 09:42:05,405:INFO:choose_better completed
2024-04-15 09:42:05,405:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:42:05,414:INFO:_master_model_container: 4
2024-04-15 09:42:05,414:INFO:_display_container: 5
2024-04-15 09:42:05,414:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best')
2024-04-15 09:42:05,414:INFO:tune_model() successfully completed......................................
2024-04-15 09:42:05,709:INFO:Initializing predict_model()
2024-04-15 09:42:05,709:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC3D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5110, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5905499D0>)
2024-04-15 09:42:05,709:INFO:Checking exceptions
2024-04-15 09:42:05,709:INFO:Preloading libraries
2024-04-15 09:42:43,572:INFO:PyCaret ClassificationExperiment
2024-04-15 09:42:43,572:INFO:Logging name: clf-default-name
2024-04-15 09:42:43,572:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:42:43,572:INFO:version 3.2.0
2024-04-15 09:42:43,572:INFO:Initializing setup()
2024-04-15 09:42:43,572:INFO:self.USI: 4e48
2024-04-15 09:42:43,572:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:42:43,572:INFO:Checking environment
2024-04-15 09:42:43,572:INFO:python_version: 3.8.0
2024-04-15 09:42:43,572:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:42:43,572:INFO:machine: AMD64
2024-04-15 09:42:43,572:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:42:43,579:INFO:Memory: svmem(total=34301427712, available=18284552192, percent=46.7, used=16016875520, free=18284552192)
2024-04-15 09:42:43,580:INFO:Physical Core: 6
2024-04-15 09:42:43,580:INFO:Logical Core: 12
2024-04-15 09:42:43,580:INFO:Checking libraries
2024-04-15 09:42:43,580:INFO:System:
2024-04-15 09:42:43,580:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:42:43,580:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:42:43,580:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:42:43,580:INFO:PyCaret required dependencies:
2024-04-15 09:42:43,580:INFO:                 pip: 19.2.3
2024-04-15 09:42:43,580:INFO:          setuptools: 41.2.0
2024-04-15 09:42:43,580:INFO:             pycaret: 3.2.0
2024-04-15 09:42:43,580:INFO:             IPython: 8.12.3
2024-04-15 09:42:43,580:INFO:          ipywidgets: 8.1.2
2024-04-15 09:42:43,580:INFO:                tqdm: 4.66.2
2024-04-15 09:42:43,580:INFO:               numpy: 1.24.4
2024-04-15 09:42:43,580:INFO:              pandas: 1.5.3
2024-04-15 09:42:43,580:INFO:              jinja2: 3.1.3
2024-04-15 09:42:43,580:INFO:               scipy: 1.10.1
2024-04-15 09:42:43,580:INFO:              joblib: 1.3.2
2024-04-15 09:42:43,580:INFO:             sklearn: 1.2.0
2024-04-15 09:42:43,580:INFO:                pyod: 1.1.3
2024-04-15 09:42:43,580:INFO:            imblearn: 0.12.2
2024-04-15 09:42:43,580:INFO:   category_encoders: 2.6.3
2024-04-15 09:42:43,580:INFO:            lightgbm: 4.3.0
2024-04-15 09:42:43,580:INFO:               numba: 0.58.1
2024-04-15 09:42:43,580:INFO:            requests: 2.31.0
2024-04-15 09:42:43,581:INFO:          matplotlib: 3.6.0
2024-04-15 09:42:43,581:INFO:          scikitplot: 0.3.7
2024-04-15 09:42:43,581:INFO:         yellowbrick: 1.5
2024-04-15 09:42:43,581:INFO:              plotly: 5.20.0
2024-04-15 09:42:43,581:INFO:    plotly-resampler: Not installed
2024-04-15 09:42:43,581:INFO:             kaleido: 0.2.1
2024-04-15 09:42:43,581:INFO:           schemdraw: 0.15
2024-04-15 09:42:43,581:INFO:         statsmodels: 0.14.1
2024-04-15 09:42:43,581:INFO:              sktime: 0.21.1
2024-04-15 09:42:43,581:INFO:               tbats: 1.1.3
2024-04-15 09:42:43,581:INFO:            pmdarima: 2.0.4
2024-04-15 09:42:43,581:INFO:              psutil: 5.9.8
2024-04-15 09:42:43,581:INFO:          markupsafe: 2.1.5
2024-04-15 09:42:43,581:INFO:             pickle5: Not installed
2024-04-15 09:42:43,581:INFO:         cloudpickle: 3.0.0
2024-04-15 09:42:43,581:INFO:         deprecation: 2.1.0
2024-04-15 09:42:43,581:INFO:              xxhash: 3.4.1
2024-04-15 09:42:43,581:INFO:           wurlitzer: Not installed
2024-04-15 09:42:43,581:INFO:PyCaret optional dependencies:
2024-04-15 09:42:43,581:INFO:                shap: Not installed
2024-04-15 09:42:43,581:INFO:           interpret: Not installed
2024-04-15 09:42:43,581:INFO:                umap: Not installed
2024-04-15 09:42:43,581:INFO:     ydata_profiling: Not installed
2024-04-15 09:42:43,581:INFO:  explainerdashboard: Not installed
2024-04-15 09:42:43,581:INFO:             autoviz: Not installed
2024-04-15 09:42:43,581:INFO:           fairlearn: Not installed
2024-04-15 09:42:43,581:INFO:          deepchecks: Not installed
2024-04-15 09:42:43,581:INFO:             xgboost: Not installed
2024-04-15 09:42:43,581:INFO:            catboost: Not installed
2024-04-15 09:42:43,581:INFO:              kmodes: Not installed
2024-04-15 09:42:43,581:INFO:             mlxtend: Not installed
2024-04-15 09:42:43,581:INFO:       statsforecast: Not installed
2024-04-15 09:42:43,581:INFO:        tune_sklearn: Not installed
2024-04-15 09:42:43,581:INFO:                 ray: Not installed
2024-04-15 09:42:43,581:INFO:            hyperopt: Not installed
2024-04-15 09:42:43,581:INFO:              optuna: Not installed
2024-04-15 09:42:43,581:INFO:               skopt: Not installed
2024-04-15 09:42:43,581:INFO:              mlflow: 2.11.3
2024-04-15 09:42:43,582:INFO:              gradio: Not installed
2024-04-15 09:42:43,582:INFO:             fastapi: Not installed
2024-04-15 09:42:43,582:INFO:             uvicorn: Not installed
2024-04-15 09:42:43,582:INFO:              m2cgen: Not installed
2024-04-15 09:42:43,582:INFO:           evidently: Not installed
2024-04-15 09:42:43,582:INFO:               fugue: Not installed
2024-04-15 09:42:43,582:INFO:           streamlit: 1.33.0
2024-04-15 09:42:43,582:INFO:             prophet: Not installed
2024-04-15 09:42:43,582:INFO:None
2024-04-15 09:42:43,582:INFO:Set up data.
2024-04-15 09:42:43,586:INFO:Set up folding strategy.
2024-04-15 09:42:43,586:INFO:Set up train/test split.
2024-04-15 09:42:43,586:INFO:Set up data.
2024-04-15 09:42:43,589:INFO:Set up index.
2024-04-15 09:42:43,590:INFO:Assigning column types.
2024-04-15 09:42:43,592:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:42:43,628:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:42:43,629:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:43,655:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,656:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,695:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:42:43,695:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:43,719:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,720:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,720:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:42:43,759:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:43,784:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,785:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,821:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:42:43,844:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,844:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:42:43,902:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,902:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,962:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,963:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:43,963:INFO:Preparing preprocessing pipeline...
2024-04-15 09:42:43,964:INFO:Set up simple imputation.
2024-04-15 09:42:43,964:INFO:Set up feature normalization.
2024-04-15 09:42:43,981:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:42:43,984:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:42:43,984:INFO:Creating final display dataframe.
2024-04-15 09:42:44,045:INFO:Setup _display_container:                     Description             Value
0                    Session id              8842
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              4e48
2024-04-15 09:42:44,111:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:44,111:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:44,171:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:44,171:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:42:44,172:INFO:setup() successfully completed in 0.6s...............
2024-04-15 09:42:44,173:INFO:Initializing compare_models()
2024-04-15 09:42:44,173:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:42:44,173:INFO:Checking exceptions
2024-04-15 09:42:44,177:INFO:Preparing display monitor
2024-04-15 09:42:44,194:INFO:Initializing Logistic Regression
2024-04-15 09:42:44,195:INFO:Total runtime is 1.666545867919922e-05 minutes
2024-04-15 09:42:44,197:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:44,197:INFO:Initializing create_model()
2024-04-15 09:42:44,197:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C588756FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:44,197:INFO:Checking exceptions
2024-04-15 09:42:44,197:INFO:Importing libraries
2024-04-15 09:42:44,198:INFO:Copying training dataset
2024-04-15 09:42:44,203:INFO:Defining folds
2024-04-15 09:42:44,203:INFO:Declaring metric variables
2024-04-15 09:42:44,207:INFO:Importing untrained model
2024-04-15 09:42:44,210:INFO:Logistic Regression Imported successfully
2024-04-15 09:42:44,215:INFO:Starting cross validation
2024-04-15 09:42:44,216:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:44,310:INFO:Calculating mean and std
2024-04-15 09:42:44,311:INFO:Creating metrics dataframe
2024-04-15 09:42:44,316:INFO:Uploading results into container
2024-04-15 09:42:44,316:INFO:Uploading model into container now
2024-04-15 09:42:44,317:INFO:_master_model_container: 1
2024-04-15 09:42:44,317:INFO:_display_container: 2
2024-04-15 09:42:44,317:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8842, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:42:44,317:INFO:create_model() successfully completed......................................
2024-04-15 09:42:44,665:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:44,665:INFO:Creating metrics dataframe
2024-04-15 09:42:44,673:INFO:Initializing Decision Tree Classifier
2024-04-15 09:42:44,673:INFO:Total runtime is 0.007983481884002686 minutes
2024-04-15 09:42:44,677:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:44,677:INFO:Initializing create_model()
2024-04-15 09:42:44,677:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C588756FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:44,677:INFO:Checking exceptions
2024-04-15 09:42:44,677:INFO:Importing libraries
2024-04-15 09:42:44,677:INFO:Copying training dataset
2024-04-15 09:42:44,682:INFO:Defining folds
2024-04-15 09:42:44,682:INFO:Declaring metric variables
2024-04-15 09:42:44,686:INFO:Importing untrained model
2024-04-15 09:42:44,689:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:44,695:INFO:Starting cross validation
2024-04-15 09:42:44,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:44,847:INFO:Calculating mean and std
2024-04-15 09:42:44,848:INFO:Creating metrics dataframe
2024-04-15 09:42:44,851:INFO:Uploading results into container
2024-04-15 09:42:44,852:INFO:Uploading model into container now
2024-04-15 09:42:44,852:INFO:_master_model_container: 2
2024-04-15 09:42:44,852:INFO:_display_container: 2
2024-04-15 09:42:44,852:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best')
2024-04-15 09:42:44,853:INFO:create_model() successfully completed......................................
2024-04-15 09:42:45,137:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:45,138:INFO:Creating metrics dataframe
2024-04-15 09:42:45,152:INFO:Initializing create_model()
2024-04-15 09:42:45,152:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:45,152:INFO:Checking exceptions
2024-04-15 09:42:45,153:INFO:Importing libraries
2024-04-15 09:42:45,154:INFO:Copying training dataset
2024-04-15 09:42:45,157:INFO:Defining folds
2024-04-15 09:42:45,157:INFO:Declaring metric variables
2024-04-15 09:42:45,157:INFO:Importing untrained model
2024-04-15 09:42:45,157:INFO:Declaring custom model
2024-04-15 09:42:45,158:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:45,158:INFO:Cross validation set to False
2024-04-15 09:42:45,158:INFO:Fitting Model
2024-04-15 09:42:45,212:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best')
2024-04-15 09:42:45,212:INFO:create_model() successfully completed......................................
2024-04-15 09:42:45,500:INFO:Initializing create_model()
2024-04-15 09:42:45,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8842, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:45,501:INFO:Checking exceptions
2024-04-15 09:42:45,502:INFO:Importing libraries
2024-04-15 09:42:45,502:INFO:Copying training dataset
2024-04-15 09:42:45,507:INFO:Defining folds
2024-04-15 09:42:45,507:INFO:Declaring metric variables
2024-04-15 09:42:45,507:INFO:Importing untrained model
2024-04-15 09:42:45,507:INFO:Declaring custom model
2024-04-15 09:42:45,507:INFO:Logistic Regression Imported successfully
2024-04-15 09:42:45,508:INFO:Cross validation set to False
2024-04-15 09:42:45,508:INFO:Fitting Model
2024-04-15 09:42:45,528:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8842, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:42:45,528:INFO:create_model() successfully completed......................................
2024-04-15 09:42:45,853:INFO:_master_model_container: 2
2024-04-15 09:42:45,853:INFO:_display_container: 2
2024-04-15 09:42:45,854:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8842, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:42:45,854:INFO:compare_models() successfully completed......................................
2024-04-15 09:42:45,855:INFO:Initializing predict_model()
2024-04-15 09:42:45,855:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586A5BCA0>)
2024-04-15 09:42:45,855:INFO:Checking exceptions
2024-04-15 09:42:45,855:INFO:Preloading libraries
2024-04-15 09:42:46,381:INFO:Initializing predict_model()
2024-04-15 09:42:46,381:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8842, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586BC7B80>)
2024-04-15 09:42:46,381:INFO:Checking exceptions
2024-04-15 09:42:46,381:INFO:Preloading libraries
2024-04-15 09:42:46,832:INFO:Initializing tune_model()
2024-04-15 09:42:46,832:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>)
2024-04-15 09:42:46,832:INFO:Checking exceptions
2024-04-15 09:42:46,845:INFO:Copying training dataset
2024-04-15 09:42:46,848:INFO:Checking base model
2024-04-15 09:42:46,848:INFO:Base model : Decision Tree Classifier
2024-04-15 09:42:46,852:INFO:Declaring metric variables
2024-04-15 09:42:46,855:INFO:Defining Hyperparameters
2024-04-15 09:42:47,140:INFO:Tuning with n_jobs=-1
2024-04-15 09:42:47,140:INFO:Initializing RandomizedSearchCV
2024-04-15 09:42:47,359:INFO:best_params: {'actual_estimator__min_samples_split': 10, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.001, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 10, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:42:47,359:INFO:Hyperparameter search completed
2024-04-15 09:42:47,359:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:47,360:INFO:Initializing create_model()
2024-04-15 09:42:47,360:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58FF1E220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 10, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.001, 'max_features': 'sqrt', 'max_depth': 10, 'criterion': 'entropy'})
2024-04-15 09:42:47,360:INFO:Checking exceptions
2024-04-15 09:42:47,360:INFO:Importing libraries
2024-04-15 09:42:47,360:INFO:Copying training dataset
2024-04-15 09:42:47,365:INFO:Defining folds
2024-04-15 09:42:47,365:INFO:Declaring metric variables
2024-04-15 09:42:47,368:INFO:Importing untrained model
2024-04-15 09:42:47,368:INFO:Declaring custom model
2024-04-15 09:42:47,371:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:47,377:INFO:Starting cross validation
2024-04-15 09:42:47,378:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:47,469:INFO:Calculating mean and std
2024-04-15 09:42:47,470:INFO:Creating metrics dataframe
2024-04-15 09:42:47,474:INFO:Finalizing model
2024-04-15 09:42:47,492:INFO:Uploading results into container
2024-04-15 09:42:47,493:INFO:Uploading model into container now
2024-04-15 09:42:47,493:INFO:_master_model_container: 3
2024-04-15 09:42:47,493:INFO:_display_container: 5
2024-04-15 09:42:47,494:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=10, max_features='sqrt', max_leaf_nodes=None,
                       min_impurity_decrease=0.001, min_samples_leaf=4,
                       min_samples_split=10, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best')
2024-04-15 09:42:47,494:INFO:create_model() successfully completed......................................
2024-04-15 09:42:47,818:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:47,818:INFO:choose_better activated
2024-04-15 09:42:47,822:INFO:SubProcess create_model() called ==================================
2024-04-15 09:42:47,822:INFO:Initializing create_model()
2024-04-15 09:42:47,822:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:47,822:INFO:Checking exceptions
2024-04-15 09:42:47,824:INFO:Importing libraries
2024-04-15 09:42:47,824:INFO:Copying training dataset
2024-04-15 09:42:47,829:INFO:Defining folds
2024-04-15 09:42:47,829:INFO:Declaring metric variables
2024-04-15 09:42:47,829:INFO:Importing untrained model
2024-04-15 09:42:47,829:INFO:Declaring custom model
2024-04-15 09:42:47,830:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:47,830:INFO:Starting cross validation
2024-04-15 09:42:47,831:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:42:47,963:INFO:Calculating mean and std
2024-04-15 09:42:47,963:INFO:Creating metrics dataframe
2024-04-15 09:42:47,966:INFO:Finalizing model
2024-04-15 09:42:48,020:INFO:Uploading results into container
2024-04-15 09:42:48,020:INFO:Uploading model into container now
2024-04-15 09:42:48,020:INFO:_master_model_container: 4
2024-04-15 09:42:48,020:INFO:_display_container: 6
2024-04-15 09:42:48,021:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best')
2024-04-15 09:42:48,021:INFO:create_model() successfully completed......................................
2024-04-15 09:42:48,295:INFO:SubProcess create_model() end ==================================
2024-04-15 09:42:48,295:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best') result for F1 is 0.5439
2024-04-15 09:42:48,296:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=10, max_features='sqrt', max_leaf_nodes=None,
                       min_impurity_decrease=0.001, min_samples_leaf=4,
                       min_samples_split=10, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best') result for F1 is 0.4455
2024-04-15 09:42:48,296:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best') is best model
2024-04-15 09:42:48,296:INFO:choose_better completed
2024-04-15 09:42:48,297:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:42:48,304:INFO:_master_model_container: 4
2024-04-15 09:42:48,304:INFO:_display_container: 5
2024-04-15 09:42:48,304:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best')
2024-04-15 09:42:48,304:INFO:tune_model() successfully completed......................................
2024-04-15 09:42:48,598:INFO:Initializing predict_model()
2024-04-15 09:42:48,598:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5885091F0>)
2024-04-15 09:42:48,598:INFO:Checking exceptions
2024-04-15 09:42:48,598:INFO:Preloading libraries
2024-04-15 09:42:48,967:INFO:Initializing finalize_model()
2024-04-15 09:42:48,967:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:42:48,967:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best')
2024-04-15 09:42:48,969:INFO:Initializing create_model()
2024-04-15 09:42:48,969:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C24E7C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8842, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:42:48,970:INFO:Checking exceptions
2024-04-15 09:42:48,971:INFO:Importing libraries
2024-04-15 09:42:48,971:INFO:Copying training dataset
2024-04-15 09:42:48,971:INFO:Defining folds
2024-04-15 09:42:48,971:INFO:Declaring metric variables
2024-04-15 09:42:48,971:INFO:Importing untrained model
2024-04-15 09:42:48,971:INFO:Declaring custom model
2024-04-15 09:42:48,972:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:42:48,972:INFO:Cross validation set to False
2024-04-15 09:42:48,972:INFO:Fitting Model
2024-04-15 09:42:49,038:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8842, splitter='best'))],
         verbose=False)
2024-04-15 09:42:49,038:INFO:create_model() successfully completed......................................
2024-04-15 09:42:49,327:INFO:_master_model_container: 4
2024-04-15 09:42:49,327:INFO:_display_container: 6
2024-04-15 09:42:49,331:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8842, splitter='best'))],
         verbose=False)
2024-04-15 09:42:49,331:INFO:finalize_model() successfully completed......................................
2024-04-15 09:42:49,621:INFO:Initializing save_model()
2024-04-15 09:42:49,621:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8842, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:42:49,621:INFO:Adding model into prep_pipe
2024-04-15 09:42:49,621:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:42:49,625:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:42:49,629:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8842, splitter='best'))],
         verbose=False)
2024-04-15 09:42:49,629:INFO:save_model() successfully completed......................................
2024-04-15 09:42:49,910:INFO:Initializing load_model()
2024-04-15 09:42:49,911:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:42:49,983:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:42:52,891:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3435238646.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:43:23,301:INFO:PyCaret ClassificationExperiment
2024-04-15 09:43:23,301:INFO:Logging name: clf-default-name
2024-04-15 09:43:23,301:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:43:23,301:INFO:version 3.2.0
2024-04-15 09:43:23,301:INFO:Initializing setup()
2024-04-15 09:43:23,301:INFO:self.USI: 8d8b
2024-04-15 09:43:23,301:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:43:23,301:INFO:Checking environment
2024-04-15 09:43:23,301:INFO:python_version: 3.8.0
2024-04-15 09:43:23,301:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:43:23,301:INFO:machine: AMD64
2024-04-15 09:43:23,301:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:43:23,308:INFO:Memory: svmem(total=34301427712, available=18239533056, percent=46.8, used=16061894656, free=18239533056)
2024-04-15 09:43:23,308:INFO:Physical Core: 6
2024-04-15 09:43:23,308:INFO:Logical Core: 12
2024-04-15 09:43:23,308:INFO:Checking libraries
2024-04-15 09:43:23,308:INFO:System:
2024-04-15 09:43:23,308:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:43:23,308:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:43:23,308:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:43:23,308:INFO:PyCaret required dependencies:
2024-04-15 09:43:23,308:INFO:                 pip: 19.2.3
2024-04-15 09:43:23,308:INFO:          setuptools: 41.2.0
2024-04-15 09:43:23,308:INFO:             pycaret: 3.2.0
2024-04-15 09:43:23,308:INFO:             IPython: 8.12.3
2024-04-15 09:43:23,308:INFO:          ipywidgets: 8.1.2
2024-04-15 09:43:23,308:INFO:                tqdm: 4.66.2
2024-04-15 09:43:23,308:INFO:               numpy: 1.24.4
2024-04-15 09:43:23,308:INFO:              pandas: 1.5.3
2024-04-15 09:43:23,308:INFO:              jinja2: 3.1.3
2024-04-15 09:43:23,308:INFO:               scipy: 1.10.1
2024-04-15 09:43:23,308:INFO:              joblib: 1.3.2
2024-04-15 09:43:23,309:INFO:             sklearn: 1.2.0
2024-04-15 09:43:23,309:INFO:                pyod: 1.1.3
2024-04-15 09:43:23,309:INFO:            imblearn: 0.12.2
2024-04-15 09:43:23,309:INFO:   category_encoders: 2.6.3
2024-04-15 09:43:23,309:INFO:            lightgbm: 4.3.0
2024-04-15 09:43:23,309:INFO:               numba: 0.58.1
2024-04-15 09:43:23,309:INFO:            requests: 2.31.0
2024-04-15 09:43:23,309:INFO:          matplotlib: 3.6.0
2024-04-15 09:43:23,309:INFO:          scikitplot: 0.3.7
2024-04-15 09:43:23,309:INFO:         yellowbrick: 1.5
2024-04-15 09:43:23,309:INFO:              plotly: 5.20.0
2024-04-15 09:43:23,309:INFO:    plotly-resampler: Not installed
2024-04-15 09:43:23,309:INFO:             kaleido: 0.2.1
2024-04-15 09:43:23,309:INFO:           schemdraw: 0.15
2024-04-15 09:43:23,309:INFO:         statsmodels: 0.14.1
2024-04-15 09:43:23,309:INFO:              sktime: 0.21.1
2024-04-15 09:43:23,309:INFO:               tbats: 1.1.3
2024-04-15 09:43:23,309:INFO:            pmdarima: 2.0.4
2024-04-15 09:43:23,309:INFO:              psutil: 5.9.8
2024-04-15 09:43:23,309:INFO:          markupsafe: 2.1.5
2024-04-15 09:43:23,309:INFO:             pickle5: Not installed
2024-04-15 09:43:23,309:INFO:         cloudpickle: 3.0.0
2024-04-15 09:43:23,309:INFO:         deprecation: 2.1.0
2024-04-15 09:43:23,309:INFO:              xxhash: 3.4.1
2024-04-15 09:43:23,309:INFO:           wurlitzer: Not installed
2024-04-15 09:43:23,309:INFO:PyCaret optional dependencies:
2024-04-15 09:43:23,309:INFO:                shap: Not installed
2024-04-15 09:43:23,309:INFO:           interpret: Not installed
2024-04-15 09:43:23,309:INFO:                umap: Not installed
2024-04-15 09:43:23,309:INFO:     ydata_profiling: Not installed
2024-04-15 09:43:23,309:INFO:  explainerdashboard: Not installed
2024-04-15 09:43:23,309:INFO:             autoviz: Not installed
2024-04-15 09:43:23,309:INFO:           fairlearn: Not installed
2024-04-15 09:43:23,309:INFO:          deepchecks: Not installed
2024-04-15 09:43:23,309:INFO:             xgboost: Not installed
2024-04-15 09:43:23,309:INFO:            catboost: Not installed
2024-04-15 09:43:23,310:INFO:              kmodes: Not installed
2024-04-15 09:43:23,310:INFO:             mlxtend: Not installed
2024-04-15 09:43:23,310:INFO:       statsforecast: Not installed
2024-04-15 09:43:23,310:INFO:        tune_sklearn: Not installed
2024-04-15 09:43:23,310:INFO:                 ray: Not installed
2024-04-15 09:43:23,310:INFO:            hyperopt: Not installed
2024-04-15 09:43:23,310:INFO:              optuna: Not installed
2024-04-15 09:43:23,310:INFO:               skopt: Not installed
2024-04-15 09:43:23,310:INFO:              mlflow: 2.11.3
2024-04-15 09:43:23,310:INFO:              gradio: Not installed
2024-04-15 09:43:23,310:INFO:             fastapi: Not installed
2024-04-15 09:43:23,310:INFO:             uvicorn: Not installed
2024-04-15 09:43:23,310:INFO:              m2cgen: Not installed
2024-04-15 09:43:23,310:INFO:           evidently: Not installed
2024-04-15 09:43:23,310:INFO:               fugue: Not installed
2024-04-15 09:43:23,310:INFO:           streamlit: 1.33.0
2024-04-15 09:43:23,310:INFO:             prophet: Not installed
2024-04-15 09:43:23,310:INFO:None
2024-04-15 09:43:23,310:INFO:Set up data.
2024-04-15 09:43:23,315:INFO:Set up folding strategy.
2024-04-15 09:43:23,315:INFO:Set up train/test split.
2024-04-15 09:43:23,315:INFO:Set up data.
2024-04-15 09:43:23,319:INFO:Set up index.
2024-04-15 09:43:23,320:INFO:Assigning column types.
2024-04-15 09:43:23,322:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:43:23,367:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:43:23,368:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:23,393:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,393:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,435:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:43:23,436:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:23,465:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,465:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,465:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:43:23,507:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:23,532:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,533:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,568:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:23,590:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,590:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,591:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:43:23,651:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,652:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,716:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,717:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,718:INFO:Preparing preprocessing pipeline...
2024-04-15 09:43:23,719:INFO:Set up simple imputation.
2024-04-15 09:43:23,719:INFO:Set up feature normalization.
2024-04-15 09:43:23,734:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:43:23,738:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:43:23,738:INFO:Creating final display dataframe.
2024-04-15 09:43:23,802:INFO:Setup _display_container:                     Description             Value
0                    Session id              6152
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              8d8b
2024-04-15 09:43:23,869:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,937:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,938:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:23,938:INFO:setup() successfully completed in 0.64s...............
2024-04-15 09:43:23,939:INFO:Initializing compare_models()
2024-04-15 09:43:23,939:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:43:23,939:INFO:Checking exceptions
2024-04-15 09:43:23,942:INFO:Preparing display monitor
2024-04-15 09:43:23,958:INFO:Initializing Logistic Regression
2024-04-15 09:43:23,958:INFO:Total runtime is 0.0 minutes
2024-04-15 09:43:23,961:INFO:SubProcess create_model() called ==================================
2024-04-15 09:43:23,961:INFO:Initializing create_model()
2024-04-15 09:43:23,961:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586AB10D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:23,961:INFO:Checking exceptions
2024-04-15 09:43:23,962:INFO:Importing libraries
2024-04-15 09:43:23,962:INFO:Copying training dataset
2024-04-15 09:43:23,966:INFO:Defining folds
2024-04-15 09:43:23,966:INFO:Declaring metric variables
2024-04-15 09:43:23,970:INFO:Importing untrained model
2024-04-15 09:43:23,972:INFO:Logistic Regression Imported successfully
2024-04-15 09:43:23,979:INFO:Starting cross validation
2024-04-15 09:43:23,980:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:43:24,108:INFO:Calculating mean and std
2024-04-15 09:43:24,109:INFO:Creating metrics dataframe
2024-04-15 09:43:24,114:INFO:Uploading results into container
2024-04-15 09:43:24,115:INFO:Uploading model into container now
2024-04-15 09:43:24,115:INFO:_master_model_container: 1
2024-04-15 09:43:24,116:INFO:_display_container: 2
2024-04-15 09:43:24,116:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6152, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:43:24,116:INFO:create_model() successfully completed......................................
2024-04-15 09:43:24,440:INFO:SubProcess create_model() end ==================================
2024-04-15 09:43:24,440:INFO:Creating metrics dataframe
2024-04-15 09:43:24,449:INFO:Initializing Decision Tree Classifier
2024-04-15 09:43:24,449:INFO:Total runtime is 0.008185172080993652 minutes
2024-04-15 09:43:24,451:INFO:SubProcess create_model() called ==================================
2024-04-15 09:43:24,452:INFO:Initializing create_model()
2024-04-15 09:43:24,452:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586AB10D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:24,452:INFO:Checking exceptions
2024-04-15 09:43:24,452:INFO:Importing libraries
2024-04-15 09:43:24,452:INFO:Copying training dataset
2024-04-15 09:43:24,457:INFO:Defining folds
2024-04-15 09:43:24,457:INFO:Declaring metric variables
2024-04-15 09:43:24,460:INFO:Importing untrained model
2024-04-15 09:43:24,464:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:43:24,468:INFO:Starting cross validation
2024-04-15 09:43:24,469:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:43:24,602:INFO:Calculating mean and std
2024-04-15 09:43:24,602:INFO:Creating metrics dataframe
2024-04-15 09:43:24,605:INFO:Uploading results into container
2024-04-15 09:43:24,605:INFO:Uploading model into container now
2024-04-15 09:43:24,605:INFO:_master_model_container: 2
2024-04-15 09:43:24,606:INFO:_display_container: 2
2024-04-15 09:43:24,606:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best')
2024-04-15 09:43:24,606:INFO:create_model() successfully completed......................................
2024-04-15 09:43:24,879:INFO:SubProcess create_model() end ==================================
2024-04-15 09:43:24,879:INFO:Creating metrics dataframe
2024-04-15 09:43:24,892:INFO:Initializing create_model()
2024-04-15 09:43:24,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:24,892:INFO:Checking exceptions
2024-04-15 09:43:24,894:INFO:Importing libraries
2024-04-15 09:43:24,894:INFO:Copying training dataset
2024-04-15 09:43:24,898:INFO:Defining folds
2024-04-15 09:43:24,898:INFO:Declaring metric variables
2024-04-15 09:43:24,898:INFO:Importing untrained model
2024-04-15 09:43:24,898:INFO:Declaring custom model
2024-04-15 09:43:24,898:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:43:24,899:INFO:Cross validation set to False
2024-04-15 09:43:24,899:INFO:Fitting Model
2024-04-15 09:43:24,951:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best')
2024-04-15 09:43:24,952:INFO:create_model() successfully completed......................................
2024-04-15 09:43:25,236:INFO:Initializing create_model()
2024-04-15 09:43:25,237:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6152, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:25,237:INFO:Checking exceptions
2024-04-15 09:43:25,238:INFO:Importing libraries
2024-04-15 09:43:25,238:INFO:Copying training dataset
2024-04-15 09:43:25,242:INFO:Defining folds
2024-04-15 09:43:25,242:INFO:Declaring metric variables
2024-04-15 09:43:25,242:INFO:Importing untrained model
2024-04-15 09:43:25,242:INFO:Declaring custom model
2024-04-15 09:43:25,243:INFO:Logistic Regression Imported successfully
2024-04-15 09:43:25,243:INFO:Cross validation set to False
2024-04-15 09:43:25,243:INFO:Fitting Model
2024-04-15 09:43:25,260:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6152, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:43:25,260:INFO:create_model() successfully completed......................................
2024-04-15 09:43:25,563:INFO:_master_model_container: 2
2024-04-15 09:43:25,563:INFO:_display_container: 2
2024-04-15 09:43:25,564:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6152, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:43:25,564:INFO:compare_models() successfully completed......................................
2024-04-15 09:43:25,565:INFO:Initializing predict_model()
2024-04-15 09:43:25,565:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E3D43A0>)
2024-04-15 09:43:25,565:INFO:Checking exceptions
2024-04-15 09:43:25,565:INFO:Preloading libraries
2024-04-15 09:43:26,086:INFO:Initializing predict_model()
2024-04-15 09:43:26,086:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6152, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590549430>)
2024-04-15 09:43:26,086:INFO:Checking exceptions
2024-04-15 09:43:26,086:INFO:Preloading libraries
2024-04-15 09:43:26,541:INFO:Initializing tune_model()
2024-04-15 09:43:26,541:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>)
2024-04-15 09:43:26,541:INFO:Checking exceptions
2024-04-15 09:43:26,554:INFO:Copying training dataset
2024-04-15 09:43:26,558:INFO:Checking base model
2024-04-15 09:43:26,558:INFO:Base model : Decision Tree Classifier
2024-04-15 09:43:26,561:INFO:Declaring metric variables
2024-04-15 09:43:26,564:INFO:Defining Hyperparameters
2024-04-15 09:43:26,859:INFO:Tuning with n_jobs=-1
2024-04-15 09:43:26,859:INFO:Initializing RandomizedSearchCV
2024-04-15 09:43:27,072:INFO:best_params: {'actual_estimator__min_samples_split': 10, 'actual_estimator__min_samples_leaf': 3, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 11, 'actual_estimator__criterion': 'gini'}
2024-04-15 09:43:27,072:INFO:Hyperparameter search completed
2024-04-15 09:43:27,072:INFO:SubProcess create_model() called ==================================
2024-04-15 09:43:27,073:INFO:Initializing create_model()
2024-04-15 09:43:27,073:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58FFED460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 10, 'min_samples_leaf': 3, 'min_impurity_decrease': 0.0002, 'max_features': 1.0, 'max_depth': 11, 'criterion': 'gini'})
2024-04-15 09:43:27,073:INFO:Checking exceptions
2024-04-15 09:43:27,073:INFO:Importing libraries
2024-04-15 09:43:27,073:INFO:Copying training dataset
2024-04-15 09:43:27,077:INFO:Defining folds
2024-04-15 09:43:27,078:INFO:Declaring metric variables
2024-04-15 09:43:27,081:INFO:Importing untrained model
2024-04-15 09:43:27,081:INFO:Declaring custom model
2024-04-15 09:43:27,084:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:43:27,089:INFO:Starting cross validation
2024-04-15 09:43:27,090:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:43:27,196:INFO:Calculating mean and std
2024-04-15 09:43:27,202:INFO:Creating metrics dataframe
2024-04-15 09:43:27,210:INFO:Finalizing model
2024-04-15 09:43:27,248:INFO:Uploading results into container
2024-04-15 09:43:27,249:INFO:Uploading model into container now
2024-04-15 09:43:27,250:INFO:_master_model_container: 3
2024-04-15 09:43:27,250:INFO:_display_container: 5
2024-04-15 09:43:27,250:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=11, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=3,
                       min_samples_split=10, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best')
2024-04-15 09:43:27,250:INFO:create_model() successfully completed......................................
2024-04-15 09:43:27,580:INFO:SubProcess create_model() end ==================================
2024-04-15 09:43:27,580:INFO:choose_better activated
2024-04-15 09:43:27,583:INFO:SubProcess create_model() called ==================================
2024-04-15 09:43:27,584:INFO:Initializing create_model()
2024-04-15 09:43:27,584:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:27,584:INFO:Checking exceptions
2024-04-15 09:43:27,586:INFO:Importing libraries
2024-04-15 09:43:27,586:INFO:Copying training dataset
2024-04-15 09:43:27,591:INFO:Defining folds
2024-04-15 09:43:27,591:INFO:Declaring metric variables
2024-04-15 09:43:27,591:INFO:Importing untrained model
2024-04-15 09:43:27,591:INFO:Declaring custom model
2024-04-15 09:43:27,591:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:43:27,592:INFO:Starting cross validation
2024-04-15 09:43:27,592:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:43:27,732:INFO:Calculating mean and std
2024-04-15 09:43:27,732:INFO:Creating metrics dataframe
2024-04-15 09:43:27,734:INFO:Finalizing model
2024-04-15 09:43:27,785:INFO:Uploading results into container
2024-04-15 09:43:27,786:INFO:Uploading model into container now
2024-04-15 09:43:27,786:INFO:_master_model_container: 4
2024-04-15 09:43:27,786:INFO:_display_container: 6
2024-04-15 09:43:27,786:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best')
2024-04-15 09:43:27,786:INFO:create_model() successfully completed......................................
2024-04-15 09:43:28,074:INFO:SubProcess create_model() end ==================================
2024-04-15 09:43:28,074:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best') result for F1 is 0.5426
2024-04-15 09:43:28,075:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=11, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=3,
                       min_samples_split=10, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best') result for F1 is 0.4527
2024-04-15 09:43:28,075:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best') is best model
2024-04-15 09:43:28,075:INFO:choose_better completed
2024-04-15 09:43:28,075:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:43:28,084:INFO:_master_model_container: 4
2024-04-15 09:43:28,084:INFO:_display_container: 5
2024-04-15 09:43:28,084:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best')
2024-04-15 09:43:28,084:INFO:tune_model() successfully completed......................................
2024-04-15 09:43:28,383:INFO:Initializing predict_model()
2024-04-15 09:43:28,383:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C59015BAF0>)
2024-04-15 09:43:28,383:INFO:Checking exceptions
2024-04-15 09:43:28,383:INFO:Preloading libraries
2024-04-15 09:43:28,763:INFO:Initializing finalize_model()
2024-04-15 09:43:28,763:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:43:28,763:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best')
2024-04-15 09:43:28,766:INFO:Initializing create_model()
2024-04-15 09:43:28,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C587DBC730>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6152, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:28,766:INFO:Checking exceptions
2024-04-15 09:43:28,767:INFO:Importing libraries
2024-04-15 09:43:28,767:INFO:Copying training dataset
2024-04-15 09:43:28,768:INFO:Defining folds
2024-04-15 09:43:28,768:INFO:Declaring metric variables
2024-04-15 09:43:28,768:INFO:Importing untrained model
2024-04-15 09:43:28,768:INFO:Declaring custom model
2024-04-15 09:43:28,768:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:43:28,769:INFO:Cross validation set to False
2024-04-15 09:43:28,769:INFO:Fitting Model
2024-04-15 09:43:28,836:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6152, splitter='best'))],
         verbose=False)
2024-04-15 09:43:28,836:INFO:create_model() successfully completed......................................
2024-04-15 09:43:29,121:INFO:_master_model_container: 4
2024-04-15 09:43:29,121:INFO:_display_container: 6
2024-04-15 09:43:29,126:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6152, splitter='best'))],
         verbose=False)
2024-04-15 09:43:29,126:INFO:finalize_model() successfully completed......................................
2024-04-15 09:43:29,432:INFO:Initializing save_model()
2024-04-15 09:43:29,433:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6152, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:43:29,433:INFO:Adding model into prep_pipe
2024-04-15 09:43:29,433:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:43:29,436:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:43:29,441:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6152, splitter='best'))],
         verbose=False)
2024-04-15 09:43:29,441:INFO:save_model() successfully completed......................................
2024-04-15 09:43:29,741:INFO:Initializing load_model()
2024-04-15 09:43:29,741:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:43:29,830:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:43:32,715:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3844166238.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:43:58,995:INFO:PyCaret ClassificationExperiment
2024-04-15 09:43:58,996:INFO:Logging name: clf-default-name
2024-04-15 09:43:58,996:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:43:58,996:INFO:version 3.2.0
2024-04-15 09:43:58,996:INFO:Initializing setup()
2024-04-15 09:43:58,996:INFO:self.USI: 28e4
2024-04-15 09:43:58,996:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:43:58,996:INFO:Checking environment
2024-04-15 09:43:58,996:INFO:python_version: 3.8.0
2024-04-15 09:43:58,996:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:43:58,996:INFO:machine: AMD64
2024-04-15 09:43:58,996:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:43:59,003:INFO:Memory: svmem(total=34301427712, available=18255089664, percent=46.8, used=16046338048, free=18255089664)
2024-04-15 09:43:59,003:INFO:Physical Core: 6
2024-04-15 09:43:59,003:INFO:Logical Core: 12
2024-04-15 09:43:59,003:INFO:Checking libraries
2024-04-15 09:43:59,003:INFO:System:
2024-04-15 09:43:59,003:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:43:59,003:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:43:59,003:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:43:59,004:INFO:PyCaret required dependencies:
2024-04-15 09:43:59,004:INFO:                 pip: 19.2.3
2024-04-15 09:43:59,004:INFO:          setuptools: 41.2.0
2024-04-15 09:43:59,004:INFO:             pycaret: 3.2.0
2024-04-15 09:43:59,004:INFO:             IPython: 8.12.3
2024-04-15 09:43:59,004:INFO:          ipywidgets: 8.1.2
2024-04-15 09:43:59,004:INFO:                tqdm: 4.66.2
2024-04-15 09:43:59,004:INFO:               numpy: 1.24.4
2024-04-15 09:43:59,004:INFO:              pandas: 1.5.3
2024-04-15 09:43:59,004:INFO:              jinja2: 3.1.3
2024-04-15 09:43:59,004:INFO:               scipy: 1.10.1
2024-04-15 09:43:59,004:INFO:              joblib: 1.3.2
2024-04-15 09:43:59,004:INFO:             sklearn: 1.2.0
2024-04-15 09:43:59,004:INFO:                pyod: 1.1.3
2024-04-15 09:43:59,004:INFO:            imblearn: 0.12.2
2024-04-15 09:43:59,004:INFO:   category_encoders: 2.6.3
2024-04-15 09:43:59,004:INFO:            lightgbm: 4.3.0
2024-04-15 09:43:59,004:INFO:               numba: 0.58.1
2024-04-15 09:43:59,004:INFO:            requests: 2.31.0
2024-04-15 09:43:59,004:INFO:          matplotlib: 3.6.0
2024-04-15 09:43:59,004:INFO:          scikitplot: 0.3.7
2024-04-15 09:43:59,004:INFO:         yellowbrick: 1.5
2024-04-15 09:43:59,004:INFO:              plotly: 5.20.0
2024-04-15 09:43:59,005:INFO:    plotly-resampler: Not installed
2024-04-15 09:43:59,005:INFO:             kaleido: 0.2.1
2024-04-15 09:43:59,005:INFO:           schemdraw: 0.15
2024-04-15 09:43:59,005:INFO:         statsmodels: 0.14.1
2024-04-15 09:43:59,005:INFO:              sktime: 0.21.1
2024-04-15 09:43:59,005:INFO:               tbats: 1.1.3
2024-04-15 09:43:59,005:INFO:            pmdarima: 2.0.4
2024-04-15 09:43:59,005:INFO:              psutil: 5.9.8
2024-04-15 09:43:59,005:INFO:          markupsafe: 2.1.5
2024-04-15 09:43:59,005:INFO:             pickle5: Not installed
2024-04-15 09:43:59,005:INFO:         cloudpickle: 3.0.0
2024-04-15 09:43:59,005:INFO:         deprecation: 2.1.0
2024-04-15 09:43:59,005:INFO:              xxhash: 3.4.1
2024-04-15 09:43:59,005:INFO:           wurlitzer: Not installed
2024-04-15 09:43:59,005:INFO:PyCaret optional dependencies:
2024-04-15 09:43:59,005:INFO:                shap: Not installed
2024-04-15 09:43:59,005:INFO:           interpret: Not installed
2024-04-15 09:43:59,005:INFO:                umap: Not installed
2024-04-15 09:43:59,005:INFO:     ydata_profiling: Not installed
2024-04-15 09:43:59,005:INFO:  explainerdashboard: Not installed
2024-04-15 09:43:59,005:INFO:             autoviz: Not installed
2024-04-15 09:43:59,005:INFO:           fairlearn: Not installed
2024-04-15 09:43:59,005:INFO:          deepchecks: Not installed
2024-04-15 09:43:59,005:INFO:             xgboost: Not installed
2024-04-15 09:43:59,005:INFO:            catboost: Not installed
2024-04-15 09:43:59,005:INFO:              kmodes: Not installed
2024-04-15 09:43:59,005:INFO:             mlxtend: Not installed
2024-04-15 09:43:59,005:INFO:       statsforecast: Not installed
2024-04-15 09:43:59,005:INFO:        tune_sklearn: Not installed
2024-04-15 09:43:59,005:INFO:                 ray: Not installed
2024-04-15 09:43:59,005:INFO:            hyperopt: Not installed
2024-04-15 09:43:59,005:INFO:              optuna: Not installed
2024-04-15 09:43:59,006:INFO:               skopt: Not installed
2024-04-15 09:43:59,006:INFO:              mlflow: 2.11.3
2024-04-15 09:43:59,006:INFO:              gradio: Not installed
2024-04-15 09:43:59,006:INFO:             fastapi: Not installed
2024-04-15 09:43:59,006:INFO:             uvicorn: Not installed
2024-04-15 09:43:59,006:INFO:              m2cgen: Not installed
2024-04-15 09:43:59,006:INFO:           evidently: Not installed
2024-04-15 09:43:59,006:INFO:               fugue: Not installed
2024-04-15 09:43:59,006:INFO:           streamlit: 1.33.0
2024-04-15 09:43:59,006:INFO:             prophet: Not installed
2024-04-15 09:43:59,006:INFO:None
2024-04-15 09:43:59,006:INFO:Set up data.
2024-04-15 09:43:59,011:INFO:Set up folding strategy.
2024-04-15 09:43:59,011:INFO:Set up train/test split.
2024-04-15 09:43:59,011:INFO:Set up data.
2024-04-15 09:43:59,015:INFO:Set up index.
2024-04-15 09:43:59,015:INFO:Assigning column types.
2024-04-15 09:43:59,018:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:43:59,065:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:43:59,066:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:59,093:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,131:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:43:59,132:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:59,158:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,159:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:43:59,198:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:59,221:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,221:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,259:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:43:59,282:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,282:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,282:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:43:59,343:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,343:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,400:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,401:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,402:INFO:Preparing preprocessing pipeline...
2024-04-15 09:43:59,403:INFO:Set up simple imputation.
2024-04-15 09:43:59,403:INFO:Set up feature normalization.
2024-04-15 09:43:59,420:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:43:59,423:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:43:59,423:INFO:Creating final display dataframe.
2024-04-15 09:43:59,483:INFO:Setup _display_container:                     Description             Value
0                    Session id              8232
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              28e4
2024-04-15 09:43:59,547:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,606:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,606:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:43:59,606:INFO:setup() successfully completed in 0.61s...............
2024-04-15 09:43:59,607:INFO:Initializing compare_models()
2024-04-15 09:43:59,607:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:43:59,607:INFO:Checking exceptions
2024-04-15 09:43:59,610:INFO:Preparing display monitor
2024-04-15 09:43:59,629:INFO:Initializing Logistic Regression
2024-04-15 09:43:59,629:INFO:Total runtime is 0.0 minutes
2024-04-15 09:43:59,631:INFO:SubProcess create_model() called ==================================
2024-04-15 09:43:59,631:INFO:Initializing create_model()
2024-04-15 09:43:59,631:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59038F2B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:43:59,631:INFO:Checking exceptions
2024-04-15 09:43:59,632:INFO:Importing libraries
2024-04-15 09:43:59,632:INFO:Copying training dataset
2024-04-15 09:43:59,637:INFO:Defining folds
2024-04-15 09:43:59,637:INFO:Declaring metric variables
2024-04-15 09:43:59,641:INFO:Importing untrained model
2024-04-15 09:43:59,644:INFO:Logistic Regression Imported successfully
2024-04-15 09:43:59,649:INFO:Starting cross validation
2024-04-15 09:43:59,650:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:43:59,753:INFO:Calculating mean and std
2024-04-15 09:43:59,754:INFO:Creating metrics dataframe
2024-04-15 09:43:59,756:INFO:Uploading results into container
2024-04-15 09:43:59,757:INFO:Uploading model into container now
2024-04-15 09:43:59,757:INFO:_master_model_container: 1
2024-04-15 09:43:59,757:INFO:_display_container: 2
2024-04-15 09:43:59,757:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8232, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:43:59,757:INFO:create_model() successfully completed......................................
2024-04-15 09:44:00,052:INFO:SubProcess create_model() end ==================================
2024-04-15 09:44:00,052:INFO:Creating metrics dataframe
2024-04-15 09:44:00,059:INFO:Initializing Decision Tree Classifier
2024-04-15 09:44:00,059:INFO:Total runtime is 0.007152287165323893 minutes
2024-04-15 09:44:00,061:INFO:SubProcess create_model() called ==================================
2024-04-15 09:44:00,061:INFO:Initializing create_model()
2024-04-15 09:44:00,061:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59038F2B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:44:00,062:INFO:Checking exceptions
2024-04-15 09:44:00,062:INFO:Importing libraries
2024-04-15 09:44:00,062:INFO:Copying training dataset
2024-04-15 09:44:00,065:INFO:Defining folds
2024-04-15 09:44:00,065:INFO:Declaring metric variables
2024-04-15 09:44:00,068:INFO:Importing untrained model
2024-04-15 09:44:00,071:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:44:00,076:INFO:Starting cross validation
2024-04-15 09:44:00,076:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:44:00,201:INFO:Calculating mean and std
2024-04-15 09:44:00,202:INFO:Creating metrics dataframe
2024-04-15 09:44:00,205:INFO:Uploading results into container
2024-04-15 09:44:00,205:INFO:Uploading model into container now
2024-04-15 09:44:00,206:INFO:_master_model_container: 2
2024-04-15 09:44:00,206:INFO:_display_container: 2
2024-04-15 09:44:00,206:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best')
2024-04-15 09:44:00,206:INFO:create_model() successfully completed......................................
2024-04-15 09:44:00,503:INFO:SubProcess create_model() end ==================================
2024-04-15 09:44:00,504:INFO:Creating metrics dataframe
2024-04-15 09:44:00,517:INFO:Initializing create_model()
2024-04-15 09:44:00,518:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:44:00,518:INFO:Checking exceptions
2024-04-15 09:44:00,520:INFO:Importing libraries
2024-04-15 09:44:00,520:INFO:Copying training dataset
2024-04-15 09:44:00,525:INFO:Defining folds
2024-04-15 09:44:00,525:INFO:Declaring metric variables
2024-04-15 09:44:00,526:INFO:Importing untrained model
2024-04-15 09:44:00,526:INFO:Declaring custom model
2024-04-15 09:44:00,526:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:44:00,527:INFO:Cross validation set to False
2024-04-15 09:44:00,527:INFO:Fitting Model
2024-04-15 09:44:00,606:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best')
2024-04-15 09:44:00,606:INFO:create_model() successfully completed......................................
2024-04-15 09:44:00,881:INFO:Initializing create_model()
2024-04-15 09:44:00,881:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8232, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:44:00,881:INFO:Checking exceptions
2024-04-15 09:44:00,882:INFO:Importing libraries
2024-04-15 09:44:00,882:INFO:Copying training dataset
2024-04-15 09:44:00,886:INFO:Defining folds
2024-04-15 09:44:00,886:INFO:Declaring metric variables
2024-04-15 09:44:00,886:INFO:Importing untrained model
2024-04-15 09:44:00,886:INFO:Declaring custom model
2024-04-15 09:44:00,887:INFO:Logistic Regression Imported successfully
2024-04-15 09:44:00,887:INFO:Cross validation set to False
2024-04-15 09:44:00,887:INFO:Fitting Model
2024-04-15 09:44:00,903:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8232, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:44:00,903:INFO:create_model() successfully completed......................................
2024-04-15 09:44:01,192:INFO:_master_model_container: 2
2024-04-15 09:44:01,193:INFO:_display_container: 2
2024-04-15 09:44:01,193:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8232, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:44:01,194:INFO:compare_models() successfully completed......................................
2024-04-15 09:44:01,194:INFO:Initializing predict_model()
2024-04-15 09:44:01,194:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5885E1DC0>)
2024-04-15 09:44:01,194:INFO:Checking exceptions
2024-04-15 09:44:01,194:INFO:Preloading libraries
2024-04-15 09:44:01,694:INFO:Initializing predict_model()
2024-04-15 09:44:01,694:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8232, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58C2429D0>)
2024-04-15 09:44:01,694:INFO:Checking exceptions
2024-04-15 09:44:01,694:INFO:Preloading libraries
2024-04-15 09:44:02,125:INFO:Initializing tune_model()
2024-04-15 09:44:02,125:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>)
2024-04-15 09:44:02,125:INFO:Checking exceptions
2024-04-15 09:44:02,136:INFO:Copying training dataset
2024-04-15 09:44:02,140:INFO:Checking base model
2024-04-15 09:44:02,140:INFO:Base model : Decision Tree Classifier
2024-04-15 09:44:02,143:INFO:Declaring metric variables
2024-04-15 09:44:02,145:INFO:Defining Hyperparameters
2024-04-15 09:44:02,440:INFO:Tuning with n_jobs=-1
2024-04-15 09:44:02,441:INFO:Initializing RandomizedSearchCV
2024-04-15 09:44:02,675:INFO:best_params: {'actual_estimator__min_samples_split': 10, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 12, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:44:02,676:INFO:Hyperparameter search completed
2024-04-15 09:44:02,676:INFO:SubProcess create_model() called ==================================
2024-04-15 09:44:02,676:INFO:Initializing create_model()
2024-04-15 09:44:02,676:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B471F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 10, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 1.0, 'max_depth': 12, 'criterion': 'entropy'})
2024-04-15 09:44:02,676:INFO:Checking exceptions
2024-04-15 09:44:02,676:INFO:Importing libraries
2024-04-15 09:44:02,676:INFO:Copying training dataset
2024-04-15 09:44:02,681:INFO:Defining folds
2024-04-15 09:44:02,681:INFO:Declaring metric variables
2024-04-15 09:44:02,684:INFO:Importing untrained model
2024-04-15 09:44:02,684:INFO:Declaring custom model
2024-04-15 09:44:02,687:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:44:02,692:INFO:Starting cross validation
2024-04-15 09:44:02,693:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:44:02,802:INFO:Calculating mean and std
2024-04-15 09:44:02,802:INFO:Creating metrics dataframe
2024-04-15 09:44:02,807:INFO:Finalizing model
2024-04-15 09:44:02,835:INFO:Uploading results into container
2024-04-15 09:44:02,836:INFO:Uploading model into container now
2024-04-15 09:44:02,836:INFO:_master_model_container: 3
2024-04-15 09:44:02,836:INFO:_display_container: 5
2024-04-15 09:44:02,837:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=12, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=10, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best')
2024-04-15 09:44:02,837:INFO:create_model() successfully completed......................................
2024-04-15 09:44:03,117:INFO:SubProcess create_model() end ==================================
2024-04-15 09:44:03,117:INFO:choose_better activated
2024-04-15 09:44:03,120:INFO:SubProcess create_model() called ==================================
2024-04-15 09:44:03,121:INFO:Initializing create_model()
2024-04-15 09:44:03,121:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:44:03,121:INFO:Checking exceptions
2024-04-15 09:44:03,123:INFO:Importing libraries
2024-04-15 09:44:03,123:INFO:Copying training dataset
2024-04-15 09:44:03,127:INFO:Defining folds
2024-04-15 09:44:03,127:INFO:Declaring metric variables
2024-04-15 09:44:03,128:INFO:Importing untrained model
2024-04-15 09:44:03,128:INFO:Declaring custom model
2024-04-15 09:44:03,128:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:44:03,129:INFO:Starting cross validation
2024-04-15 09:44:03,129:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:44:03,278:INFO:Calculating mean and std
2024-04-15 09:44:03,278:INFO:Creating metrics dataframe
2024-04-15 09:44:03,281:INFO:Finalizing model
2024-04-15 09:44:03,370:INFO:Uploading results into container
2024-04-15 09:44:03,372:INFO:Uploading model into container now
2024-04-15 09:44:03,373:INFO:_master_model_container: 4
2024-04-15 09:44:03,373:INFO:_display_container: 6
2024-04-15 09:44:03,374:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best')
2024-04-15 09:44:03,374:INFO:create_model() successfully completed......................................
2024-04-15 09:44:03,690:INFO:SubProcess create_model() end ==================================
2024-04-15 09:44:03,690:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best') result for F1 is 0.5429
2024-04-15 09:44:03,691:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=12, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=10, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best') result for F1 is 0.4654
2024-04-15 09:44:03,691:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best') is best model
2024-04-15 09:44:03,691:INFO:choose_better completed
2024-04-15 09:44:03,691:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:44:03,699:INFO:_master_model_container: 4
2024-04-15 09:44:03,699:INFO:_display_container: 5
2024-04-15 09:44:03,699:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best')
2024-04-15 09:44:03,699:INFO:tune_model() successfully completed......................................
2024-04-15 09:44:03,981:INFO:Initializing predict_model()
2024-04-15 09:44:03,981:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5887785E0>)
2024-04-15 09:44:03,981:INFO:Checking exceptions
2024-04-15 09:44:03,981:INFO:Preloading libraries
2024-04-15 09:44:04,345:INFO:Initializing finalize_model()
2024-04-15 09:44:04,345:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:44:04,346:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best')
2024-04-15 09:44:04,348:INFO:Initializing create_model()
2024-04-15 09:44:04,348:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5856DEFD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8232, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:44:04,348:INFO:Checking exceptions
2024-04-15 09:44:04,350:INFO:Importing libraries
2024-04-15 09:44:04,350:INFO:Copying training dataset
2024-04-15 09:44:04,350:INFO:Defining folds
2024-04-15 09:44:04,350:INFO:Declaring metric variables
2024-04-15 09:44:04,350:INFO:Importing untrained model
2024-04-15 09:44:04,350:INFO:Declaring custom model
2024-04-15 09:44:04,350:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:44:04,351:INFO:Cross validation set to False
2024-04-15 09:44:04,351:INFO:Fitting Model
2024-04-15 09:44:04,416:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8232, splitter='best'))],
         verbose=False)
2024-04-15 09:44:04,416:INFO:create_model() successfully completed......................................
2024-04-15 09:44:04,691:INFO:_master_model_container: 4
2024-04-15 09:44:04,691:INFO:_display_container: 6
2024-04-15 09:44:04,695:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8232, splitter='best'))],
         verbose=False)
2024-04-15 09:44:04,695:INFO:finalize_model() successfully completed......................................
2024-04-15 09:44:04,975:INFO:Initializing save_model()
2024-04-15 09:44:04,975:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8232, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:44:04,975:INFO:Adding model into prep_pipe
2024-04-15 09:44:04,975:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:44:04,978:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:44:04,983:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=8232, splitter='best'))],
         verbose=False)
2024-04-15 09:44:04,983:INFO:save_model() successfully completed......................................
2024-04-15 09:44:05,264:INFO:Initializing load_model()
2024-04-15 09:44:05,264:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:44:05,343:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:44:08,219:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\984458784.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:46:58,338:INFO:PyCaret ClassificationExperiment
2024-04-15 09:46:58,338:INFO:Logging name: clf-default-name
2024-04-15 09:46:58,338:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:46:58,338:INFO:version 3.2.0
2024-04-15 09:46:58,338:INFO:Initializing setup()
2024-04-15 09:46:58,338:INFO:self.USI: 682d
2024-04-15 09:46:58,339:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:46:58,339:INFO:Checking environment
2024-04-15 09:46:58,339:INFO:python_version: 3.8.0
2024-04-15 09:46:58,339:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:46:58,339:INFO:machine: AMD64
2024-04-15 09:46:58,339:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:46:58,345:INFO:Memory: svmem(total=34301427712, available=18231742464, percent=46.8, used=16069685248, free=18231742464)
2024-04-15 09:46:58,346:INFO:Physical Core: 6
2024-04-15 09:46:58,346:INFO:Logical Core: 12
2024-04-15 09:46:58,346:INFO:Checking libraries
2024-04-15 09:46:58,346:INFO:System:
2024-04-15 09:46:58,346:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:46:58,346:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:46:58,346:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:46:58,346:INFO:PyCaret required dependencies:
2024-04-15 09:46:58,346:INFO:                 pip: 19.2.3
2024-04-15 09:46:58,346:INFO:          setuptools: 41.2.0
2024-04-15 09:46:58,346:INFO:             pycaret: 3.2.0
2024-04-15 09:46:58,346:INFO:             IPython: 8.12.3
2024-04-15 09:46:58,346:INFO:          ipywidgets: 8.1.2
2024-04-15 09:46:58,346:INFO:                tqdm: 4.66.2
2024-04-15 09:46:58,346:INFO:               numpy: 1.24.4
2024-04-15 09:46:58,347:INFO:              pandas: 1.5.3
2024-04-15 09:46:58,347:INFO:              jinja2: 3.1.3
2024-04-15 09:46:58,347:INFO:               scipy: 1.10.1
2024-04-15 09:46:58,347:INFO:              joblib: 1.3.2
2024-04-15 09:46:58,347:INFO:             sklearn: 1.2.0
2024-04-15 09:46:58,347:INFO:                pyod: 1.1.3
2024-04-15 09:46:58,347:INFO:            imblearn: 0.12.2
2024-04-15 09:46:58,347:INFO:   category_encoders: 2.6.3
2024-04-15 09:46:58,347:INFO:            lightgbm: 4.3.0
2024-04-15 09:46:58,347:INFO:               numba: 0.58.1
2024-04-15 09:46:58,347:INFO:            requests: 2.31.0
2024-04-15 09:46:58,347:INFO:          matplotlib: 3.6.0
2024-04-15 09:46:58,347:INFO:          scikitplot: 0.3.7
2024-04-15 09:46:58,347:INFO:         yellowbrick: 1.5
2024-04-15 09:46:58,347:INFO:              plotly: 5.20.0
2024-04-15 09:46:58,347:INFO:    plotly-resampler: Not installed
2024-04-15 09:46:58,347:INFO:             kaleido: 0.2.1
2024-04-15 09:46:58,347:INFO:           schemdraw: 0.15
2024-04-15 09:46:58,347:INFO:         statsmodels: 0.14.1
2024-04-15 09:46:58,347:INFO:              sktime: 0.21.1
2024-04-15 09:46:58,347:INFO:               tbats: 1.1.3
2024-04-15 09:46:58,347:INFO:            pmdarima: 2.0.4
2024-04-15 09:46:58,347:INFO:              psutil: 5.9.8
2024-04-15 09:46:58,347:INFO:          markupsafe: 2.1.5
2024-04-15 09:46:58,347:INFO:             pickle5: Not installed
2024-04-15 09:46:58,347:INFO:         cloudpickle: 3.0.0
2024-04-15 09:46:58,347:INFO:         deprecation: 2.1.0
2024-04-15 09:46:58,347:INFO:              xxhash: 3.4.1
2024-04-15 09:46:58,347:INFO:           wurlitzer: Not installed
2024-04-15 09:46:58,348:INFO:PyCaret optional dependencies:
2024-04-15 09:46:58,348:INFO:                shap: Not installed
2024-04-15 09:46:58,348:INFO:           interpret: Not installed
2024-04-15 09:46:58,348:INFO:                umap: Not installed
2024-04-15 09:46:58,348:INFO:     ydata_profiling: Not installed
2024-04-15 09:46:58,348:INFO:  explainerdashboard: Not installed
2024-04-15 09:46:58,348:INFO:             autoviz: Not installed
2024-04-15 09:46:58,348:INFO:           fairlearn: Not installed
2024-04-15 09:46:58,348:INFO:          deepchecks: Not installed
2024-04-15 09:46:58,348:INFO:             xgboost: Not installed
2024-04-15 09:46:58,348:INFO:            catboost: Not installed
2024-04-15 09:46:58,348:INFO:              kmodes: Not installed
2024-04-15 09:46:58,348:INFO:             mlxtend: Not installed
2024-04-15 09:46:58,348:INFO:       statsforecast: Not installed
2024-04-15 09:46:58,348:INFO:        tune_sklearn: Not installed
2024-04-15 09:46:58,348:INFO:                 ray: Not installed
2024-04-15 09:46:58,348:INFO:            hyperopt: Not installed
2024-04-15 09:46:58,348:INFO:              optuna: Not installed
2024-04-15 09:46:58,348:INFO:               skopt: Not installed
2024-04-15 09:46:58,348:INFO:              mlflow: 2.11.3
2024-04-15 09:46:58,348:INFO:              gradio: Not installed
2024-04-15 09:46:58,348:INFO:             fastapi: Not installed
2024-04-15 09:46:58,348:INFO:             uvicorn: Not installed
2024-04-15 09:46:58,348:INFO:              m2cgen: Not installed
2024-04-15 09:46:58,348:INFO:           evidently: Not installed
2024-04-15 09:46:58,348:INFO:               fugue: Not installed
2024-04-15 09:46:58,348:INFO:           streamlit: 1.33.0
2024-04-15 09:46:58,348:INFO:             prophet: Not installed
2024-04-15 09:46:58,348:INFO:None
2024-04-15 09:46:58,348:INFO:Set up data.
2024-04-15 09:46:58,352:INFO:Set up folding strategy.
2024-04-15 09:46:58,353:INFO:Set up train/test split.
2024-04-15 09:46:58,353:INFO:Set up data.
2024-04-15 09:46:58,356:INFO:Set up index.
2024-04-15 09:46:58,356:INFO:Assigning column types.
2024-04-15 09:46:58,359:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:46:58,394:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:46:58,394:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:46:58,416:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,416:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,452:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:46:58,453:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:46:58,475:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,475:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,475:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:46:58,510:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:46:58,533:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,533:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,571:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:46:58,594:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,595:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,595:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:46:58,655:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,655:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,718:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,718:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,719:INFO:Preparing preprocessing pipeline...
2024-04-15 09:46:58,721:INFO:Set up simple imputation.
2024-04-15 09:46:58,721:INFO:Set up feature normalization.
2024-04-15 09:46:58,738:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:46:58,742:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:46:58,742:INFO:Creating final display dataframe.
2024-04-15 09:46:58,807:INFO:Setup _display_container:                     Description             Value
0                    Session id              2404
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              682d
2024-04-15 09:46:58,869:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,930:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:46:58,931:INFO:setup() successfully completed in 0.59s...............
2024-04-15 09:46:58,931:INFO:Initializing compare_models()
2024-04-15 09:46:58,932:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:46:58,932:INFO:Checking exceptions
2024-04-15 09:46:58,935:INFO:Preparing display monitor
2024-04-15 09:46:58,951:INFO:Initializing Logistic Regression
2024-04-15 09:46:58,952:INFO:Total runtime is 1.666545867919922e-05 minutes
2024-04-15 09:46:58,954:INFO:SubProcess create_model() called ==================================
2024-04-15 09:46:58,955:INFO:Initializing create_model()
2024-04-15 09:46:58,955:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59007D520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:46:58,955:INFO:Checking exceptions
2024-04-15 09:46:58,955:INFO:Importing libraries
2024-04-15 09:46:58,955:INFO:Copying training dataset
2024-04-15 09:46:58,961:INFO:Defining folds
2024-04-15 09:46:58,961:INFO:Declaring metric variables
2024-04-15 09:46:58,964:INFO:Importing untrained model
2024-04-15 09:46:58,967:INFO:Logistic Regression Imported successfully
2024-04-15 09:46:58,972:INFO:Starting cross validation
2024-04-15 09:46:58,973:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:46:59,066:INFO:Calculating mean and std
2024-04-15 09:46:59,067:INFO:Creating metrics dataframe
2024-04-15 09:46:59,070:INFO:Uploading results into container
2024-04-15 09:46:59,070:INFO:Uploading model into container now
2024-04-15 09:46:59,071:INFO:_master_model_container: 1
2024-04-15 09:46:59,071:INFO:_display_container: 2
2024-04-15 09:46:59,071:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:46:59,071:INFO:create_model() successfully completed......................................
2024-04-15 09:46:59,363:INFO:SubProcess create_model() end ==================================
2024-04-15 09:46:59,364:INFO:Creating metrics dataframe
2024-04-15 09:46:59,371:INFO:Initializing Decision Tree Classifier
2024-04-15 09:46:59,371:INFO:Total runtime is 0.0069987416267395025 minutes
2024-04-15 09:46:59,373:INFO:SubProcess create_model() called ==================================
2024-04-15 09:46:59,374:INFO:Initializing create_model()
2024-04-15 09:46:59,374:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59007D520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:46:59,374:INFO:Checking exceptions
2024-04-15 09:46:59,374:INFO:Importing libraries
2024-04-15 09:46:59,374:INFO:Copying training dataset
2024-04-15 09:46:59,378:INFO:Defining folds
2024-04-15 09:46:59,378:INFO:Declaring metric variables
2024-04-15 09:46:59,382:INFO:Importing untrained model
2024-04-15 09:46:59,385:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:46:59,405:INFO:Starting cross validation
2024-04-15 09:46:59,406:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:46:59,558:INFO:Calculating mean and std
2024-04-15 09:46:59,558:INFO:Creating metrics dataframe
2024-04-15 09:46:59,561:INFO:Uploading results into container
2024-04-15 09:46:59,561:INFO:Uploading model into container now
2024-04-15 09:46:59,561:INFO:_master_model_container: 2
2024-04-15 09:46:59,561:INFO:_display_container: 2
2024-04-15 09:46:59,562:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best')
2024-04-15 09:46:59,562:INFO:create_model() successfully completed......................................
2024-04-15 09:46:59,837:INFO:SubProcess create_model() end ==================================
2024-04-15 09:46:59,838:INFO:Creating metrics dataframe
2024-04-15 09:46:59,851:INFO:Initializing create_model()
2024-04-15 09:46:59,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:46:59,851:INFO:Checking exceptions
2024-04-15 09:46:59,853:INFO:Importing libraries
2024-04-15 09:46:59,853:INFO:Copying training dataset
2024-04-15 09:46:59,856:INFO:Defining folds
2024-04-15 09:46:59,856:INFO:Declaring metric variables
2024-04-15 09:46:59,856:INFO:Importing untrained model
2024-04-15 09:46:59,856:INFO:Declaring custom model
2024-04-15 09:46:59,857:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:46:59,857:INFO:Cross validation set to False
2024-04-15 09:46:59,857:INFO:Fitting Model
2024-04-15 09:46:59,909:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best')
2024-04-15 09:46:59,909:INFO:create_model() successfully completed......................................
2024-04-15 09:47:00,189:INFO:Initializing create_model()
2024-04-15 09:47:00,189:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:00,189:INFO:Checking exceptions
2024-04-15 09:47:00,191:INFO:Importing libraries
2024-04-15 09:47:00,191:INFO:Copying training dataset
2024-04-15 09:47:00,194:INFO:Defining folds
2024-04-15 09:47:00,195:INFO:Declaring metric variables
2024-04-15 09:47:00,195:INFO:Importing untrained model
2024-04-15 09:47:00,195:INFO:Declaring custom model
2024-04-15 09:47:00,195:INFO:Logistic Regression Imported successfully
2024-04-15 09:47:00,196:INFO:Cross validation set to False
2024-04-15 09:47:00,196:INFO:Fitting Model
2024-04-15 09:47:00,212:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:47:00,212:INFO:create_model() successfully completed......................................
2024-04-15 09:47:00,516:INFO:_master_model_container: 2
2024-04-15 09:47:00,517:INFO:_display_container: 2
2024-04-15 09:47:00,517:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:47:00,517:INFO:compare_models() successfully completed......................................
2024-04-15 09:47:00,518:INFO:Initializing predict_model()
2024-04-15 09:47:00,518:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C59015B9D0>)
2024-04-15 09:47:00,518:INFO:Checking exceptions
2024-04-15 09:47:00,518:INFO:Preloading libraries
2024-04-15 09:47:01,045:INFO:Initializing predict_model()
2024-04-15 09:47:01,045:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58DEE3F70>)
2024-04-15 09:47:01,045:INFO:Checking exceptions
2024-04-15 09:47:01,046:INFO:Preloading libraries
2024-04-15 09:47:01,495:INFO:Initializing tune_model()
2024-04-15 09:47:01,495:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>)
2024-04-15 09:47:01,495:INFO:Checking exceptions
2024-04-15 09:47:01,511:INFO:Copying training dataset
2024-04-15 09:47:01,516:INFO:Checking base model
2024-04-15 09:47:01,516:INFO:Base model : Decision Tree Classifier
2024-04-15 09:47:01,520:INFO:Declaring metric variables
2024-04-15 09:47:01,523:INFO:Defining Hyperparameters
2024-04-15 09:47:01,829:INFO:Tuning with n_jobs=-1
2024-04-15 09:47:01,829:INFO:Initializing RandomizedSearchCV
2024-04-15 09:47:02,043:INFO:best_params: {'actual_estimator__min_samples_split': 7, 'actual_estimator__min_samples_leaf': 3, 'actual_estimator__min_impurity_decrease': 0.002, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 9, 'actual_estimator__criterion': 'gini'}
2024-04-15 09:47:02,043:INFO:Hyperparameter search completed
2024-04-15 09:47:02,043:INFO:SubProcess create_model() called ==================================
2024-04-15 09:47:02,044:INFO:Initializing create_model()
2024-04-15 09:47:02,044:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C590060370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 7, 'min_samples_leaf': 3, 'min_impurity_decrease': 0.002, 'max_features': 1.0, 'max_depth': 9, 'criterion': 'gini'})
2024-04-15 09:47:02,044:INFO:Checking exceptions
2024-04-15 09:47:02,044:INFO:Importing libraries
2024-04-15 09:47:02,044:INFO:Copying training dataset
2024-04-15 09:47:02,048:INFO:Defining folds
2024-04-15 09:47:02,048:INFO:Declaring metric variables
2024-04-15 09:47:02,052:INFO:Importing untrained model
2024-04-15 09:47:02,052:INFO:Declaring custom model
2024-04-15 09:47:02,056:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:02,063:INFO:Starting cross validation
2024-04-15 09:47:02,064:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:47:02,153:INFO:Calculating mean and std
2024-04-15 09:47:02,154:INFO:Creating metrics dataframe
2024-04-15 09:47:02,159:INFO:Finalizing model
2024-04-15 09:47:02,179:INFO:Uploading results into container
2024-04-15 09:47:02,180:INFO:Uploading model into container now
2024-04-15 09:47:02,181:INFO:_master_model_container: 3
2024-04-15 09:47:02,181:INFO:_display_container: 5
2024-04-15 09:47:02,181:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=9, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.002, min_samples_leaf=3,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best')
2024-04-15 09:47:02,181:INFO:create_model() successfully completed......................................
2024-04-15 09:47:02,524:INFO:SubProcess create_model() end ==================================
2024-04-15 09:47:02,525:INFO:choose_better activated
2024-04-15 09:47:02,529:INFO:SubProcess create_model() called ==================================
2024-04-15 09:47:02,529:INFO:Initializing create_model()
2024-04-15 09:47:02,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:02,529:INFO:Checking exceptions
2024-04-15 09:47:02,531:INFO:Importing libraries
2024-04-15 09:47:02,531:INFO:Copying training dataset
2024-04-15 09:47:02,535:INFO:Defining folds
2024-04-15 09:47:02,535:INFO:Declaring metric variables
2024-04-15 09:47:02,536:INFO:Importing untrained model
2024-04-15 09:47:02,536:INFO:Declaring custom model
2024-04-15 09:47:02,536:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:02,536:INFO:Starting cross validation
2024-04-15 09:47:02,537:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:47:02,681:INFO:Calculating mean and std
2024-04-15 09:47:02,681:INFO:Creating metrics dataframe
2024-04-15 09:47:02,683:INFO:Finalizing model
2024-04-15 09:47:02,735:INFO:Uploading results into container
2024-04-15 09:47:02,736:INFO:Uploading model into container now
2024-04-15 09:47:02,736:INFO:_master_model_container: 4
2024-04-15 09:47:02,736:INFO:_display_container: 6
2024-04-15 09:47:02,737:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best')
2024-04-15 09:47:02,737:INFO:create_model() successfully completed......................................
2024-04-15 09:47:03,078:INFO:SubProcess create_model() end ==================================
2024-04-15 09:47:03,079:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best') result for F1 is 0.5442
2024-04-15 09:47:03,079:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=9, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.002, min_samples_leaf=3,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best') result for F1 is 0.4516
2024-04-15 09:47:03,079:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best') is best model
2024-04-15 09:47:03,079:INFO:choose_better completed
2024-04-15 09:47:03,080:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:47:03,087:INFO:_master_model_container: 4
2024-04-15 09:47:03,087:INFO:_display_container: 5
2024-04-15 09:47:03,087:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best')
2024-04-15 09:47:03,087:INFO:tune_model() successfully completed......................................
2024-04-15 09:47:03,389:INFO:Initializing predict_model()
2024-04-15 09:47:03,389:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591EAA430>)
2024-04-15 09:47:03,389:INFO:Checking exceptions
2024-04-15 09:47:03,389:INFO:Preloading libraries
2024-04-15 09:47:03,777:INFO:Initializing finalize_model()
2024-04-15 09:47:03,777:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:47:03,777:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best')
2024-04-15 09:47:03,779:INFO:Initializing create_model()
2024-04-15 09:47:03,779:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2404, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:03,779:INFO:Checking exceptions
2024-04-15 09:47:03,781:INFO:Importing libraries
2024-04-15 09:47:03,781:INFO:Copying training dataset
2024-04-15 09:47:03,781:INFO:Defining folds
2024-04-15 09:47:03,781:INFO:Declaring metric variables
2024-04-15 09:47:03,781:INFO:Importing untrained model
2024-04-15 09:47:03,781:INFO:Declaring custom model
2024-04-15 09:47:03,781:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:03,782:INFO:Cross validation set to False
2024-04-15 09:47:03,782:INFO:Fitting Model
2024-04-15 09:47:03,850:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2404, splitter='best'))],
         verbose=False)
2024-04-15 09:47:03,850:INFO:create_model() successfully completed......................................
2024-04-15 09:47:04,152:INFO:_master_model_container: 4
2024-04-15 09:47:04,153:INFO:_display_container: 6
2024-04-15 09:47:04,156:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2404, splitter='best'))],
         verbose=False)
2024-04-15 09:47:04,156:INFO:finalize_model() successfully completed......................................
2024-04-15 09:47:04,451:INFO:Initializing save_model()
2024-04-15 09:47:04,451:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2404, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:47:04,451:INFO:Adding model into prep_pipe
2024-04-15 09:47:04,451:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:47:04,454:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:47:04,458:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2404, splitter='best'))],
         verbose=False)
2024-04-15 09:47:04,458:INFO:save_model() successfully completed......................................
2024-04-15 09:47:04,753:INFO:Initializing load_model()
2024-04-15 09:47:04,753:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:47:04,847:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:47:07,764:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3435238646.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:47:50,637:INFO:PyCaret ClassificationExperiment
2024-04-15 09:47:50,637:INFO:Logging name: clf-default-name
2024-04-15 09:47:50,637:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:47:50,637:INFO:version 3.2.0
2024-04-15 09:47:50,637:INFO:Initializing setup()
2024-04-15 09:47:50,637:INFO:self.USI: 2a3a
2024-04-15 09:47:50,637:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:47:50,637:INFO:Checking environment
2024-04-15 09:47:50,638:INFO:python_version: 3.8.0
2024-04-15 09:47:50,638:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:47:50,638:INFO:machine: AMD64
2024-04-15 09:47:50,638:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:47:50,644:INFO:Memory: svmem(total=34301427712, available=18177421312, percent=47.0, used=16124006400, free=18177421312)
2024-04-15 09:47:50,645:INFO:Physical Core: 6
2024-04-15 09:47:50,645:INFO:Logical Core: 12
2024-04-15 09:47:50,645:INFO:Checking libraries
2024-04-15 09:47:50,645:INFO:System:
2024-04-15 09:47:50,645:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:47:50,645:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:47:50,645:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:47:50,645:INFO:PyCaret required dependencies:
2024-04-15 09:47:50,645:INFO:                 pip: 19.2.3
2024-04-15 09:47:50,645:INFO:          setuptools: 41.2.0
2024-04-15 09:47:50,645:INFO:             pycaret: 3.2.0
2024-04-15 09:47:50,645:INFO:             IPython: 8.12.3
2024-04-15 09:47:50,645:INFO:          ipywidgets: 8.1.2
2024-04-15 09:47:50,645:INFO:                tqdm: 4.66.2
2024-04-15 09:47:50,645:INFO:               numpy: 1.24.4
2024-04-15 09:47:50,645:INFO:              pandas: 1.5.3
2024-04-15 09:47:50,646:INFO:              jinja2: 3.1.3
2024-04-15 09:47:50,646:INFO:               scipy: 1.10.1
2024-04-15 09:47:50,646:INFO:              joblib: 1.3.2
2024-04-15 09:47:50,646:INFO:             sklearn: 1.2.0
2024-04-15 09:47:50,646:INFO:                pyod: 1.1.3
2024-04-15 09:47:50,646:INFO:            imblearn: 0.12.2
2024-04-15 09:47:50,646:INFO:   category_encoders: 2.6.3
2024-04-15 09:47:50,646:INFO:            lightgbm: 4.3.0
2024-04-15 09:47:50,646:INFO:               numba: 0.58.1
2024-04-15 09:47:50,646:INFO:            requests: 2.31.0
2024-04-15 09:47:50,646:INFO:          matplotlib: 3.6.0
2024-04-15 09:47:50,646:INFO:          scikitplot: 0.3.7
2024-04-15 09:47:50,646:INFO:         yellowbrick: 1.5
2024-04-15 09:47:50,646:INFO:              plotly: 5.20.0
2024-04-15 09:47:50,646:INFO:    plotly-resampler: Not installed
2024-04-15 09:47:50,646:INFO:             kaleido: 0.2.1
2024-04-15 09:47:50,646:INFO:           schemdraw: 0.15
2024-04-15 09:47:50,646:INFO:         statsmodels: 0.14.1
2024-04-15 09:47:50,646:INFO:              sktime: 0.21.1
2024-04-15 09:47:50,646:INFO:               tbats: 1.1.3
2024-04-15 09:47:50,646:INFO:            pmdarima: 2.0.4
2024-04-15 09:47:50,646:INFO:              psutil: 5.9.8
2024-04-15 09:47:50,646:INFO:          markupsafe: 2.1.5
2024-04-15 09:47:50,646:INFO:             pickle5: Not installed
2024-04-15 09:47:50,646:INFO:         cloudpickle: 3.0.0
2024-04-15 09:47:50,646:INFO:         deprecation: 2.1.0
2024-04-15 09:47:50,646:INFO:              xxhash: 3.4.1
2024-04-15 09:47:50,647:INFO:           wurlitzer: Not installed
2024-04-15 09:47:50,647:INFO:PyCaret optional dependencies:
2024-04-15 09:47:50,647:INFO:                shap: Not installed
2024-04-15 09:47:50,647:INFO:           interpret: Not installed
2024-04-15 09:47:50,647:INFO:                umap: Not installed
2024-04-15 09:47:50,647:INFO:     ydata_profiling: Not installed
2024-04-15 09:47:50,647:INFO:  explainerdashboard: Not installed
2024-04-15 09:47:50,647:INFO:             autoviz: Not installed
2024-04-15 09:47:50,647:INFO:           fairlearn: Not installed
2024-04-15 09:47:50,647:INFO:          deepchecks: Not installed
2024-04-15 09:47:50,647:INFO:             xgboost: Not installed
2024-04-15 09:47:50,647:INFO:            catboost: Not installed
2024-04-15 09:47:50,647:INFO:              kmodes: Not installed
2024-04-15 09:47:50,647:INFO:             mlxtend: Not installed
2024-04-15 09:47:50,647:INFO:       statsforecast: Not installed
2024-04-15 09:47:50,647:INFO:        tune_sklearn: Not installed
2024-04-15 09:47:50,647:INFO:                 ray: Not installed
2024-04-15 09:47:50,647:INFO:            hyperopt: Not installed
2024-04-15 09:47:50,647:INFO:              optuna: Not installed
2024-04-15 09:47:50,647:INFO:               skopt: Not installed
2024-04-15 09:47:50,647:INFO:              mlflow: 2.11.3
2024-04-15 09:47:50,647:INFO:              gradio: Not installed
2024-04-15 09:47:50,647:INFO:             fastapi: Not installed
2024-04-15 09:47:50,647:INFO:             uvicorn: Not installed
2024-04-15 09:47:50,648:INFO:              m2cgen: Not installed
2024-04-15 09:47:50,648:INFO:           evidently: Not installed
2024-04-15 09:47:50,648:INFO:               fugue: Not installed
2024-04-15 09:47:50,648:INFO:           streamlit: 1.33.0
2024-04-15 09:47:50,648:INFO:             prophet: Not installed
2024-04-15 09:47:50,648:INFO:None
2024-04-15 09:47:50,648:INFO:Set up data.
2024-04-15 09:47:50,654:INFO:Set up folding strategy.
2024-04-15 09:47:50,654:INFO:Set up train/test split.
2024-04-15 09:47:50,654:INFO:Set up data.
2024-04-15 09:47:50,658:INFO:Set up index.
2024-04-15 09:47:50,659:INFO:Assigning column types.
2024-04-15 09:47:50,662:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:47:50,703:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:47:50,704:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:47:50,729:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,729:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,773:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:47:50,774:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:47:50,797:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,798:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,798:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:47:50,834:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:47:50,858:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,895:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:47:50,916:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,917:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,917:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:47:50,975:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:50,976:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,034:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,034:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,035:INFO:Preparing preprocessing pipeline...
2024-04-15 09:47:51,037:INFO:Set up simple imputation.
2024-04-15 09:47:51,037:INFO:Set up feature normalization.
2024-04-15 09:47:51,053:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:47:51,057:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:47:51,057:INFO:Creating final display dataframe.
2024-04-15 09:47:51,124:INFO:Setup _display_container:                     Description             Value
0                    Session id              2512
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              2a3a
2024-04-15 09:47:51,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,261:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:47:51,262:INFO:setup() successfully completed in 0.63s...............
2024-04-15 09:47:51,262:INFO:Initializing compare_models()
2024-04-15 09:47:51,262:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:47:51,262:INFO:Checking exceptions
2024-04-15 09:47:51,265:INFO:Preparing display monitor
2024-04-15 09:47:51,281:INFO:Initializing Logistic Regression
2024-04-15 09:47:51,282:INFO:Total runtime is 1.666545867919922e-05 minutes
2024-04-15 09:47:51,284:INFO:SubProcess create_model() called ==================================
2024-04-15 09:47:51,284:INFO:Initializing create_model()
2024-04-15 09:47:51,284:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58DEFDD90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:51,284:INFO:Checking exceptions
2024-04-15 09:47:51,285:INFO:Importing libraries
2024-04-15 09:47:51,285:INFO:Copying training dataset
2024-04-15 09:47:51,289:INFO:Defining folds
2024-04-15 09:47:51,290:INFO:Declaring metric variables
2024-04-15 09:47:51,293:INFO:Importing untrained model
2024-04-15 09:47:51,296:INFO:Logistic Regression Imported successfully
2024-04-15 09:47:51,303:INFO:Starting cross validation
2024-04-15 09:47:51,304:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:47:51,426:INFO:Calculating mean and std
2024-04-15 09:47:51,427:INFO:Creating metrics dataframe
2024-04-15 09:47:51,431:INFO:Uploading results into container
2024-04-15 09:47:51,431:INFO:Uploading model into container now
2024-04-15 09:47:51,432:INFO:_master_model_container: 1
2024-04-15 09:47:51,432:INFO:_display_container: 2
2024-04-15 09:47:51,432:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2512, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:47:51,432:INFO:create_model() successfully completed......................................
2024-04-15 09:47:51,750:INFO:SubProcess create_model() end ==================================
2024-04-15 09:47:51,750:INFO:Creating metrics dataframe
2024-04-15 09:47:51,759:INFO:Initializing Decision Tree Classifier
2024-04-15 09:47:51,759:INFO:Total runtime is 0.007968469460805257 minutes
2024-04-15 09:47:51,763:INFO:SubProcess create_model() called ==================================
2024-04-15 09:47:51,763:INFO:Initializing create_model()
2024-04-15 09:47:51,763:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58DEFDD90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:51,763:INFO:Checking exceptions
2024-04-15 09:47:51,763:INFO:Importing libraries
2024-04-15 09:47:51,763:INFO:Copying training dataset
2024-04-15 09:47:51,769:INFO:Defining folds
2024-04-15 09:47:51,769:INFO:Declaring metric variables
2024-04-15 09:47:51,772:INFO:Importing untrained model
2024-04-15 09:47:51,775:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:51,781:INFO:Starting cross validation
2024-04-15 09:47:51,782:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:47:51,930:INFO:Calculating mean and std
2024-04-15 09:47:51,930:INFO:Creating metrics dataframe
2024-04-15 09:47:51,933:INFO:Uploading results into container
2024-04-15 09:47:51,933:INFO:Uploading model into container now
2024-04-15 09:47:51,934:INFO:_master_model_container: 2
2024-04-15 09:47:51,934:INFO:_display_container: 2
2024-04-15 09:47:51,934:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best')
2024-04-15 09:47:51,934:INFO:create_model() successfully completed......................................
2024-04-15 09:47:52,248:INFO:SubProcess create_model() end ==================================
2024-04-15 09:47:52,248:INFO:Creating metrics dataframe
2024-04-15 09:47:52,263:INFO:Initializing create_model()
2024-04-15 09:47:52,263:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:52,263:INFO:Checking exceptions
2024-04-15 09:47:52,265:INFO:Importing libraries
2024-04-15 09:47:52,265:INFO:Copying training dataset
2024-04-15 09:47:52,269:INFO:Defining folds
2024-04-15 09:47:52,269:INFO:Declaring metric variables
2024-04-15 09:47:52,270:INFO:Importing untrained model
2024-04-15 09:47:52,270:INFO:Declaring custom model
2024-04-15 09:47:52,270:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:52,271:INFO:Cross validation set to False
2024-04-15 09:47:52,271:INFO:Fitting Model
2024-04-15 09:47:52,324:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best')
2024-04-15 09:47:52,324:INFO:create_model() successfully completed......................................
2024-04-15 09:47:52,605:INFO:Initializing create_model()
2024-04-15 09:47:52,605:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2512, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:52,605:INFO:Checking exceptions
2024-04-15 09:47:52,607:INFO:Importing libraries
2024-04-15 09:47:52,607:INFO:Copying training dataset
2024-04-15 09:47:52,611:INFO:Defining folds
2024-04-15 09:47:52,611:INFO:Declaring metric variables
2024-04-15 09:47:52,611:INFO:Importing untrained model
2024-04-15 09:47:52,611:INFO:Declaring custom model
2024-04-15 09:47:52,612:INFO:Logistic Regression Imported successfully
2024-04-15 09:47:52,612:INFO:Cross validation set to False
2024-04-15 09:47:52,612:INFO:Fitting Model
2024-04-15 09:47:52,628:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2512, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:47:52,628:INFO:create_model() successfully completed......................................
2024-04-15 09:47:52,913:INFO:_master_model_container: 2
2024-04-15 09:47:52,913:INFO:_display_container: 2
2024-04-15 09:47:52,913:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2512, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:47:52,913:INFO:compare_models() successfully completed......................................
2024-04-15 09:47:52,914:INFO:Initializing predict_model()
2024-04-15 09:47:52,914:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590390940>)
2024-04-15 09:47:52,914:INFO:Checking exceptions
2024-04-15 09:47:52,914:INFO:Preloading libraries
2024-04-15 09:47:53,504:INFO:Initializing predict_model()
2024-04-15 09:47:53,504:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2512, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586A5C310>)
2024-04-15 09:47:53,504:INFO:Checking exceptions
2024-04-15 09:47:53,504:INFO:Preloading libraries
2024-04-15 09:47:53,936:INFO:Initializing tune_model()
2024-04-15 09:47:53,936:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>)
2024-04-15 09:47:53,936:INFO:Checking exceptions
2024-04-15 09:47:53,947:INFO:Copying training dataset
2024-04-15 09:47:53,950:INFO:Checking base model
2024-04-15 09:47:53,951:INFO:Base model : Decision Tree Classifier
2024-04-15 09:47:53,954:INFO:Declaring metric variables
2024-04-15 09:47:53,956:INFO:Defining Hyperparameters
2024-04-15 09:47:54,249:INFO:Tuning with n_jobs=-1
2024-04-15 09:47:54,249:INFO:Initializing RandomizedSearchCV
2024-04-15 09:47:54,500:INFO:best_params: {'actual_estimator__min_samples_split': 7, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.0005, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 2, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:47:54,500:INFO:Hyperparameter search completed
2024-04-15 09:47:54,500:INFO:SubProcess create_model() called ==================================
2024-04-15 09:47:54,501:INFO:Initializing create_model()
2024-04-15 09:47:54,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C588A70370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 7, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.0005, 'max_features': 1.0, 'max_depth': 2, 'criterion': 'entropy'})
2024-04-15 09:47:54,501:INFO:Checking exceptions
2024-04-15 09:47:54,501:INFO:Importing libraries
2024-04-15 09:47:54,501:INFO:Copying training dataset
2024-04-15 09:47:54,507:INFO:Defining folds
2024-04-15 09:47:54,507:INFO:Declaring metric variables
2024-04-15 09:47:54,510:INFO:Importing untrained model
2024-04-15 09:47:54,510:INFO:Declaring custom model
2024-04-15 09:47:54,513:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:54,518:INFO:Starting cross validation
2024-04-15 09:47:54,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:47:54,608:INFO:Calculating mean and std
2024-04-15 09:47:54,609:INFO:Creating metrics dataframe
2024-04-15 09:47:54,613:INFO:Finalizing model
2024-04-15 09:47:54,636:INFO:Uploading results into container
2024-04-15 09:47:54,637:INFO:Uploading model into container now
2024-04-15 09:47:54,637:INFO:_master_model_container: 3
2024-04-15 09:47:54,637:INFO:_display_container: 5
2024-04-15 09:47:54,638:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=2, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.0005, min_samples_leaf=4,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best')
2024-04-15 09:47:54,638:INFO:create_model() successfully completed......................................
2024-04-15 09:47:54,920:INFO:SubProcess create_model() end ==================================
2024-04-15 09:47:54,921:INFO:choose_better activated
2024-04-15 09:47:54,923:INFO:SubProcess create_model() called ==================================
2024-04-15 09:47:54,924:INFO:Initializing create_model()
2024-04-15 09:47:54,924:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:54,924:INFO:Checking exceptions
2024-04-15 09:47:54,925:INFO:Importing libraries
2024-04-15 09:47:54,925:INFO:Copying training dataset
2024-04-15 09:47:54,929:INFO:Defining folds
2024-04-15 09:47:54,929:INFO:Declaring metric variables
2024-04-15 09:47:54,929:INFO:Importing untrained model
2024-04-15 09:47:54,929:INFO:Declaring custom model
2024-04-15 09:47:54,930:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:54,930:INFO:Starting cross validation
2024-04-15 09:47:54,930:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:47:55,069:INFO:Calculating mean and std
2024-04-15 09:47:55,069:INFO:Creating metrics dataframe
2024-04-15 09:47:55,071:INFO:Finalizing model
2024-04-15 09:47:55,126:INFO:Uploading results into container
2024-04-15 09:47:55,127:INFO:Uploading model into container now
2024-04-15 09:47:55,127:INFO:_master_model_container: 4
2024-04-15 09:47:55,127:INFO:_display_container: 6
2024-04-15 09:47:55,127:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best')
2024-04-15 09:47:55,127:INFO:create_model() successfully completed......................................
2024-04-15 09:47:55,420:INFO:SubProcess create_model() end ==================================
2024-04-15 09:47:55,422:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best') result for F1 is 0.5433
2024-04-15 09:47:55,423:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=2, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.0005, min_samples_leaf=4,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best') result for F1 is 0.4516
2024-04-15 09:47:55,423:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best') is best model
2024-04-15 09:47:55,423:INFO:choose_better completed
2024-04-15 09:47:55,424:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:47:55,432:INFO:_master_model_container: 4
2024-04-15 09:47:55,432:INFO:_display_container: 5
2024-04-15 09:47:55,433:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best')
2024-04-15 09:47:55,433:INFO:tune_model() successfully completed......................................
2024-04-15 09:47:55,772:INFO:Initializing predict_model()
2024-04-15 09:47:55,773:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58C242C10>)
2024-04-15 09:47:55,773:INFO:Checking exceptions
2024-04-15 09:47:55,773:INFO:Preloading libraries
2024-04-15 09:47:56,142:INFO:Initializing finalize_model()
2024-04-15 09:47:56,142:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:47:56,143:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best')
2024-04-15 09:47:56,145:INFO:Initializing create_model()
2024-04-15 09:47:56,145:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901C7E80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2512, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:47:56,145:INFO:Checking exceptions
2024-04-15 09:47:56,147:INFO:Importing libraries
2024-04-15 09:47:56,147:INFO:Copying training dataset
2024-04-15 09:47:56,147:INFO:Defining folds
2024-04-15 09:47:56,147:INFO:Declaring metric variables
2024-04-15 09:47:56,147:INFO:Importing untrained model
2024-04-15 09:47:56,147:INFO:Declaring custom model
2024-04-15 09:47:56,147:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:47:56,148:INFO:Cross validation set to False
2024-04-15 09:47:56,148:INFO:Fitting Model
2024-04-15 09:47:56,217:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2512, splitter='best'))],
         verbose=False)
2024-04-15 09:47:56,217:INFO:create_model() successfully completed......................................
2024-04-15 09:47:56,541:INFO:_master_model_container: 4
2024-04-15 09:47:56,541:INFO:_display_container: 6
2024-04-15 09:47:56,545:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2512, splitter='best'))],
         verbose=False)
2024-04-15 09:47:56,545:INFO:finalize_model() successfully completed......................................
2024-04-15 09:47:56,842:INFO:Initializing save_model()
2024-04-15 09:47:56,842:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2512, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:47:56,842:INFO:Adding model into prep_pipe
2024-04-15 09:47:56,843:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:47:56,847:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:47:56,850:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2512, splitter='best'))],
         verbose=False)
2024-04-15 09:47:56,850:INFO:save_model() successfully completed......................................
2024-04-15 09:47:57,131:INFO:Initializing load_model()
2024-04-15 09:47:57,132:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:47:57,205:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:48:00,065:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\407208176.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:50:11,617:INFO:PyCaret ClassificationExperiment
2024-04-15 09:50:11,617:INFO:Logging name: clf-default-name
2024-04-15 09:50:11,617:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:50:11,617:INFO:version 3.2.0
2024-04-15 09:50:11,617:INFO:Initializing setup()
2024-04-15 09:50:11,617:INFO:self.USI: d40c
2024-04-15 09:50:11,617:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:50:11,617:INFO:Checking environment
2024-04-15 09:50:11,617:INFO:python_version: 3.8.0
2024-04-15 09:50:11,617:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:50:11,617:INFO:machine: AMD64
2024-04-15 09:50:11,617:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:50:11,623:INFO:Memory: svmem(total=34301427712, available=18315481088, percent=46.6, used=15985946624, free=18315481088)
2024-04-15 09:50:11,623:INFO:Physical Core: 6
2024-04-15 09:50:11,623:INFO:Logical Core: 12
2024-04-15 09:50:11,623:INFO:Checking libraries
2024-04-15 09:50:11,623:INFO:System:
2024-04-15 09:50:11,623:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:50:11,623:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:50:11,623:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:50:11,623:INFO:PyCaret required dependencies:
2024-04-15 09:50:11,623:INFO:                 pip: 19.2.3
2024-04-15 09:50:11,623:INFO:          setuptools: 41.2.0
2024-04-15 09:50:11,624:INFO:             pycaret: 3.2.0
2024-04-15 09:50:11,624:INFO:             IPython: 8.12.3
2024-04-15 09:50:11,624:INFO:          ipywidgets: 8.1.2
2024-04-15 09:50:11,624:INFO:                tqdm: 4.66.2
2024-04-15 09:50:11,624:INFO:               numpy: 1.24.4
2024-04-15 09:50:11,624:INFO:              pandas: 1.5.3
2024-04-15 09:50:11,624:INFO:              jinja2: 3.1.3
2024-04-15 09:50:11,624:INFO:               scipy: 1.10.1
2024-04-15 09:50:11,624:INFO:              joblib: 1.3.2
2024-04-15 09:50:11,624:INFO:             sklearn: 1.2.0
2024-04-15 09:50:11,624:INFO:                pyod: 1.1.3
2024-04-15 09:50:11,624:INFO:            imblearn: 0.12.2
2024-04-15 09:50:11,624:INFO:   category_encoders: 2.6.3
2024-04-15 09:50:11,624:INFO:            lightgbm: 4.3.0
2024-04-15 09:50:11,624:INFO:               numba: 0.58.1
2024-04-15 09:50:11,624:INFO:            requests: 2.31.0
2024-04-15 09:50:11,624:INFO:          matplotlib: 3.6.0
2024-04-15 09:50:11,624:INFO:          scikitplot: 0.3.7
2024-04-15 09:50:11,624:INFO:         yellowbrick: 1.5
2024-04-15 09:50:11,624:INFO:              plotly: 5.20.0
2024-04-15 09:50:11,624:INFO:    plotly-resampler: Not installed
2024-04-15 09:50:11,624:INFO:             kaleido: 0.2.1
2024-04-15 09:50:11,624:INFO:           schemdraw: 0.15
2024-04-15 09:50:11,624:INFO:         statsmodels: 0.14.1
2024-04-15 09:50:11,624:INFO:              sktime: 0.21.1
2024-04-15 09:50:11,624:INFO:               tbats: 1.1.3
2024-04-15 09:50:11,624:INFO:            pmdarima: 2.0.4
2024-04-15 09:50:11,624:INFO:              psutil: 5.9.8
2024-04-15 09:50:11,624:INFO:          markupsafe: 2.1.5
2024-04-15 09:50:11,624:INFO:             pickle5: Not installed
2024-04-15 09:50:11,624:INFO:         cloudpickle: 3.0.0
2024-04-15 09:50:11,624:INFO:         deprecation: 2.1.0
2024-04-15 09:50:11,624:INFO:              xxhash: 3.4.1
2024-04-15 09:50:11,624:INFO:           wurlitzer: Not installed
2024-04-15 09:50:11,624:INFO:PyCaret optional dependencies:
2024-04-15 09:50:11,625:INFO:                shap: Not installed
2024-04-15 09:50:11,625:INFO:           interpret: Not installed
2024-04-15 09:50:11,625:INFO:                umap: Not installed
2024-04-15 09:50:11,625:INFO:     ydata_profiling: Not installed
2024-04-15 09:50:11,625:INFO:  explainerdashboard: Not installed
2024-04-15 09:50:11,625:INFO:             autoviz: Not installed
2024-04-15 09:50:11,625:INFO:           fairlearn: Not installed
2024-04-15 09:50:11,625:INFO:          deepchecks: Not installed
2024-04-15 09:50:11,625:INFO:             xgboost: Not installed
2024-04-15 09:50:11,625:INFO:            catboost: Not installed
2024-04-15 09:50:11,625:INFO:              kmodes: Not installed
2024-04-15 09:50:11,625:INFO:             mlxtend: Not installed
2024-04-15 09:50:11,625:INFO:       statsforecast: Not installed
2024-04-15 09:50:11,625:INFO:        tune_sklearn: Not installed
2024-04-15 09:50:11,625:INFO:                 ray: Not installed
2024-04-15 09:50:11,625:INFO:            hyperopt: Not installed
2024-04-15 09:50:11,625:INFO:              optuna: Not installed
2024-04-15 09:50:11,625:INFO:               skopt: Not installed
2024-04-15 09:50:11,625:INFO:              mlflow: 2.11.3
2024-04-15 09:50:11,625:INFO:              gradio: Not installed
2024-04-15 09:50:11,625:INFO:             fastapi: Not installed
2024-04-15 09:50:11,625:INFO:             uvicorn: Not installed
2024-04-15 09:50:11,625:INFO:              m2cgen: Not installed
2024-04-15 09:50:11,625:INFO:           evidently: Not installed
2024-04-15 09:50:11,625:INFO:               fugue: Not installed
2024-04-15 09:50:11,625:INFO:           streamlit: 1.33.0
2024-04-15 09:50:11,625:INFO:             prophet: Not installed
2024-04-15 09:50:11,625:INFO:None
2024-04-15 09:50:11,625:INFO:Set up data.
2024-04-15 09:50:11,630:INFO:Set up folding strategy.
2024-04-15 09:50:11,630:INFO:Set up train/test split.
2024-04-15 09:50:11,630:INFO:Set up data.
2024-04-15 09:50:11,634:INFO:Set up index.
2024-04-15 09:50:11,634:INFO:Assigning column types.
2024-04-15 09:50:11,636:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:50:11,677:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:50:11,678:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:11,702:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,702:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,739:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:50:11,740:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:11,763:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,763:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,764:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:50:11,803:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:11,829:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,829:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,865:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:11,889:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,889:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,889:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:50:11,950:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:11,951:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,009:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,010:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,011:INFO:Preparing preprocessing pipeline...
2024-04-15 09:50:12,012:INFO:Set up simple imputation.
2024-04-15 09:50:12,013:INFO:Set up feature normalization.
2024-04-15 09:50:12,030:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:50:12,033:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:50:12,033:INFO:Creating final display dataframe.
2024-04-15 09:50:12,095:INFO:Setup _display_container:                     Description             Value
0                    Session id              2244
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              d40c
2024-04-15 09:50:12,158:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,159:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,219:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,219:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:12,219:INFO:setup() successfully completed in 0.6s...............
2024-04-15 09:50:12,220:INFO:Initializing compare_models()
2024-04-15 09:50:12,220:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:50:12,220:INFO:Checking exceptions
2024-04-15 09:50:12,223:INFO:Preparing display monitor
2024-04-15 09:50:12,240:INFO:Initializing Logistic Regression
2024-04-15 09:50:12,240:INFO:Total runtime is 1.666545867919922e-05 minutes
2024-04-15 09:50:12,242:INFO:SubProcess create_model() called ==================================
2024-04-15 09:50:12,243:INFO:Initializing create_model()
2024-04-15 09:50:12,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C591EF3370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:12,243:INFO:Checking exceptions
2024-04-15 09:50:12,243:INFO:Importing libraries
2024-04-15 09:50:12,243:INFO:Copying training dataset
2024-04-15 09:50:12,249:INFO:Defining folds
2024-04-15 09:50:12,249:INFO:Declaring metric variables
2024-04-15 09:50:12,253:INFO:Importing untrained model
2024-04-15 09:50:12,256:INFO:Logistic Regression Imported successfully
2024-04-15 09:50:12,261:INFO:Starting cross validation
2024-04-15 09:50:12,262:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:50:12,348:INFO:Calculating mean and std
2024-04-15 09:50:12,349:INFO:Creating metrics dataframe
2024-04-15 09:50:12,353:INFO:Uploading results into container
2024-04-15 09:50:12,353:INFO:Uploading model into container now
2024-04-15 09:50:12,353:INFO:_master_model_container: 1
2024-04-15 09:50:12,353:INFO:_display_container: 2
2024-04-15 09:50:12,354:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2244, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:50:12,354:INFO:create_model() successfully completed......................................
2024-04-15 09:50:12,706:INFO:SubProcess create_model() end ==================================
2024-04-15 09:50:12,706:INFO:Creating metrics dataframe
2024-04-15 09:50:12,713:INFO:Initializing Decision Tree Classifier
2024-04-15 09:50:12,713:INFO:Total runtime is 0.007901775836944581 minutes
2024-04-15 09:50:12,716:INFO:SubProcess create_model() called ==================================
2024-04-15 09:50:12,716:INFO:Initializing create_model()
2024-04-15 09:50:12,716:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C591EF3370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:12,716:INFO:Checking exceptions
2024-04-15 09:50:12,716:INFO:Importing libraries
2024-04-15 09:50:12,716:INFO:Copying training dataset
2024-04-15 09:50:12,721:INFO:Defining folds
2024-04-15 09:50:12,721:INFO:Declaring metric variables
2024-04-15 09:50:12,723:INFO:Importing untrained model
2024-04-15 09:50:12,727:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:12,733:INFO:Starting cross validation
2024-04-15 09:50:12,734:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:50:12,860:INFO:Calculating mean and std
2024-04-15 09:50:12,860:INFO:Creating metrics dataframe
2024-04-15 09:50:12,863:INFO:Uploading results into container
2024-04-15 09:50:12,864:INFO:Uploading model into container now
2024-04-15 09:50:12,864:INFO:_master_model_container: 2
2024-04-15 09:50:12,864:INFO:_display_container: 2
2024-04-15 09:50:12,864:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best')
2024-04-15 09:50:12,864:INFO:create_model() successfully completed......................................
2024-04-15 09:50:13,150:INFO:SubProcess create_model() end ==================================
2024-04-15 09:50:13,151:INFO:Creating metrics dataframe
2024-04-15 09:50:13,163:INFO:Initializing create_model()
2024-04-15 09:50:13,164:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:13,164:INFO:Checking exceptions
2024-04-15 09:50:13,165:INFO:Importing libraries
2024-04-15 09:50:13,166:INFO:Copying training dataset
2024-04-15 09:50:13,169:INFO:Defining folds
2024-04-15 09:50:13,169:INFO:Declaring metric variables
2024-04-15 09:50:13,170:INFO:Importing untrained model
2024-04-15 09:50:13,170:INFO:Declaring custom model
2024-04-15 09:50:13,170:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:13,171:INFO:Cross validation set to False
2024-04-15 09:50:13,171:INFO:Fitting Model
2024-04-15 09:50:13,224:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best')
2024-04-15 09:50:13,224:INFO:create_model() successfully completed......................................
2024-04-15 09:50:13,534:INFO:Initializing create_model()
2024-04-15 09:50:13,534:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2244, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:13,534:INFO:Checking exceptions
2024-04-15 09:50:13,535:INFO:Importing libraries
2024-04-15 09:50:13,535:INFO:Copying training dataset
2024-04-15 09:50:13,539:INFO:Defining folds
2024-04-15 09:50:13,539:INFO:Declaring metric variables
2024-04-15 09:50:13,539:INFO:Importing untrained model
2024-04-15 09:50:13,539:INFO:Declaring custom model
2024-04-15 09:50:13,539:INFO:Logistic Regression Imported successfully
2024-04-15 09:50:13,540:INFO:Cross validation set to False
2024-04-15 09:50:13,540:INFO:Fitting Model
2024-04-15 09:50:13,556:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2244, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:50:13,556:INFO:create_model() successfully completed......................................
2024-04-15 09:50:13,840:INFO:_master_model_container: 2
2024-04-15 09:50:13,840:INFO:_display_container: 2
2024-04-15 09:50:13,841:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2244, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:50:13,841:INFO:compare_models() successfully completed......................................
2024-04-15 09:50:13,842:INFO:Initializing predict_model()
2024-04-15 09:50:13,842:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58C7AE310>)
2024-04-15 09:50:13,842:INFO:Checking exceptions
2024-04-15 09:50:13,842:INFO:Preloading libraries
2024-04-15 09:50:14,299:INFO:Initializing predict_model()
2024-04-15 09:50:14,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2244, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586BC74C0>)
2024-04-15 09:50:14,299:INFO:Checking exceptions
2024-04-15 09:50:14,299:INFO:Preloading libraries
2024-04-15 09:50:14,733:INFO:Initializing tune_model()
2024-04-15 09:50:14,733:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>)
2024-04-15 09:50:14,733:INFO:Checking exceptions
2024-04-15 09:50:14,746:INFO:Copying training dataset
2024-04-15 09:50:14,750:INFO:Checking base model
2024-04-15 09:50:14,750:INFO:Base model : Decision Tree Classifier
2024-04-15 09:50:14,753:INFO:Declaring metric variables
2024-04-15 09:50:14,757:INFO:Defining Hyperparameters
2024-04-15 09:50:15,088:INFO:Tuning with n_jobs=-1
2024-04-15 09:50:15,088:INFO:Initializing RandomizedSearchCV
2024-04-15 09:50:15,313:INFO:best_params: {'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.0005, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'gini'}
2024-04-15 09:50:15,313:INFO:Hyperparameter search completed
2024-04-15 09:50:15,314:INFO:SubProcess create_model() called ==================================
2024-04-15 09:50:15,314:INFO:Initializing create_model()
2024-04-15 09:50:15,314:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5856B8400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 5, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.0005, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'gini'})
2024-04-15 09:50:15,314:INFO:Checking exceptions
2024-04-15 09:50:15,314:INFO:Importing libraries
2024-04-15 09:50:15,314:INFO:Copying training dataset
2024-04-15 09:50:15,320:INFO:Defining folds
2024-04-15 09:50:15,320:INFO:Declaring metric variables
2024-04-15 09:50:15,324:INFO:Importing untrained model
2024-04-15 09:50:15,324:INFO:Declaring custom model
2024-04-15 09:50:15,328:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:15,334:INFO:Starting cross validation
2024-04-15 09:50:15,335:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:50:15,438:INFO:Calculating mean and std
2024-04-15 09:50:15,439:INFO:Creating metrics dataframe
2024-04-15 09:50:15,444:INFO:Finalizing model
2024-04-15 09:50:15,465:INFO:Uploading results into container
2024-04-15 09:50:15,465:INFO:Uploading model into container now
2024-04-15 09:50:15,466:INFO:_master_model_container: 3
2024-04-15 09:50:15,466:INFO:_display_container: 5
2024-04-15 09:50:15,467:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0005, min_samples_leaf=4,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best')
2024-04-15 09:50:15,467:INFO:create_model() successfully completed......................................
2024-04-15 09:50:15,769:INFO:SubProcess create_model() end ==================================
2024-04-15 09:50:15,769:INFO:choose_better activated
2024-04-15 09:50:15,773:INFO:SubProcess create_model() called ==================================
2024-04-15 09:50:15,773:INFO:Initializing create_model()
2024-04-15 09:50:15,773:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:15,773:INFO:Checking exceptions
2024-04-15 09:50:15,775:INFO:Importing libraries
2024-04-15 09:50:15,775:INFO:Copying training dataset
2024-04-15 09:50:15,779:INFO:Defining folds
2024-04-15 09:50:15,779:INFO:Declaring metric variables
2024-04-15 09:50:15,779:INFO:Importing untrained model
2024-04-15 09:50:15,779:INFO:Declaring custom model
2024-04-15 09:50:15,780:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:15,780:INFO:Starting cross validation
2024-04-15 09:50:15,780:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:50:15,914:INFO:Calculating mean and std
2024-04-15 09:50:15,914:INFO:Creating metrics dataframe
2024-04-15 09:50:15,916:INFO:Finalizing model
2024-04-15 09:50:15,970:INFO:Uploading results into container
2024-04-15 09:50:15,971:INFO:Uploading model into container now
2024-04-15 09:50:15,971:INFO:_master_model_container: 4
2024-04-15 09:50:15,971:INFO:_display_container: 6
2024-04-15 09:50:15,971:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best')
2024-04-15 09:50:15,971:INFO:create_model() successfully completed......................................
2024-04-15 09:50:16,250:INFO:SubProcess create_model() end ==================================
2024-04-15 09:50:16,250:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best') result for F1 is 0.5425
2024-04-15 09:50:16,251:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0005, min_samples_leaf=4,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best') result for F1 is 0.4982
2024-04-15 09:50:16,251:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best') is best model
2024-04-15 09:50:16,251:INFO:choose_better completed
2024-04-15 09:50:16,251:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:50:16,259:INFO:_master_model_container: 4
2024-04-15 09:50:16,259:INFO:_display_container: 5
2024-04-15 09:50:16,260:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best')
2024-04-15 09:50:16,260:INFO:tune_model() successfully completed......................................
2024-04-15 09:50:16,550:INFO:Initializing predict_model()
2024-04-15 09:50:16,550:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591F9B550>)
2024-04-15 09:50:16,550:INFO:Checking exceptions
2024-04-15 09:50:16,550:INFO:Preloading libraries
2024-04-15 09:50:16,917:INFO:Initializing finalize_model()
2024-04-15 09:50:16,917:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:50:16,917:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best')
2024-04-15 09:50:16,920:INFO:Initializing create_model()
2024-04-15 09:50:16,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C588667CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2244, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:16,920:INFO:Checking exceptions
2024-04-15 09:50:16,921:INFO:Importing libraries
2024-04-15 09:50:16,921:INFO:Copying training dataset
2024-04-15 09:50:16,921:INFO:Defining folds
2024-04-15 09:50:16,921:INFO:Declaring metric variables
2024-04-15 09:50:16,921:INFO:Importing untrained model
2024-04-15 09:50:16,921:INFO:Declaring custom model
2024-04-15 09:50:16,922:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:16,923:INFO:Cross validation set to False
2024-04-15 09:50:16,923:INFO:Fitting Model
2024-04-15 09:50:16,986:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2244, splitter='best'))],
         verbose=False)
2024-04-15 09:50:16,986:INFO:create_model() successfully completed......................................
2024-04-15 09:50:17,273:INFO:_master_model_container: 4
2024-04-15 09:50:17,273:INFO:_display_container: 6
2024-04-15 09:50:17,277:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2244, splitter='best'))],
         verbose=False)
2024-04-15 09:50:17,277:INFO:finalize_model() successfully completed......................................
2024-04-15 09:50:17,584:INFO:Initializing save_model()
2024-04-15 09:50:17,585:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2244, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:50:17,585:INFO:Adding model into prep_pipe
2024-04-15 09:50:17,585:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:50:17,588:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:50:17,592:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=2244, splitter='best'))],
         verbose=False)
2024-04-15 09:50:17,592:INFO:save_model() successfully completed......................................
2024-04-15 09:50:17,883:INFO:Initializing load_model()
2024-04-15 09:50:17,883:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:50:17,958:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:50:20,910:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\4016548702.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:50:58,142:INFO:PyCaret ClassificationExperiment
2024-04-15 09:50:58,142:INFO:Logging name: clf-default-name
2024-04-15 09:50:58,143:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:50:58,143:INFO:version 3.2.0
2024-04-15 09:50:58,143:INFO:Initializing setup()
2024-04-15 09:50:58,143:INFO:self.USI: 73f7
2024-04-15 09:50:58,143:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:50:58,143:INFO:Checking environment
2024-04-15 09:50:58,143:INFO:python_version: 3.8.0
2024-04-15 09:50:58,143:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:50:58,143:INFO:machine: AMD64
2024-04-15 09:50:58,143:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:50:58,149:INFO:Memory: svmem(total=34301427712, available=18085736448, percent=47.3, used=16215691264, free=18085736448)
2024-04-15 09:50:58,149:INFO:Physical Core: 6
2024-04-15 09:50:58,149:INFO:Logical Core: 12
2024-04-15 09:50:58,149:INFO:Checking libraries
2024-04-15 09:50:58,149:INFO:System:
2024-04-15 09:50:58,149:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:50:58,149:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:50:58,149:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:50:58,149:INFO:PyCaret required dependencies:
2024-04-15 09:50:58,149:INFO:                 pip: 19.2.3
2024-04-15 09:50:58,149:INFO:          setuptools: 41.2.0
2024-04-15 09:50:58,149:INFO:             pycaret: 3.2.0
2024-04-15 09:50:58,150:INFO:             IPython: 8.12.3
2024-04-15 09:50:58,150:INFO:          ipywidgets: 8.1.2
2024-04-15 09:50:58,150:INFO:                tqdm: 4.66.2
2024-04-15 09:50:58,150:INFO:               numpy: 1.24.4
2024-04-15 09:50:58,150:INFO:              pandas: 1.5.3
2024-04-15 09:50:58,150:INFO:              jinja2: 3.1.3
2024-04-15 09:50:58,150:INFO:               scipy: 1.10.1
2024-04-15 09:50:58,150:INFO:              joblib: 1.3.2
2024-04-15 09:50:58,150:INFO:             sklearn: 1.2.0
2024-04-15 09:50:58,150:INFO:                pyod: 1.1.3
2024-04-15 09:50:58,150:INFO:            imblearn: 0.12.2
2024-04-15 09:50:58,150:INFO:   category_encoders: 2.6.3
2024-04-15 09:50:58,150:INFO:            lightgbm: 4.3.0
2024-04-15 09:50:58,150:INFO:               numba: 0.58.1
2024-04-15 09:50:58,150:INFO:            requests: 2.31.0
2024-04-15 09:50:58,150:INFO:          matplotlib: 3.6.0
2024-04-15 09:50:58,150:INFO:          scikitplot: 0.3.7
2024-04-15 09:50:58,150:INFO:         yellowbrick: 1.5
2024-04-15 09:50:58,150:INFO:              plotly: 5.20.0
2024-04-15 09:50:58,150:INFO:    plotly-resampler: Not installed
2024-04-15 09:50:58,150:INFO:             kaleido: 0.2.1
2024-04-15 09:50:58,150:INFO:           schemdraw: 0.15
2024-04-15 09:50:58,150:INFO:         statsmodels: 0.14.1
2024-04-15 09:50:58,150:INFO:              sktime: 0.21.1
2024-04-15 09:50:58,150:INFO:               tbats: 1.1.3
2024-04-15 09:50:58,150:INFO:            pmdarima: 2.0.4
2024-04-15 09:50:58,150:INFO:              psutil: 5.9.8
2024-04-15 09:50:58,150:INFO:          markupsafe: 2.1.5
2024-04-15 09:50:58,150:INFO:             pickle5: Not installed
2024-04-15 09:50:58,150:INFO:         cloudpickle: 3.0.0
2024-04-15 09:50:58,150:INFO:         deprecation: 2.1.0
2024-04-15 09:50:58,150:INFO:              xxhash: 3.4.1
2024-04-15 09:50:58,150:INFO:           wurlitzer: Not installed
2024-04-15 09:50:58,150:INFO:PyCaret optional dependencies:
2024-04-15 09:50:58,150:INFO:                shap: Not installed
2024-04-15 09:50:58,150:INFO:           interpret: Not installed
2024-04-15 09:50:58,150:INFO:                umap: Not installed
2024-04-15 09:50:58,150:INFO:     ydata_profiling: Not installed
2024-04-15 09:50:58,150:INFO:  explainerdashboard: Not installed
2024-04-15 09:50:58,150:INFO:             autoviz: Not installed
2024-04-15 09:50:58,151:INFO:           fairlearn: Not installed
2024-04-15 09:50:58,151:INFO:          deepchecks: Not installed
2024-04-15 09:50:58,151:INFO:             xgboost: Not installed
2024-04-15 09:50:58,151:INFO:            catboost: Not installed
2024-04-15 09:50:58,151:INFO:              kmodes: Not installed
2024-04-15 09:50:58,151:INFO:             mlxtend: Not installed
2024-04-15 09:50:58,151:INFO:       statsforecast: Not installed
2024-04-15 09:50:58,151:INFO:        tune_sklearn: Not installed
2024-04-15 09:50:58,151:INFO:                 ray: Not installed
2024-04-15 09:50:58,151:INFO:            hyperopt: Not installed
2024-04-15 09:50:58,151:INFO:              optuna: Not installed
2024-04-15 09:50:58,151:INFO:               skopt: Not installed
2024-04-15 09:50:58,151:INFO:              mlflow: 2.11.3
2024-04-15 09:50:58,151:INFO:              gradio: Not installed
2024-04-15 09:50:58,151:INFO:             fastapi: Not installed
2024-04-15 09:50:58,151:INFO:             uvicorn: Not installed
2024-04-15 09:50:58,151:INFO:              m2cgen: Not installed
2024-04-15 09:50:58,151:INFO:           evidently: Not installed
2024-04-15 09:50:58,151:INFO:               fugue: Not installed
2024-04-15 09:50:58,151:INFO:           streamlit: 1.33.0
2024-04-15 09:50:58,151:INFO:             prophet: Not installed
2024-04-15 09:50:58,151:INFO:None
2024-04-15 09:50:58,151:INFO:Set up data.
2024-04-15 09:50:58,156:INFO:Set up folding strategy.
2024-04-15 09:50:58,156:INFO:Set up train/test split.
2024-04-15 09:50:58,156:INFO:Set up data.
2024-04-15 09:50:58,159:INFO:Set up index.
2024-04-15 09:50:58,160:INFO:Assigning column types.
2024-04-15 09:50:58,162:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:50:58,201:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:50:58,202:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:58,229:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,229:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,265:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:50:58,266:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:58,288:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,288:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,288:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:50:58,325:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:58,347:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,347:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,383:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:50:58,405:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,405:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,406:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:50:58,461:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,461:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,518:INFO:Preparing preprocessing pipeline...
2024-04-15 09:50:58,519:INFO:Set up simple imputation.
2024-04-15 09:50:58,519:INFO:Set up feature normalization.
2024-04-15 09:50:58,534:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:50:58,537:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:50:58,538:INFO:Creating final display dataframe.
2024-04-15 09:50:58,595:INFO:Setup _display_container:                     Description             Value
0                    Session id              1672
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              73f7
2024-04-15 09:50:58,657:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,722:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:50:58,723:INFO:setup() successfully completed in 0.58s...............
2024-04-15 09:50:58,723:INFO:Initializing compare_models()
2024-04-15 09:50:58,723:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:50:58,723:INFO:Checking exceptions
2024-04-15 09:50:58,726:INFO:Preparing display monitor
2024-04-15 09:50:58,740:INFO:Initializing Logistic Regression
2024-04-15 09:50:58,740:INFO:Total runtime is 0.0 minutes
2024-04-15 09:50:58,743:INFO:SubProcess create_model() called ==================================
2024-04-15 09:50:58,743:INFO:Initializing create_model()
2024-04-15 09:50:58,743:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58FF41100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:58,743:INFO:Checking exceptions
2024-04-15 09:50:58,743:INFO:Importing libraries
2024-04-15 09:50:58,743:INFO:Copying training dataset
2024-04-15 09:50:58,748:INFO:Defining folds
2024-04-15 09:50:58,748:INFO:Declaring metric variables
2024-04-15 09:50:58,751:INFO:Importing untrained model
2024-04-15 09:50:58,754:INFO:Logistic Regression Imported successfully
2024-04-15 09:50:58,759:INFO:Starting cross validation
2024-04-15 09:50:58,760:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:50:58,841:INFO:Calculating mean and std
2024-04-15 09:50:58,842:INFO:Creating metrics dataframe
2024-04-15 09:50:58,844:INFO:Uploading results into container
2024-04-15 09:50:58,845:INFO:Uploading model into container now
2024-04-15 09:50:58,845:INFO:_master_model_container: 1
2024-04-15 09:50:58,845:INFO:_display_container: 2
2024-04-15 09:50:58,845:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:50:58,845:INFO:create_model() successfully completed......................................
2024-04-15 09:50:59,113:INFO:SubProcess create_model() end ==================================
2024-04-15 09:50:59,113:INFO:Creating metrics dataframe
2024-04-15 09:50:59,120:INFO:Initializing Decision Tree Classifier
2024-04-15 09:50:59,120:INFO:Total runtime is 0.006329182783762614 minutes
2024-04-15 09:50:59,123:INFO:SubProcess create_model() called ==================================
2024-04-15 09:50:59,123:INFO:Initializing create_model()
2024-04-15 09:50:59,123:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58FF41100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:59,123:INFO:Checking exceptions
2024-04-15 09:50:59,123:INFO:Importing libraries
2024-04-15 09:50:59,124:INFO:Copying training dataset
2024-04-15 09:50:59,127:INFO:Defining folds
2024-04-15 09:50:59,127:INFO:Declaring metric variables
2024-04-15 09:50:59,130:INFO:Importing untrained model
2024-04-15 09:50:59,132:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:59,136:INFO:Starting cross validation
2024-04-15 09:50:59,136:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:50:59,271:INFO:Calculating mean and std
2024-04-15 09:50:59,272:INFO:Creating metrics dataframe
2024-04-15 09:50:59,274:INFO:Uploading results into container
2024-04-15 09:50:59,275:INFO:Uploading model into container now
2024-04-15 09:50:59,275:INFO:_master_model_container: 2
2024-04-15 09:50:59,275:INFO:_display_container: 2
2024-04-15 09:50:59,275:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best')
2024-04-15 09:50:59,275:INFO:create_model() successfully completed......................................
2024-04-15 09:50:59,569:INFO:SubProcess create_model() end ==================================
2024-04-15 09:50:59,569:INFO:Creating metrics dataframe
2024-04-15 09:50:59,583:INFO:Initializing create_model()
2024-04-15 09:50:59,583:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:59,583:INFO:Checking exceptions
2024-04-15 09:50:59,585:INFO:Importing libraries
2024-04-15 09:50:59,585:INFO:Copying training dataset
2024-04-15 09:50:59,589:INFO:Defining folds
2024-04-15 09:50:59,589:INFO:Declaring metric variables
2024-04-15 09:50:59,589:INFO:Importing untrained model
2024-04-15 09:50:59,589:INFO:Declaring custom model
2024-04-15 09:50:59,590:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:50:59,590:INFO:Cross validation set to False
2024-04-15 09:50:59,590:INFO:Fitting Model
2024-04-15 09:50:59,644:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best')
2024-04-15 09:50:59,644:INFO:create_model() successfully completed......................................
2024-04-15 09:50:59,920:INFO:Initializing create_model()
2024-04-15 09:50:59,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:50:59,920:INFO:Checking exceptions
2024-04-15 09:50:59,921:INFO:Importing libraries
2024-04-15 09:50:59,921:INFO:Copying training dataset
2024-04-15 09:50:59,925:INFO:Defining folds
2024-04-15 09:50:59,925:INFO:Declaring metric variables
2024-04-15 09:50:59,925:INFO:Importing untrained model
2024-04-15 09:50:59,925:INFO:Declaring custom model
2024-04-15 09:50:59,926:INFO:Logistic Regression Imported successfully
2024-04-15 09:50:59,926:INFO:Cross validation set to False
2024-04-15 09:50:59,926:INFO:Fitting Model
2024-04-15 09:50:59,942:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:50:59,942:INFO:create_model() successfully completed......................................
2024-04-15 09:51:00,233:INFO:_master_model_container: 2
2024-04-15 09:51:00,233:INFO:_display_container: 2
2024-04-15 09:51:00,234:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:51:00,234:INFO:compare_models() successfully completed......................................
2024-04-15 09:51:00,235:INFO:Initializing predict_model()
2024-04-15 09:51:00,235:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591FC1C10>)
2024-04-15 09:51:00,235:INFO:Checking exceptions
2024-04-15 09:51:00,235:INFO:Preloading libraries
2024-04-15 09:51:00,735:INFO:Initializing predict_model()
2024-04-15 09:51:00,735:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586BC7F70>)
2024-04-15 09:51:00,735:INFO:Checking exceptions
2024-04-15 09:51:00,735:INFO:Preloading libraries
2024-04-15 09:51:01,162:INFO:Initializing tune_model()
2024-04-15 09:51:01,163:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>)
2024-04-15 09:51:01,163:INFO:Checking exceptions
2024-04-15 09:51:01,175:INFO:Copying training dataset
2024-04-15 09:51:01,179:INFO:Checking base model
2024-04-15 09:51:01,179:INFO:Base model : Decision Tree Classifier
2024-04-15 09:51:01,182:INFO:Declaring metric variables
2024-04-15 09:51:01,184:INFO:Defining Hyperparameters
2024-04-15 09:51:01,477:INFO:Tuning with n_jobs=-1
2024-04-15 09:51:01,478:INFO:Initializing RandomizedSearchCV
2024-04-15 09:51:01,688:INFO:best_params: {'actual_estimator__min_samples_split': 7, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.01, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 13, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:51:01,688:INFO:Hyperparameter search completed
2024-04-15 09:51:01,688:INFO:SubProcess create_model() called ==================================
2024-04-15 09:51:01,688:INFO:Initializing create_model()
2024-04-15 09:51:01,688:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5901F0E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 7, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.01, 'max_features': 'sqrt', 'max_depth': 13, 'criterion': 'entropy'})
2024-04-15 09:51:01,688:INFO:Checking exceptions
2024-04-15 09:51:01,689:INFO:Importing libraries
2024-04-15 09:51:01,689:INFO:Copying training dataset
2024-04-15 09:51:01,693:INFO:Defining folds
2024-04-15 09:51:01,693:INFO:Declaring metric variables
2024-04-15 09:51:01,696:INFO:Importing untrained model
2024-04-15 09:51:01,696:INFO:Declaring custom model
2024-04-15 09:51:01,699:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:01,704:INFO:Starting cross validation
2024-04-15 09:51:01,705:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:51:01,796:INFO:Calculating mean and std
2024-04-15 09:51:01,797:INFO:Creating metrics dataframe
2024-04-15 09:51:01,802:INFO:Finalizing model
2024-04-15 09:51:01,821:INFO:Uploading results into container
2024-04-15 09:51:01,821:INFO:Uploading model into container now
2024-04-15 09:51:01,822:INFO:_master_model_container: 3
2024-04-15 09:51:01,822:INFO:_display_container: 5
2024-04-15 09:51:01,822:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=13, max_features='sqrt', max_leaf_nodes=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best')
2024-04-15 09:51:01,822:INFO:create_model() successfully completed......................................
2024-04-15 09:51:02,107:INFO:SubProcess create_model() end ==================================
2024-04-15 09:51:02,107:INFO:choose_better activated
2024-04-15 09:51:02,111:INFO:SubProcess create_model() called ==================================
2024-04-15 09:51:02,111:INFO:Initializing create_model()
2024-04-15 09:51:02,112:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:02,112:INFO:Checking exceptions
2024-04-15 09:51:02,113:INFO:Importing libraries
2024-04-15 09:51:02,113:INFO:Copying training dataset
2024-04-15 09:51:02,117:INFO:Defining folds
2024-04-15 09:51:02,117:INFO:Declaring metric variables
2024-04-15 09:51:02,117:INFO:Importing untrained model
2024-04-15 09:51:02,117:INFO:Declaring custom model
2024-04-15 09:51:02,117:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:02,117:INFO:Starting cross validation
2024-04-15 09:51:02,118:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:51:02,268:INFO:Calculating mean and std
2024-04-15 09:51:02,268:INFO:Creating metrics dataframe
2024-04-15 09:51:02,270:INFO:Finalizing model
2024-04-15 09:51:02,329:INFO:Uploading results into container
2024-04-15 09:51:02,329:INFO:Uploading model into container now
2024-04-15 09:51:02,329:INFO:_master_model_container: 4
2024-04-15 09:51:02,330:INFO:_display_container: 6
2024-04-15 09:51:02,330:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best')
2024-04-15 09:51:02,330:INFO:create_model() successfully completed......................................
2024-04-15 09:51:02,613:INFO:SubProcess create_model() end ==================================
2024-04-15 09:51:02,614:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best') result for F1 is 0.5431
2024-04-15 09:51:02,614:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=13, max_features='sqrt', max_leaf_nodes=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=7, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best') result for F1 is 0.4756
2024-04-15 09:51:02,615:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best') is best model
2024-04-15 09:51:02,615:INFO:choose_better completed
2024-04-15 09:51:02,615:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:51:02,622:INFO:_master_model_container: 4
2024-04-15 09:51:02,622:INFO:_display_container: 5
2024-04-15 09:51:02,623:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best')
2024-04-15 09:51:02,623:INFO:tune_model() successfully completed......................................
2024-04-15 09:51:02,901:INFO:Initializing predict_model()
2024-04-15 09:51:02,901:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586A5C670>)
2024-04-15 09:51:02,901:INFO:Checking exceptions
2024-04-15 09:51:02,901:INFO:Preloading libraries
2024-04-15 09:51:03,265:INFO:Initializing finalize_model()
2024-04-15 09:51:03,265:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:51:03,265:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best')
2024-04-15 09:51:03,268:INFO:Initializing create_model()
2024-04-15 09:51:03,268:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5901308E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1672, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:03,268:INFO:Checking exceptions
2024-04-15 09:51:03,269:INFO:Importing libraries
2024-04-15 09:51:03,269:INFO:Copying training dataset
2024-04-15 09:51:03,269:INFO:Defining folds
2024-04-15 09:51:03,269:INFO:Declaring metric variables
2024-04-15 09:51:03,269:INFO:Importing untrained model
2024-04-15 09:51:03,269:INFO:Declaring custom model
2024-04-15 09:51:03,270:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:03,270:INFO:Cross validation set to False
2024-04-15 09:51:03,270:INFO:Fitting Model
2024-04-15 09:51:03,338:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=1672, splitter='best'))],
         verbose=False)
2024-04-15 09:51:03,338:INFO:create_model() successfully completed......................................
2024-04-15 09:51:03,617:INFO:_master_model_container: 4
2024-04-15 09:51:03,617:INFO:_display_container: 6
2024-04-15 09:51:03,622:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=1672, splitter='best'))],
         verbose=False)
2024-04-15 09:51:03,622:INFO:finalize_model() successfully completed......................................
2024-04-15 09:51:03,902:INFO:Initializing save_model()
2024-04-15 09:51:03,902:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=1672, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:51:03,902:INFO:Adding model into prep_pipe
2024-04-15 09:51:03,902:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:51:03,906:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:51:03,910:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=1672, splitter='best'))],
         verbose=False)
2024-04-15 09:51:03,910:INFO:save_model() successfully completed......................................
2024-04-15 09:51:04,195:INFO:Initializing load_model()
2024-04-15 09:51:04,195:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:51:04,266:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:51:07,164:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\435603779.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 09:51:39,877:INFO:PyCaret ClassificationExperiment
2024-04-15 09:51:39,877:INFO:Logging name: clf-default-name
2024-04-15 09:51:39,877:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 09:51:39,877:INFO:version 3.2.0
2024-04-15 09:51:39,877:INFO:Initializing setup()
2024-04-15 09:51:39,877:INFO:self.USI: 861f
2024-04-15 09:51:39,877:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 09:51:39,877:INFO:Checking environment
2024-04-15 09:51:39,877:INFO:python_version: 3.8.0
2024-04-15 09:51:39,877:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 09:51:39,877:INFO:machine: AMD64
2024-04-15 09:51:39,877:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 09:51:39,884:INFO:Memory: svmem(total=34301427712, available=18207510528, percent=46.9, used=16093917184, free=18207510528)
2024-04-15 09:51:39,884:INFO:Physical Core: 6
2024-04-15 09:51:39,885:INFO:Logical Core: 12
2024-04-15 09:51:39,885:INFO:Checking libraries
2024-04-15 09:51:39,885:INFO:System:
2024-04-15 09:51:39,885:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 09:51:39,885:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 09:51:39,885:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 09:51:39,885:INFO:PyCaret required dependencies:
2024-04-15 09:51:39,885:INFO:                 pip: 19.2.3
2024-04-15 09:51:39,885:INFO:          setuptools: 41.2.0
2024-04-15 09:51:39,885:INFO:             pycaret: 3.2.0
2024-04-15 09:51:39,885:INFO:             IPython: 8.12.3
2024-04-15 09:51:39,885:INFO:          ipywidgets: 8.1.2
2024-04-15 09:51:39,885:INFO:                tqdm: 4.66.2
2024-04-15 09:51:39,885:INFO:               numpy: 1.24.4
2024-04-15 09:51:39,885:INFO:              pandas: 1.5.3
2024-04-15 09:51:39,885:INFO:              jinja2: 3.1.3
2024-04-15 09:51:39,885:INFO:               scipy: 1.10.1
2024-04-15 09:51:39,885:INFO:              joblib: 1.3.2
2024-04-15 09:51:39,886:INFO:             sklearn: 1.2.0
2024-04-15 09:51:39,886:INFO:                pyod: 1.1.3
2024-04-15 09:51:39,886:INFO:            imblearn: 0.12.2
2024-04-15 09:51:39,886:INFO:   category_encoders: 2.6.3
2024-04-15 09:51:39,886:INFO:            lightgbm: 4.3.0
2024-04-15 09:51:39,886:INFO:               numba: 0.58.1
2024-04-15 09:51:39,886:INFO:            requests: 2.31.0
2024-04-15 09:51:39,886:INFO:          matplotlib: 3.6.0
2024-04-15 09:51:39,886:INFO:          scikitplot: 0.3.7
2024-04-15 09:51:39,886:INFO:         yellowbrick: 1.5
2024-04-15 09:51:39,886:INFO:              plotly: 5.20.0
2024-04-15 09:51:39,886:INFO:    plotly-resampler: Not installed
2024-04-15 09:51:39,886:INFO:             kaleido: 0.2.1
2024-04-15 09:51:39,886:INFO:           schemdraw: 0.15
2024-04-15 09:51:39,886:INFO:         statsmodels: 0.14.1
2024-04-15 09:51:39,886:INFO:              sktime: 0.21.1
2024-04-15 09:51:39,886:INFO:               tbats: 1.1.3
2024-04-15 09:51:39,886:INFO:            pmdarima: 2.0.4
2024-04-15 09:51:39,886:INFO:              psutil: 5.9.8
2024-04-15 09:51:39,886:INFO:          markupsafe: 2.1.5
2024-04-15 09:51:39,886:INFO:             pickle5: Not installed
2024-04-15 09:51:39,886:INFO:         cloudpickle: 3.0.0
2024-04-15 09:51:39,887:INFO:         deprecation: 2.1.0
2024-04-15 09:51:39,887:INFO:              xxhash: 3.4.1
2024-04-15 09:51:39,887:INFO:           wurlitzer: Not installed
2024-04-15 09:51:39,887:INFO:PyCaret optional dependencies:
2024-04-15 09:51:39,887:INFO:                shap: Not installed
2024-04-15 09:51:39,887:INFO:           interpret: Not installed
2024-04-15 09:51:39,887:INFO:                umap: Not installed
2024-04-15 09:51:39,887:INFO:     ydata_profiling: Not installed
2024-04-15 09:51:39,887:INFO:  explainerdashboard: Not installed
2024-04-15 09:51:39,887:INFO:             autoviz: Not installed
2024-04-15 09:51:39,887:INFO:           fairlearn: Not installed
2024-04-15 09:51:39,887:INFO:          deepchecks: Not installed
2024-04-15 09:51:39,887:INFO:             xgboost: Not installed
2024-04-15 09:51:39,887:INFO:            catboost: Not installed
2024-04-15 09:51:39,887:INFO:              kmodes: Not installed
2024-04-15 09:51:39,887:INFO:             mlxtend: Not installed
2024-04-15 09:51:39,887:INFO:       statsforecast: Not installed
2024-04-15 09:51:39,887:INFO:        tune_sklearn: Not installed
2024-04-15 09:51:39,887:INFO:                 ray: Not installed
2024-04-15 09:51:39,887:INFO:            hyperopt: Not installed
2024-04-15 09:51:39,887:INFO:              optuna: Not installed
2024-04-15 09:51:39,887:INFO:               skopt: Not installed
2024-04-15 09:51:39,887:INFO:              mlflow: 2.11.3
2024-04-15 09:51:39,887:INFO:              gradio: Not installed
2024-04-15 09:51:39,887:INFO:             fastapi: Not installed
2024-04-15 09:51:39,887:INFO:             uvicorn: Not installed
2024-04-15 09:51:39,887:INFO:              m2cgen: Not installed
2024-04-15 09:51:39,887:INFO:           evidently: Not installed
2024-04-15 09:51:39,887:INFO:               fugue: Not installed
2024-04-15 09:51:39,887:INFO:           streamlit: 1.33.0
2024-04-15 09:51:39,887:INFO:             prophet: Not installed
2024-04-15 09:51:39,887:INFO:None
2024-04-15 09:51:39,887:INFO:Set up data.
2024-04-15 09:51:39,891:INFO:Set up folding strategy.
2024-04-15 09:51:39,891:INFO:Set up train/test split.
2024-04-15 09:51:39,891:INFO:Set up data.
2024-04-15 09:51:39,895:INFO:Set up index.
2024-04-15 09:51:39,896:INFO:Assigning column types.
2024-04-15 09:51:39,898:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 09:51:39,934:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:51:39,934:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:51:39,956:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:39,957:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:39,992:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 09:51:39,993:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:51:40,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,016:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 09:51:40,053:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:51:40,076:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,076:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,113:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 09:51:40,135:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,135:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 09:51:40,194:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,194:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,255:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,255:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,256:INFO:Preparing preprocessing pipeline...
2024-04-15 09:51:40,257:INFO:Set up simple imputation.
2024-04-15 09:51:40,257:INFO:Set up feature normalization.
2024-04-15 09:51:40,275:INFO:Finished creating preprocessing pipeline.
2024-04-15 09:51:40,279:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 09:51:40,279:INFO:Creating final display dataframe.
2024-04-15 09:51:40,340:INFO:Setup _display_container:                     Description             Value
0                    Session id              5226
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              861f
2024-04-15 09:51:40,405:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,406:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,465:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,466:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 09:51:40,466:INFO:setup() successfully completed in 0.59s...............
2024-04-15 09:51:40,466:INFO:Initializing compare_models()
2024-04-15 09:51:40,466:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 09:51:40,467:INFO:Checking exceptions
2024-04-15 09:51:40,469:INFO:Preparing display monitor
2024-04-15 09:51:40,486:INFO:Initializing Logistic Regression
2024-04-15 09:51:40,487:INFO:Total runtime is 1.6669432322184246e-05 minutes
2024-04-15 09:51:40,489:INFO:SubProcess create_model() called ==================================
2024-04-15 09:51:40,489:INFO:Initializing create_model()
2024-04-15 09:51:40,489:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58FF6BC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:40,489:INFO:Checking exceptions
2024-04-15 09:51:40,490:INFO:Importing libraries
2024-04-15 09:51:40,490:INFO:Copying training dataset
2024-04-15 09:51:40,495:INFO:Defining folds
2024-04-15 09:51:40,495:INFO:Declaring metric variables
2024-04-15 09:51:40,499:INFO:Importing untrained model
2024-04-15 09:51:40,502:INFO:Logistic Regression Imported successfully
2024-04-15 09:51:40,523:INFO:Starting cross validation
2024-04-15 09:51:40,524:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:51:40,638:INFO:Calculating mean and std
2024-04-15 09:51:40,639:INFO:Creating metrics dataframe
2024-04-15 09:51:40,641:INFO:Uploading results into container
2024-04-15 09:51:40,642:INFO:Uploading model into container now
2024-04-15 09:51:40,642:INFO:_master_model_container: 1
2024-04-15 09:51:40,642:INFO:_display_container: 2
2024-04-15 09:51:40,642:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5226, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:51:40,642:INFO:create_model() successfully completed......................................
2024-04-15 09:51:40,909:INFO:SubProcess create_model() end ==================================
2024-04-15 09:51:40,909:INFO:Creating metrics dataframe
2024-04-15 09:51:40,916:INFO:Initializing Decision Tree Classifier
2024-04-15 09:51:40,916:INFO:Total runtime is 0.007168269157409668 minutes
2024-04-15 09:51:40,918:INFO:SubProcess create_model() called ==================================
2024-04-15 09:51:40,918:INFO:Initializing create_model()
2024-04-15 09:51:40,918:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58FF6BC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:40,918:INFO:Checking exceptions
2024-04-15 09:51:40,919:INFO:Importing libraries
2024-04-15 09:51:40,919:INFO:Copying training dataset
2024-04-15 09:51:40,922:INFO:Defining folds
2024-04-15 09:51:40,922:INFO:Declaring metric variables
2024-04-15 09:51:40,925:INFO:Importing untrained model
2024-04-15 09:51:40,927:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:40,932:INFO:Starting cross validation
2024-04-15 09:51:40,932:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:51:41,062:INFO:Calculating mean and std
2024-04-15 09:51:41,063:INFO:Creating metrics dataframe
2024-04-15 09:51:41,066:INFO:Uploading results into container
2024-04-15 09:51:41,066:INFO:Uploading model into container now
2024-04-15 09:51:41,067:INFO:_master_model_container: 2
2024-04-15 09:51:41,067:INFO:_display_container: 2
2024-04-15 09:51:41,067:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best')
2024-04-15 09:51:41,067:INFO:create_model() successfully completed......................................
2024-04-15 09:51:41,362:INFO:SubProcess create_model() end ==================================
2024-04-15 09:51:41,362:INFO:Creating metrics dataframe
2024-04-15 09:51:41,374:INFO:Initializing create_model()
2024-04-15 09:51:41,374:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:41,374:INFO:Checking exceptions
2024-04-15 09:51:41,376:INFO:Importing libraries
2024-04-15 09:51:41,377:INFO:Copying training dataset
2024-04-15 09:51:41,380:INFO:Defining folds
2024-04-15 09:51:41,380:INFO:Declaring metric variables
2024-04-15 09:51:41,380:INFO:Importing untrained model
2024-04-15 09:51:41,380:INFO:Declaring custom model
2024-04-15 09:51:41,381:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:41,381:INFO:Cross validation set to False
2024-04-15 09:51:41,382:INFO:Fitting Model
2024-04-15 09:51:41,435:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best')
2024-04-15 09:51:41,435:INFO:create_model() successfully completed......................................
2024-04-15 09:51:41,727:INFO:Initializing create_model()
2024-04-15 09:51:41,727:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5226, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:41,727:INFO:Checking exceptions
2024-04-15 09:51:41,729:INFO:Importing libraries
2024-04-15 09:51:41,729:INFO:Copying training dataset
2024-04-15 09:51:41,733:INFO:Defining folds
2024-04-15 09:51:41,733:INFO:Declaring metric variables
2024-04-15 09:51:41,733:INFO:Importing untrained model
2024-04-15 09:51:41,733:INFO:Declaring custom model
2024-04-15 09:51:41,733:INFO:Logistic Regression Imported successfully
2024-04-15 09:51:41,734:INFO:Cross validation set to False
2024-04-15 09:51:41,734:INFO:Fitting Model
2024-04-15 09:51:41,750:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5226, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 09:51:41,750:INFO:create_model() successfully completed......................................
2024-04-15 09:51:42,047:INFO:_master_model_container: 2
2024-04-15 09:51:42,047:INFO:_display_container: 2
2024-04-15 09:51:42,048:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5226, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 09:51:42,048:INFO:compare_models() successfully completed......................................
2024-04-15 09:51:42,049:INFO:Initializing predict_model()
2024-04-15 09:51:42,049:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C584DB73A0>)
2024-04-15 09:51:42,049:INFO:Checking exceptions
2024-04-15 09:51:42,049:INFO:Preloading libraries
2024-04-15 09:51:42,568:INFO:Initializing predict_model()
2024-04-15 09:51:42,568:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5226, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E49B430>)
2024-04-15 09:51:42,568:INFO:Checking exceptions
2024-04-15 09:51:42,568:INFO:Preloading libraries
2024-04-15 09:51:43,006:INFO:Initializing tune_model()
2024-04-15 09:51:43,006:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>)
2024-04-15 09:51:43,007:INFO:Checking exceptions
2024-04-15 09:51:43,019:INFO:Copying training dataset
2024-04-15 09:51:43,023:INFO:Checking base model
2024-04-15 09:51:43,023:INFO:Base model : Decision Tree Classifier
2024-04-15 09:51:43,026:INFO:Declaring metric variables
2024-04-15 09:51:43,029:INFO:Defining Hyperparameters
2024-04-15 09:51:43,336:INFO:Tuning with n_jobs=-1
2024-04-15 09:51:43,336:INFO:Initializing RandomizedSearchCV
2024-04-15 09:51:43,550:INFO:best_params: {'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 8, 'actual_estimator__criterion': 'entropy'}
2024-04-15 09:51:43,551:INFO:Hyperparameter search completed
2024-04-15 09:51:43,551:INFO:SubProcess create_model() called ==================================
2024-04-15 09:51:43,551:INFO:Initializing create_model()
2024-04-15 09:51:43,551:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58BC20850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 5, 'min_samples_leaf': 6, 'min_impurity_decrease': 0, 'max_features': 'log2', 'max_depth': 8, 'criterion': 'entropy'})
2024-04-15 09:51:43,551:INFO:Checking exceptions
2024-04-15 09:51:43,552:INFO:Importing libraries
2024-04-15 09:51:43,552:INFO:Copying training dataset
2024-04-15 09:51:43,557:INFO:Defining folds
2024-04-15 09:51:43,558:INFO:Declaring metric variables
2024-04-15 09:51:43,560:INFO:Importing untrained model
2024-04-15 09:51:43,561:INFO:Declaring custom model
2024-04-15 09:51:43,564:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:43,570:INFO:Starting cross validation
2024-04-15 09:51:43,572:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:51:43,661:INFO:Calculating mean and std
2024-04-15 09:51:43,662:INFO:Creating metrics dataframe
2024-04-15 09:51:43,666:INFO:Finalizing model
2024-04-15 09:51:43,692:INFO:Uploading results into container
2024-04-15 09:51:43,692:INFO:Uploading model into container now
2024-04-15 09:51:43,692:INFO:_master_model_container: 3
2024-04-15 09:51:43,693:INFO:_display_container: 5
2024-04-15 09:51:43,693:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=8, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best')
2024-04-15 09:51:43,693:INFO:create_model() successfully completed......................................
2024-04-15 09:51:44,029:INFO:SubProcess create_model() end ==================================
2024-04-15 09:51:44,029:INFO:choose_better activated
2024-04-15 09:51:44,033:INFO:SubProcess create_model() called ==================================
2024-04-15 09:51:44,034:INFO:Initializing create_model()
2024-04-15 09:51:44,034:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:44,034:INFO:Checking exceptions
2024-04-15 09:51:44,036:INFO:Importing libraries
2024-04-15 09:51:44,036:INFO:Copying training dataset
2024-04-15 09:51:44,039:INFO:Defining folds
2024-04-15 09:51:44,039:INFO:Declaring metric variables
2024-04-15 09:51:44,040:INFO:Importing untrained model
2024-04-15 09:51:44,040:INFO:Declaring custom model
2024-04-15 09:51:44,040:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:44,040:INFO:Starting cross validation
2024-04-15 09:51:44,041:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 09:51:44,187:INFO:Calculating mean and std
2024-04-15 09:51:44,187:INFO:Creating metrics dataframe
2024-04-15 09:51:44,189:INFO:Finalizing model
2024-04-15 09:51:44,244:INFO:Uploading results into container
2024-04-15 09:51:44,244:INFO:Uploading model into container now
2024-04-15 09:51:44,245:INFO:_master_model_container: 4
2024-04-15 09:51:44,245:INFO:_display_container: 6
2024-04-15 09:51:44,245:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best')
2024-04-15 09:51:44,245:INFO:create_model() successfully completed......................................
2024-04-15 09:51:44,563:INFO:SubProcess create_model() end ==================================
2024-04-15 09:51:44,563:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best') result for F1 is 0.543
2024-04-15 09:51:44,564:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=8, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best') result for F1 is 0.4714
2024-04-15 09:51:44,564:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best') is best model
2024-04-15 09:51:44,564:INFO:choose_better completed
2024-04-15 09:51:44,564:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 09:51:44,572:INFO:_master_model_container: 4
2024-04-15 09:51:44,572:INFO:_display_container: 5
2024-04-15 09:51:44,572:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best')
2024-04-15 09:51:44,572:INFO:tune_model() successfully completed......................................
2024-04-15 09:51:44,851:INFO:Initializing predict_model()
2024-04-15 09:51:44,852:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591E77AF0>)
2024-04-15 09:51:44,852:INFO:Checking exceptions
2024-04-15 09:51:44,852:INFO:Preloading libraries
2024-04-15 09:51:45,215:INFO:Initializing finalize_model()
2024-04-15 09:51:45,215:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 09:51:45,215:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best')
2024-04-15 09:51:45,217:INFO:Initializing create_model()
2024-04-15 09:51:45,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AEB100>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5226, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 09:51:45,217:INFO:Checking exceptions
2024-04-15 09:51:45,219:INFO:Importing libraries
2024-04-15 09:51:45,219:INFO:Copying training dataset
2024-04-15 09:51:45,219:INFO:Defining folds
2024-04-15 09:51:45,219:INFO:Declaring metric variables
2024-04-15 09:51:45,219:INFO:Importing untrained model
2024-04-15 09:51:45,219:INFO:Declaring custom model
2024-04-15 09:51:45,219:INFO:Decision Tree Classifier Imported successfully
2024-04-15 09:51:45,220:INFO:Cross validation set to False
2024-04-15 09:51:45,220:INFO:Fitting Model
2024-04-15 09:51:45,288:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5226, splitter='best'))],
         verbose=False)
2024-04-15 09:51:45,288:INFO:create_model() successfully completed......................................
2024-04-15 09:51:45,580:INFO:_master_model_container: 4
2024-04-15 09:51:45,580:INFO:_display_container: 6
2024-04-15 09:51:45,583:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5226, splitter='best'))],
         verbose=False)
2024-04-15 09:51:45,584:INFO:finalize_model() successfully completed......................................
2024-04-15 09:51:45,872:INFO:Initializing save_model()
2024-04-15 09:51:45,872:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5226, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 09:51:45,872:INFO:Adding model into prep_pipe
2024-04-15 09:51:45,872:WARNING:Only Model saved as it was a pipeline.
2024-04-15 09:51:45,875:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 09:51:45,879:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5226, splitter='best'))],
         verbose=False)
2024-04-15 09:51:45,879:INFO:save_model() successfully completed......................................
2024-04-15 09:51:46,160:INFO:Initializing load_model()
2024-04-15 09:51:46,161:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 09:51:46,233:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 09:51:49,094:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3435238646.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 10:01:10,848:INFO:PyCaret ClassificationExperiment
2024-04-15 10:01:10,848:INFO:Logging name: clf-default-name
2024-04-15 10:01:10,848:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 10:01:10,848:INFO:version 3.2.0
2024-04-15 10:01:10,848:INFO:Initializing setup()
2024-04-15 10:01:10,848:INFO:self.USI: 32db
2024-04-15 10:01:10,848:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 10:01:10,848:INFO:Checking environment
2024-04-15 10:01:10,848:INFO:python_version: 3.8.0
2024-04-15 10:01:10,849:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 10:01:10,849:INFO:machine: AMD64
2024-04-15 10:01:10,849:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 10:01:10,855:INFO:Memory: svmem(total=34301427712, available=19221282816, percent=44.0, used=15080144896, free=19221282816)
2024-04-15 10:01:10,856:INFO:Physical Core: 6
2024-04-15 10:01:10,856:INFO:Logical Core: 12
2024-04-15 10:01:10,856:INFO:Checking libraries
2024-04-15 10:01:10,856:INFO:System:
2024-04-15 10:01:10,856:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 10:01:10,856:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 10:01:10,856:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 10:01:10,856:INFO:PyCaret required dependencies:
2024-04-15 10:01:10,856:INFO:                 pip: 19.2.3
2024-04-15 10:01:10,856:INFO:          setuptools: 41.2.0
2024-04-15 10:01:10,856:INFO:             pycaret: 3.2.0
2024-04-15 10:01:10,856:INFO:             IPython: 8.12.3
2024-04-15 10:01:10,856:INFO:          ipywidgets: 8.1.2
2024-04-15 10:01:10,856:INFO:                tqdm: 4.66.2
2024-04-15 10:01:10,856:INFO:               numpy: 1.24.4
2024-04-15 10:01:10,856:INFO:              pandas: 1.5.3
2024-04-15 10:01:10,856:INFO:              jinja2: 3.1.3
2024-04-15 10:01:10,856:INFO:               scipy: 1.10.1
2024-04-15 10:01:10,856:INFO:              joblib: 1.3.2
2024-04-15 10:01:10,856:INFO:             sklearn: 1.2.0
2024-04-15 10:01:10,856:INFO:                pyod: 1.1.3
2024-04-15 10:01:10,856:INFO:            imblearn: 0.12.2
2024-04-15 10:01:10,856:INFO:   category_encoders: 2.6.3
2024-04-15 10:01:10,856:INFO:            lightgbm: 4.3.0
2024-04-15 10:01:10,857:INFO:               numba: 0.58.1
2024-04-15 10:01:10,857:INFO:            requests: 2.31.0
2024-04-15 10:01:10,857:INFO:          matplotlib: 3.6.0
2024-04-15 10:01:10,857:INFO:          scikitplot: 0.3.7
2024-04-15 10:01:10,857:INFO:         yellowbrick: 1.5
2024-04-15 10:01:10,857:INFO:              plotly: 5.20.0
2024-04-15 10:01:10,857:INFO:    plotly-resampler: Not installed
2024-04-15 10:01:10,857:INFO:             kaleido: 0.2.1
2024-04-15 10:01:10,857:INFO:           schemdraw: 0.15
2024-04-15 10:01:10,857:INFO:         statsmodels: 0.14.1
2024-04-15 10:01:10,857:INFO:              sktime: 0.21.1
2024-04-15 10:01:10,857:INFO:               tbats: 1.1.3
2024-04-15 10:01:10,857:INFO:            pmdarima: 2.0.4
2024-04-15 10:01:10,857:INFO:              psutil: 5.9.8
2024-04-15 10:01:10,857:INFO:          markupsafe: 2.1.5
2024-04-15 10:01:10,857:INFO:             pickle5: Not installed
2024-04-15 10:01:10,857:INFO:         cloudpickle: 3.0.0
2024-04-15 10:01:10,857:INFO:         deprecation: 2.1.0
2024-04-15 10:01:10,857:INFO:              xxhash: 3.4.1
2024-04-15 10:01:10,857:INFO:           wurlitzer: Not installed
2024-04-15 10:01:10,857:INFO:PyCaret optional dependencies:
2024-04-15 10:01:10,857:INFO:                shap: Not installed
2024-04-15 10:01:10,857:INFO:           interpret: Not installed
2024-04-15 10:01:10,857:INFO:                umap: Not installed
2024-04-15 10:01:10,857:INFO:     ydata_profiling: Not installed
2024-04-15 10:01:10,857:INFO:  explainerdashboard: Not installed
2024-04-15 10:01:10,857:INFO:             autoviz: Not installed
2024-04-15 10:01:10,857:INFO:           fairlearn: Not installed
2024-04-15 10:01:10,857:INFO:          deepchecks: Not installed
2024-04-15 10:01:10,857:INFO:             xgboost: Not installed
2024-04-15 10:01:10,857:INFO:            catboost: Not installed
2024-04-15 10:01:10,857:INFO:              kmodes: Not installed
2024-04-15 10:01:10,857:INFO:             mlxtend: Not installed
2024-04-15 10:01:10,857:INFO:       statsforecast: Not installed
2024-04-15 10:01:10,857:INFO:        tune_sklearn: Not installed
2024-04-15 10:01:10,857:INFO:                 ray: Not installed
2024-04-15 10:01:10,857:INFO:            hyperopt: Not installed
2024-04-15 10:01:10,858:INFO:              optuna: Not installed
2024-04-15 10:01:10,858:INFO:               skopt: Not installed
2024-04-15 10:01:10,858:INFO:              mlflow: 2.11.3
2024-04-15 10:01:10,858:INFO:              gradio: Not installed
2024-04-15 10:01:10,858:INFO:             fastapi: Not installed
2024-04-15 10:01:10,858:INFO:             uvicorn: Not installed
2024-04-15 10:01:10,858:INFO:              m2cgen: Not installed
2024-04-15 10:01:10,858:INFO:           evidently: Not installed
2024-04-15 10:01:10,858:INFO:               fugue: Not installed
2024-04-15 10:01:10,858:INFO:           streamlit: 1.33.0
2024-04-15 10:01:10,858:INFO:             prophet: Not installed
2024-04-15 10:01:10,858:INFO:None
2024-04-15 10:01:10,858:INFO:Set up data.
2024-04-15 10:01:10,863:INFO:Set up folding strategy.
2024-04-15 10:01:10,863:INFO:Set up train/test split.
2024-04-15 10:01:10,863:INFO:Set up data.
2024-04-15 10:01:10,867:INFO:Set up index.
2024-04-15 10:01:10,867:INFO:Assigning column types.
2024-04-15 10:01:10,869:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 10:01:10,913:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:01:10,914:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:10,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:10,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:10,977:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:01:10,979:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:11,003:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,003:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,004:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 10:01:11,043:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:11,066:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,103:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:11,125:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,126:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,126:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 10:01:11,186:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,186:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,244:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,244:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,245:INFO:Preparing preprocessing pipeline...
2024-04-15 10:01:11,246:INFO:Set up simple imputation.
2024-04-15 10:01:11,246:INFO:Set up feature normalization.
2024-04-15 10:01:11,263:INFO:Finished creating preprocessing pipeline.
2024-04-15 10:01:11,266:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 10:01:11,266:INFO:Creating final display dataframe.
2024-04-15 10:01:11,332:INFO:Setup _display_container:                     Description             Value
0                    Session id              6124
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              32db
2024-04-15 10:01:11,397:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,397:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,455:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:11,455:INFO:setup() successfully completed in 0.61s...............
2024-04-15 10:01:11,456:INFO:Initializing compare_models()
2024-04-15 10:01:11,456:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 10:01:11,456:INFO:Checking exceptions
2024-04-15 10:01:11,458:INFO:Preparing display monitor
2024-04-15 10:01:11,474:INFO:Initializing Logistic Regression
2024-04-15 10:01:11,475:INFO:Total runtime is 1.6677379608154298e-05 minutes
2024-04-15 10:01:11,477:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:11,477:INFO:Initializing create_model()
2024-04-15 10:01:11,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C590243070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:11,478:INFO:Checking exceptions
2024-04-15 10:01:11,478:INFO:Importing libraries
2024-04-15 10:01:11,478:INFO:Copying training dataset
2024-04-15 10:01:11,482:INFO:Defining folds
2024-04-15 10:01:11,482:INFO:Declaring metric variables
2024-04-15 10:01:11,485:INFO:Importing untrained model
2024-04-15 10:01:11,488:INFO:Logistic Regression Imported successfully
2024-04-15 10:01:11,493:INFO:Starting cross validation
2024-04-15 10:01:11,494:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:13,832:INFO:Calculating mean and std
2024-04-15 10:01:13,834:INFO:Creating metrics dataframe
2024-04-15 10:01:13,837:INFO:Uploading results into container
2024-04-15 10:01:13,838:INFO:Uploading model into container now
2024-04-15 10:01:13,838:INFO:_master_model_container: 1
2024-04-15 10:01:13,838:INFO:_display_container: 2
2024-04-15 10:01:13,839:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6124, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:01:13,839:INFO:create_model() successfully completed......................................
2024-04-15 10:01:14,142:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:14,142:INFO:Creating metrics dataframe
2024-04-15 10:01:14,149:INFO:Initializing Decision Tree Classifier
2024-04-15 10:01:14,149:INFO:Total runtime is 0.04457674423853557 minutes
2024-04-15 10:01:14,151:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:14,151:INFO:Initializing create_model()
2024-04-15 10:01:14,151:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C590243070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:14,151:INFO:Checking exceptions
2024-04-15 10:01:14,151:INFO:Importing libraries
2024-04-15 10:01:14,151:INFO:Copying training dataset
2024-04-15 10:01:14,156:INFO:Defining folds
2024-04-15 10:01:14,156:INFO:Declaring metric variables
2024-04-15 10:01:14,159:INFO:Importing untrained model
2024-04-15 10:01:14,162:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:14,166:INFO:Starting cross validation
2024-04-15 10:01:14,167:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:17,079:INFO:Calculating mean and std
2024-04-15 10:01:17,083:INFO:Creating metrics dataframe
2024-04-15 10:01:17,090:INFO:Uploading results into container
2024-04-15 10:01:17,091:INFO:Uploading model into container now
2024-04-15 10:01:17,092:INFO:_master_model_container: 2
2024-04-15 10:01:17,092:INFO:_display_container: 2
2024-04-15 10:01:17,092:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best')
2024-04-15 10:01:17,092:INFO:create_model() successfully completed......................................
2024-04-15 10:01:17,427:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:17,427:INFO:Creating metrics dataframe
2024-04-15 10:01:17,440:INFO:Initializing create_model()
2024-04-15 10:01:17,441:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:17,441:INFO:Checking exceptions
2024-04-15 10:01:17,442:INFO:Importing libraries
2024-04-15 10:01:17,442:INFO:Copying training dataset
2024-04-15 10:01:17,446:INFO:Defining folds
2024-04-15 10:01:17,446:INFO:Declaring metric variables
2024-04-15 10:01:17,446:INFO:Importing untrained model
2024-04-15 10:01:17,446:INFO:Declaring custom model
2024-04-15 10:01:17,446:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:17,447:INFO:Cross validation set to False
2024-04-15 10:01:17,447:INFO:Fitting Model
2024-04-15 10:01:17,499:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best')
2024-04-15 10:01:17,499:INFO:create_model() successfully completed......................................
2024-04-15 10:01:17,770:INFO:Initializing create_model()
2024-04-15 10:01:17,770:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6124, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:17,770:INFO:Checking exceptions
2024-04-15 10:01:17,772:INFO:Importing libraries
2024-04-15 10:01:17,772:INFO:Copying training dataset
2024-04-15 10:01:17,776:INFO:Defining folds
2024-04-15 10:01:17,776:INFO:Declaring metric variables
2024-04-15 10:01:17,776:INFO:Importing untrained model
2024-04-15 10:01:17,776:INFO:Declaring custom model
2024-04-15 10:01:17,776:INFO:Logistic Regression Imported successfully
2024-04-15 10:01:17,777:INFO:Cross validation set to False
2024-04-15 10:01:17,777:INFO:Fitting Model
2024-04-15 10:01:17,794:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6124, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:01:17,794:INFO:create_model() successfully completed......................................
2024-04-15 10:01:18,073:INFO:_master_model_container: 2
2024-04-15 10:01:18,074:INFO:_display_container: 2
2024-04-15 10:01:18,074:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6124, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 10:01:18,074:INFO:compare_models() successfully completed......................................
2024-04-15 10:01:18,075:INFO:Initializing predict_model()
2024-04-15 10:01:18,075:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E562F70>)
2024-04-15 10:01:18,075:INFO:Checking exceptions
2024-04-15 10:01:18,075:INFO:Preloading libraries
2024-04-15 10:01:18,506:INFO:Initializing predict_model()
2024-04-15 10:01:18,506:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6124, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58DB714C0>)
2024-04-15 10:01:18,506:INFO:Checking exceptions
2024-04-15 10:01:18,506:INFO:Preloading libraries
2024-04-15 10:01:18,967:INFO:Initializing tune_model()
2024-04-15 10:01:18,968:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>)
2024-04-15 10:01:18,968:INFO:Checking exceptions
2024-04-15 10:01:18,982:INFO:Copying training dataset
2024-04-15 10:01:18,985:INFO:Checking base model
2024-04-15 10:01:18,985:INFO:Base model : Decision Tree Classifier
2024-04-15 10:01:18,987:INFO:Declaring metric variables
2024-04-15 10:01:18,989:INFO:Defining Hyperparameters
2024-04-15 10:01:19,272:INFO:Tuning with n_jobs=-1
2024-04-15 10:01:19,273:INFO:Initializing RandomizedSearchCV
2024-04-15 10:01:19,476:INFO:best_params: {'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.005, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 16, 'actual_estimator__criterion': 'gini'}
2024-04-15 10:01:19,477:INFO:Hyperparameter search completed
2024-04-15 10:01:19,477:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:19,477:INFO:Initializing create_model()
2024-04-15 10:01:19,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58C1C23A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 5, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.005, 'max_features': 'log2', 'max_depth': 16, 'criterion': 'gini'})
2024-04-15 10:01:19,477:INFO:Checking exceptions
2024-04-15 10:01:19,477:INFO:Importing libraries
2024-04-15 10:01:19,478:INFO:Copying training dataset
2024-04-15 10:01:19,483:INFO:Defining folds
2024-04-15 10:01:19,483:INFO:Declaring metric variables
2024-04-15 10:01:19,487:INFO:Importing untrained model
2024-04-15 10:01:19,487:INFO:Declaring custom model
2024-04-15 10:01:19,491:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:19,498:INFO:Starting cross validation
2024-04-15 10:01:19,499:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:19,585:INFO:Calculating mean and std
2024-04-15 10:01:19,586:INFO:Creating metrics dataframe
2024-04-15 10:01:19,590:INFO:Finalizing model
2024-04-15 10:01:19,607:INFO:Uploading results into container
2024-04-15 10:01:19,608:INFO:Uploading model into container now
2024-04-15 10:01:19,608:INFO:_master_model_container: 3
2024-04-15 10:01:19,608:INFO:_display_container: 5
2024-04-15 10:01:19,609:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=16, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=4,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best')
2024-04-15 10:01:19,609:INFO:create_model() successfully completed......................................
2024-04-15 10:01:19,896:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:19,896:INFO:choose_better activated
2024-04-15 10:01:19,899:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:19,900:INFO:Initializing create_model()
2024-04-15 10:01:19,900:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:19,900:INFO:Checking exceptions
2024-04-15 10:01:19,901:INFO:Importing libraries
2024-04-15 10:01:19,901:INFO:Copying training dataset
2024-04-15 10:01:19,905:INFO:Defining folds
2024-04-15 10:01:19,905:INFO:Declaring metric variables
2024-04-15 10:01:19,905:INFO:Importing untrained model
2024-04-15 10:01:19,905:INFO:Declaring custom model
2024-04-15 10:01:19,905:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:19,906:INFO:Starting cross validation
2024-04-15 10:01:19,906:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:20,029:INFO:Calculating mean and std
2024-04-15 10:01:20,030:INFO:Creating metrics dataframe
2024-04-15 10:01:20,032:INFO:Finalizing model
2024-04-15 10:01:20,087:INFO:Uploading results into container
2024-04-15 10:01:20,087:INFO:Uploading model into container now
2024-04-15 10:01:20,088:INFO:_master_model_container: 4
2024-04-15 10:01:20,088:INFO:_display_container: 6
2024-04-15 10:01:20,088:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best')
2024-04-15 10:01:20,088:INFO:create_model() successfully completed......................................
2024-04-15 10:01:20,367:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:20,367:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best') result for F1 is 0.5418
2024-04-15 10:01:20,368:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=16, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=4,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best') result for F1 is 0.4756
2024-04-15 10:01:20,368:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best') is best model
2024-04-15 10:01:20,368:INFO:choose_better completed
2024-04-15 10:01:20,368:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 10:01:20,376:INFO:_master_model_container: 4
2024-04-15 10:01:20,376:INFO:_display_container: 5
2024-04-15 10:01:20,376:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best')
2024-04-15 10:01:20,377:INFO:tune_model() successfully completed......................................
2024-04-15 10:01:20,661:INFO:Initializing predict_model()
2024-04-15 10:01:20,661:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E4B4280>)
2024-04-15 10:01:20,661:INFO:Checking exceptions
2024-04-15 10:01:20,661:INFO:Preloading libraries
2024-04-15 10:01:21,018:INFO:Initializing finalize_model()
2024-04-15 10:01:21,018:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 10:01:21,019:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best')
2024-04-15 10:01:21,021:INFO:Initializing create_model()
2024-04-15 10:01:21,021:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586A5FE50>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6124, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:21,021:INFO:Checking exceptions
2024-04-15 10:01:21,022:INFO:Importing libraries
2024-04-15 10:01:21,022:INFO:Copying training dataset
2024-04-15 10:01:21,023:INFO:Defining folds
2024-04-15 10:01:21,023:INFO:Declaring metric variables
2024-04-15 10:01:21,023:INFO:Importing untrained model
2024-04-15 10:01:21,023:INFO:Declaring custom model
2024-04-15 10:01:21,023:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:21,024:INFO:Cross validation set to False
2024-04-15 10:01:21,024:INFO:Fitting Model
2024-04-15 10:01:21,089:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6124, splitter='best'))],
         verbose=False)
2024-04-15 10:01:21,090:INFO:create_model() successfully completed......................................
2024-04-15 10:01:21,366:INFO:_master_model_container: 4
2024-04-15 10:01:21,367:INFO:_display_container: 6
2024-04-15 10:01:21,371:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6124, splitter='best'))],
         verbose=False)
2024-04-15 10:01:21,371:INFO:finalize_model() successfully completed......................................
2024-04-15 10:01:21,652:INFO:Initializing save_model()
2024-04-15 10:01:21,652:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6124, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 10:01:21,652:INFO:Adding model into prep_pipe
2024-04-15 10:01:21,652:WARNING:Only Model saved as it was a pipeline.
2024-04-15 10:01:21,656:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 10:01:21,660:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=6124, splitter='best'))],
         verbose=False)
2024-04-15 10:01:21,660:INFO:save_model() successfully completed......................................
2024-04-15 10:01:21,938:INFO:Initializing load_model()
2024-04-15 10:01:21,938:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 10:01:22,035:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 10:01:24,835:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1859173732.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 10:01:49,222:INFO:PyCaret ClassificationExperiment
2024-04-15 10:01:49,223:INFO:Logging name: clf-default-name
2024-04-15 10:01:49,223:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 10:01:49,223:INFO:version 3.2.0
2024-04-15 10:01:49,223:INFO:Initializing setup()
2024-04-15 10:01:49,223:INFO:self.USI: de78
2024-04-15 10:01:49,223:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 10:01:49,223:INFO:Checking environment
2024-04-15 10:01:49,223:INFO:python_version: 3.8.0
2024-04-15 10:01:49,223:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 10:01:49,223:INFO:machine: AMD64
2024-04-15 10:01:49,223:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 10:01:49,229:INFO:Memory: svmem(total=34301427712, available=18061131776, percent=47.3, used=16240295936, free=18061131776)
2024-04-15 10:01:49,229:INFO:Physical Core: 6
2024-04-15 10:01:49,229:INFO:Logical Core: 12
2024-04-15 10:01:49,229:INFO:Checking libraries
2024-04-15 10:01:49,229:INFO:System:
2024-04-15 10:01:49,229:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 10:01:49,229:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 10:01:49,230:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 10:01:49,230:INFO:PyCaret required dependencies:
2024-04-15 10:01:49,230:INFO:                 pip: 19.2.3
2024-04-15 10:01:49,230:INFO:          setuptools: 41.2.0
2024-04-15 10:01:49,230:INFO:             pycaret: 3.2.0
2024-04-15 10:01:49,230:INFO:             IPython: 8.12.3
2024-04-15 10:01:49,230:INFO:          ipywidgets: 8.1.2
2024-04-15 10:01:49,230:INFO:                tqdm: 4.66.2
2024-04-15 10:01:49,230:INFO:               numpy: 1.24.4
2024-04-15 10:01:49,230:INFO:              pandas: 1.5.3
2024-04-15 10:01:49,230:INFO:              jinja2: 3.1.3
2024-04-15 10:01:49,230:INFO:               scipy: 1.10.1
2024-04-15 10:01:49,230:INFO:              joblib: 1.3.2
2024-04-15 10:01:49,230:INFO:             sklearn: 1.2.0
2024-04-15 10:01:49,230:INFO:                pyod: 1.1.3
2024-04-15 10:01:49,230:INFO:            imblearn: 0.12.2
2024-04-15 10:01:49,230:INFO:   category_encoders: 2.6.3
2024-04-15 10:01:49,230:INFO:            lightgbm: 4.3.0
2024-04-15 10:01:49,230:INFO:               numba: 0.58.1
2024-04-15 10:01:49,230:INFO:            requests: 2.31.0
2024-04-15 10:01:49,230:INFO:          matplotlib: 3.6.0
2024-04-15 10:01:49,230:INFO:          scikitplot: 0.3.7
2024-04-15 10:01:49,230:INFO:         yellowbrick: 1.5
2024-04-15 10:01:49,230:INFO:              plotly: 5.20.0
2024-04-15 10:01:49,230:INFO:    plotly-resampler: Not installed
2024-04-15 10:01:49,230:INFO:             kaleido: 0.2.1
2024-04-15 10:01:49,230:INFO:           schemdraw: 0.15
2024-04-15 10:01:49,230:INFO:         statsmodels: 0.14.1
2024-04-15 10:01:49,230:INFO:              sktime: 0.21.1
2024-04-15 10:01:49,230:INFO:               tbats: 1.1.3
2024-04-15 10:01:49,230:INFO:            pmdarima: 2.0.4
2024-04-15 10:01:49,230:INFO:              psutil: 5.9.8
2024-04-15 10:01:49,231:INFO:          markupsafe: 2.1.5
2024-04-15 10:01:49,231:INFO:             pickle5: Not installed
2024-04-15 10:01:49,231:INFO:         cloudpickle: 3.0.0
2024-04-15 10:01:49,231:INFO:         deprecation: 2.1.0
2024-04-15 10:01:49,231:INFO:              xxhash: 3.4.1
2024-04-15 10:01:49,231:INFO:           wurlitzer: Not installed
2024-04-15 10:01:49,231:INFO:PyCaret optional dependencies:
2024-04-15 10:01:49,231:INFO:                shap: Not installed
2024-04-15 10:01:49,231:INFO:           interpret: Not installed
2024-04-15 10:01:49,231:INFO:                umap: Not installed
2024-04-15 10:01:49,231:INFO:     ydata_profiling: Not installed
2024-04-15 10:01:49,231:INFO:  explainerdashboard: Not installed
2024-04-15 10:01:49,231:INFO:             autoviz: Not installed
2024-04-15 10:01:49,231:INFO:           fairlearn: Not installed
2024-04-15 10:01:49,231:INFO:          deepchecks: Not installed
2024-04-15 10:01:49,231:INFO:             xgboost: Not installed
2024-04-15 10:01:49,231:INFO:            catboost: Not installed
2024-04-15 10:01:49,231:INFO:              kmodes: Not installed
2024-04-15 10:01:49,231:INFO:             mlxtend: Not installed
2024-04-15 10:01:49,231:INFO:       statsforecast: Not installed
2024-04-15 10:01:49,231:INFO:        tune_sklearn: Not installed
2024-04-15 10:01:49,231:INFO:                 ray: Not installed
2024-04-15 10:01:49,231:INFO:            hyperopt: Not installed
2024-04-15 10:01:49,231:INFO:              optuna: Not installed
2024-04-15 10:01:49,231:INFO:               skopt: Not installed
2024-04-15 10:01:49,231:INFO:              mlflow: 2.11.3
2024-04-15 10:01:49,231:INFO:              gradio: Not installed
2024-04-15 10:01:49,231:INFO:             fastapi: Not installed
2024-04-15 10:01:49,231:INFO:             uvicorn: Not installed
2024-04-15 10:01:49,231:INFO:              m2cgen: Not installed
2024-04-15 10:01:49,231:INFO:           evidently: Not installed
2024-04-15 10:01:49,231:INFO:               fugue: Not installed
2024-04-15 10:01:49,231:INFO:           streamlit: 1.33.0
2024-04-15 10:01:49,231:INFO:             prophet: Not installed
2024-04-15 10:01:49,232:INFO:None
2024-04-15 10:01:49,232:INFO:Set up data.
2024-04-15 10:01:49,235:INFO:Set up folding strategy.
2024-04-15 10:01:49,235:INFO:Set up train/test split.
2024-04-15 10:01:49,235:INFO:Set up data.
2024-04-15 10:01:49,239:INFO:Set up index.
2024-04-15 10:01:49,239:INFO:Assigning column types.
2024-04-15 10:01:49,241:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 10:01:49,276:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:01:49,277:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:49,301:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,367:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:01:49,369:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:49,396:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,397:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,397:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 10:01:49,433:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:49,456:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,457:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,493:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:01:49,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,518:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 10:01:49,580:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,640:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,640:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,642:INFO:Preparing preprocessing pipeline...
2024-04-15 10:01:49,643:INFO:Set up simple imputation.
2024-04-15 10:01:49,643:INFO:Set up feature normalization.
2024-04-15 10:01:49,659:INFO:Finished creating preprocessing pipeline.
2024-04-15 10:01:49,663:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 10:01:49,663:INFO:Creating final display dataframe.
2024-04-15 10:01:49,725:INFO:Setup _display_container:                     Description             Value
0                    Session id              5061
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              de78
2024-04-15 10:01:49,789:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,789:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,853:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,853:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:01:49,853:INFO:setup() successfully completed in 0.63s...............
2024-04-15 10:01:49,854:INFO:Initializing compare_models()
2024-04-15 10:01:49,854:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 10:01:49,854:INFO:Checking exceptions
2024-04-15 10:01:49,857:INFO:Preparing display monitor
2024-04-15 10:01:49,874:INFO:Initializing Logistic Regression
2024-04-15 10:01:49,874:INFO:Total runtime is 1.665353775024414e-05 minutes
2024-04-15 10:01:49,876:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:49,876:INFO:Initializing create_model()
2024-04-15 10:01:49,876:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58E2139D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:49,876:INFO:Checking exceptions
2024-04-15 10:01:49,877:INFO:Importing libraries
2024-04-15 10:01:49,877:INFO:Copying training dataset
2024-04-15 10:01:49,882:INFO:Defining folds
2024-04-15 10:01:49,882:INFO:Declaring metric variables
2024-04-15 10:01:49,886:INFO:Importing untrained model
2024-04-15 10:01:49,889:INFO:Logistic Regression Imported successfully
2024-04-15 10:01:49,894:INFO:Starting cross validation
2024-04-15 10:01:49,895:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:49,998:INFO:Calculating mean and std
2024-04-15 10:01:49,998:INFO:Creating metrics dataframe
2024-04-15 10:01:50,001:INFO:Uploading results into container
2024-04-15 10:01:50,002:INFO:Uploading model into container now
2024-04-15 10:01:50,002:INFO:_master_model_container: 1
2024-04-15 10:01:50,002:INFO:_display_container: 2
2024-04-15 10:01:50,002:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:01:50,003:INFO:create_model() successfully completed......................................
2024-04-15 10:01:50,310:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:50,311:INFO:Creating metrics dataframe
2024-04-15 10:01:50,321:INFO:Initializing Decision Tree Classifier
2024-04-15 10:01:50,321:INFO:Total runtime is 0.007468334833780924 minutes
2024-04-15 10:01:50,324:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:50,325:INFO:Initializing create_model()
2024-04-15 10:01:50,325:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58E2139D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:50,325:INFO:Checking exceptions
2024-04-15 10:01:50,325:INFO:Importing libraries
2024-04-15 10:01:50,325:INFO:Copying training dataset
2024-04-15 10:01:50,330:INFO:Defining folds
2024-04-15 10:01:50,330:INFO:Declaring metric variables
2024-04-15 10:01:50,333:INFO:Importing untrained model
2024-04-15 10:01:50,337:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:50,341:INFO:Starting cross validation
2024-04-15 10:01:50,342:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:50,507:INFO:Calculating mean and std
2024-04-15 10:01:50,508:INFO:Creating metrics dataframe
2024-04-15 10:01:50,511:INFO:Uploading results into container
2024-04-15 10:01:50,511:INFO:Uploading model into container now
2024-04-15 10:01:50,512:INFO:_master_model_container: 2
2024-04-15 10:01:50,512:INFO:_display_container: 2
2024-04-15 10:01:50,512:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best')
2024-04-15 10:01:50,512:INFO:create_model() successfully completed......................................
2024-04-15 10:01:50,812:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:50,812:INFO:Creating metrics dataframe
2024-04-15 10:01:50,826:INFO:Initializing create_model()
2024-04-15 10:01:50,827:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:50,827:INFO:Checking exceptions
2024-04-15 10:01:50,828:INFO:Importing libraries
2024-04-15 10:01:50,828:INFO:Copying training dataset
2024-04-15 10:01:50,832:INFO:Defining folds
2024-04-15 10:01:50,832:INFO:Declaring metric variables
2024-04-15 10:01:50,832:INFO:Importing untrained model
2024-04-15 10:01:50,832:INFO:Declaring custom model
2024-04-15 10:01:50,833:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:50,833:INFO:Cross validation set to False
2024-04-15 10:01:50,833:INFO:Fitting Model
2024-04-15 10:01:50,888:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best')
2024-04-15 10:01:50,889:INFO:create_model() successfully completed......................................
2024-04-15 10:01:51,181:INFO:Initializing create_model()
2024-04-15 10:01:51,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:51,181:INFO:Checking exceptions
2024-04-15 10:01:51,183:INFO:Importing libraries
2024-04-15 10:01:51,183:INFO:Copying training dataset
2024-04-15 10:01:51,187:INFO:Defining folds
2024-04-15 10:01:51,187:INFO:Declaring metric variables
2024-04-15 10:01:51,187:INFO:Importing untrained model
2024-04-15 10:01:51,187:INFO:Declaring custom model
2024-04-15 10:01:51,188:INFO:Logistic Regression Imported successfully
2024-04-15 10:01:51,188:INFO:Cross validation set to False
2024-04-15 10:01:51,189:INFO:Fitting Model
2024-04-15 10:01:51,204:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:01:51,204:INFO:create_model() successfully completed......................................
2024-04-15 10:01:51,504:INFO:_master_model_container: 2
2024-04-15 10:01:51,504:INFO:_display_container: 2
2024-04-15 10:01:51,505:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 10:01:51,505:INFO:compare_models() successfully completed......................................
2024-04-15 10:01:51,505:INFO:Initializing predict_model()
2024-04-15 10:01:51,505:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C585693B80>)
2024-04-15 10:01:51,505:INFO:Checking exceptions
2024-04-15 10:01:51,506:INFO:Preloading libraries
2024-04-15 10:01:51,987:INFO:Initializing predict_model()
2024-04-15 10:01:51,987:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5061, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591E77CA0>)
2024-04-15 10:01:51,987:INFO:Checking exceptions
2024-04-15 10:01:51,987:INFO:Preloading libraries
2024-04-15 10:01:52,436:INFO:Initializing tune_model()
2024-04-15 10:01:52,436:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>)
2024-04-15 10:01:52,436:INFO:Checking exceptions
2024-04-15 10:01:52,448:INFO:Copying training dataset
2024-04-15 10:01:52,452:INFO:Checking base model
2024-04-15 10:01:52,452:INFO:Base model : Decision Tree Classifier
2024-04-15 10:01:52,455:INFO:Declaring metric variables
2024-04-15 10:01:52,458:INFO:Defining Hyperparameters
2024-04-15 10:01:52,736:INFO:Tuning with n_jobs=-1
2024-04-15 10:01:52,737:INFO:Initializing RandomizedSearchCV
2024-04-15 10:01:52,974:INFO:best_params: {'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.01, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 15, 'actual_estimator__criterion': 'entropy'}
2024-04-15 10:01:52,974:INFO:Hyperparameter search completed
2024-04-15 10:01:52,974:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:52,975:INFO:Initializing create_model()
2024-04-15 10:01:52,975:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B230A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 9, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.01, 'max_features': 1.0, 'max_depth': 15, 'criterion': 'entropy'})
2024-04-15 10:01:52,975:INFO:Checking exceptions
2024-04-15 10:01:52,975:INFO:Importing libraries
2024-04-15 10:01:52,975:INFO:Copying training dataset
2024-04-15 10:01:52,980:INFO:Defining folds
2024-04-15 10:01:52,980:INFO:Declaring metric variables
2024-04-15 10:01:52,984:INFO:Importing untrained model
2024-04-15 10:01:52,984:INFO:Declaring custom model
2024-04-15 10:01:52,987:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:52,994:INFO:Starting cross validation
2024-04-15 10:01:52,995:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:53,095:INFO:Calculating mean and std
2024-04-15 10:01:53,095:INFO:Creating metrics dataframe
2024-04-15 10:01:53,100:INFO:Finalizing model
2024-04-15 10:01:53,120:INFO:Uploading results into container
2024-04-15 10:01:53,121:INFO:Uploading model into container now
2024-04-15 10:01:53,121:INFO:_master_model_container: 3
2024-04-15 10:01:53,121:INFO:_display_container: 5
2024-04-15 10:01:53,122:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=15, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.01, min_samples_leaf=4,
                       min_samples_split=9, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best')
2024-04-15 10:01:53,122:INFO:create_model() successfully completed......................................
2024-04-15 10:01:53,414:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:53,414:INFO:choose_better activated
2024-04-15 10:01:53,417:INFO:SubProcess create_model() called ==================================
2024-04-15 10:01:53,418:INFO:Initializing create_model()
2024-04-15 10:01:53,418:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:53,418:INFO:Checking exceptions
2024-04-15 10:01:53,419:INFO:Importing libraries
2024-04-15 10:01:53,419:INFO:Copying training dataset
2024-04-15 10:01:53,423:INFO:Defining folds
2024-04-15 10:01:53,423:INFO:Declaring metric variables
2024-04-15 10:01:53,423:INFO:Importing untrained model
2024-04-15 10:01:53,423:INFO:Declaring custom model
2024-04-15 10:01:53,423:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:53,424:INFO:Starting cross validation
2024-04-15 10:01:53,425:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:01:53,554:INFO:Calculating mean and std
2024-04-15 10:01:53,554:INFO:Creating metrics dataframe
2024-04-15 10:01:53,557:INFO:Finalizing model
2024-04-15 10:01:53,610:INFO:Uploading results into container
2024-04-15 10:01:53,610:INFO:Uploading model into container now
2024-04-15 10:01:53,610:INFO:_master_model_container: 4
2024-04-15 10:01:53,610:INFO:_display_container: 6
2024-04-15 10:01:53,611:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best')
2024-04-15 10:01:53,611:INFO:create_model() successfully completed......................................
2024-04-15 10:01:53,878:INFO:SubProcess create_model() end ==================================
2024-04-15 10:01:53,879:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best') result for F1 is 0.544
2024-04-15 10:01:53,879:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=15, max_features=1.0, max_leaf_nodes=None,
                       min_impurity_decrease=0.01, min_samples_leaf=4,
                       min_samples_split=9, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best') result for F1 is 0.4516
2024-04-15 10:01:53,879:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best') is best model
2024-04-15 10:01:53,879:INFO:choose_better completed
2024-04-15 10:01:53,879:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 10:01:53,887:INFO:_master_model_container: 4
2024-04-15 10:01:53,887:INFO:_display_container: 5
2024-04-15 10:01:53,887:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best')
2024-04-15 10:01:53,887:INFO:tune_model() successfully completed......................................
2024-04-15 10:01:54,160:INFO:Initializing predict_model()
2024-04-15 10:01:54,160:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590571820>)
2024-04-15 10:01:54,160:INFO:Checking exceptions
2024-04-15 10:01:54,161:INFO:Preloading libraries
2024-04-15 10:01:54,526:INFO:Initializing finalize_model()
2024-04-15 10:01:54,526:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 10:01:54,527:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best')
2024-04-15 10:01:54,529:INFO:Initializing create_model()
2024-04-15 10:01:54,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58672F4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5061, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:01:54,529:INFO:Checking exceptions
2024-04-15 10:01:54,530:INFO:Importing libraries
2024-04-15 10:01:54,531:INFO:Copying training dataset
2024-04-15 10:01:54,531:INFO:Defining folds
2024-04-15 10:01:54,531:INFO:Declaring metric variables
2024-04-15 10:01:54,531:INFO:Importing untrained model
2024-04-15 10:01:54,531:INFO:Declaring custom model
2024-04-15 10:01:54,531:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:01:54,532:INFO:Cross validation set to False
2024-04-15 10:01:54,532:INFO:Fitting Model
2024-04-15 10:01:54,595:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5061, splitter='best'))],
         verbose=False)
2024-04-15 10:01:54,596:INFO:create_model() successfully completed......................................
2024-04-15 10:01:54,867:INFO:_master_model_container: 4
2024-04-15 10:01:54,868:INFO:_display_container: 6
2024-04-15 10:01:54,871:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5061, splitter='best'))],
         verbose=False)
2024-04-15 10:01:54,872:INFO:finalize_model() successfully completed......................................
2024-04-15 10:01:55,188:INFO:Initializing save_model()
2024-04-15 10:01:55,188:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5061, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 10:01:55,188:INFO:Adding model into prep_pipe
2024-04-15 10:01:55,188:WARNING:Only Model saved as it was a pipeline.
2024-04-15 10:01:55,192:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 10:01:55,195:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=5061, splitter='best'))],
         verbose=False)
2024-04-15 10:01:55,195:INFO:save_model() successfully completed......................................
2024-04-15 10:01:55,477:INFO:Initializing load_model()
2024-04-15 10:01:55,477:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 10:01:55,558:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 10:01:58,378:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\219507737.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 10:02:22,366:INFO:PyCaret ClassificationExperiment
2024-04-15 10:02:22,366:INFO:Logging name: clf-default-name
2024-04-15 10:02:22,366:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 10:02:22,366:INFO:version 3.2.0
2024-04-15 10:02:22,366:INFO:Initializing setup()
2024-04-15 10:02:22,366:INFO:self.USI: 783f
2024-04-15 10:02:22,366:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 10:02:22,366:INFO:Checking environment
2024-04-15 10:02:22,366:INFO:python_version: 3.8.0
2024-04-15 10:02:22,366:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 10:02:22,366:INFO:machine: AMD64
2024-04-15 10:02:22,366:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 10:02:22,373:INFO:Memory: svmem(total=34301427712, available=18017841152, percent=47.5, used=16283586560, free=18017841152)
2024-04-15 10:02:22,373:INFO:Physical Core: 6
2024-04-15 10:02:22,373:INFO:Logical Core: 12
2024-04-15 10:02:22,373:INFO:Checking libraries
2024-04-15 10:02:22,373:INFO:System:
2024-04-15 10:02:22,373:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 10:02:22,373:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 10:02:22,373:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 10:02:22,373:INFO:PyCaret required dependencies:
2024-04-15 10:02:22,373:INFO:                 pip: 19.2.3
2024-04-15 10:02:22,373:INFO:          setuptools: 41.2.0
2024-04-15 10:02:22,373:INFO:             pycaret: 3.2.0
2024-04-15 10:02:22,373:INFO:             IPython: 8.12.3
2024-04-15 10:02:22,373:INFO:          ipywidgets: 8.1.2
2024-04-15 10:02:22,373:INFO:                tqdm: 4.66.2
2024-04-15 10:02:22,373:INFO:               numpy: 1.24.4
2024-04-15 10:02:22,373:INFO:              pandas: 1.5.3
2024-04-15 10:02:22,373:INFO:              jinja2: 3.1.3
2024-04-15 10:02:22,373:INFO:               scipy: 1.10.1
2024-04-15 10:02:22,373:INFO:              joblib: 1.3.2
2024-04-15 10:02:22,373:INFO:             sklearn: 1.2.0
2024-04-15 10:02:22,373:INFO:                pyod: 1.1.3
2024-04-15 10:02:22,373:INFO:            imblearn: 0.12.2
2024-04-15 10:02:22,374:INFO:   category_encoders: 2.6.3
2024-04-15 10:02:22,374:INFO:            lightgbm: 4.3.0
2024-04-15 10:02:22,374:INFO:               numba: 0.58.1
2024-04-15 10:02:22,374:INFO:            requests: 2.31.0
2024-04-15 10:02:22,374:INFO:          matplotlib: 3.6.0
2024-04-15 10:02:22,374:INFO:          scikitplot: 0.3.7
2024-04-15 10:02:22,374:INFO:         yellowbrick: 1.5
2024-04-15 10:02:22,374:INFO:              plotly: 5.20.0
2024-04-15 10:02:22,374:INFO:    plotly-resampler: Not installed
2024-04-15 10:02:22,374:INFO:             kaleido: 0.2.1
2024-04-15 10:02:22,374:INFO:           schemdraw: 0.15
2024-04-15 10:02:22,374:INFO:         statsmodels: 0.14.1
2024-04-15 10:02:22,374:INFO:              sktime: 0.21.1
2024-04-15 10:02:22,374:INFO:               tbats: 1.1.3
2024-04-15 10:02:22,374:INFO:            pmdarima: 2.0.4
2024-04-15 10:02:22,374:INFO:              psutil: 5.9.8
2024-04-15 10:02:22,374:INFO:          markupsafe: 2.1.5
2024-04-15 10:02:22,374:INFO:             pickle5: Not installed
2024-04-15 10:02:22,374:INFO:         cloudpickle: 3.0.0
2024-04-15 10:02:22,374:INFO:         deprecation: 2.1.0
2024-04-15 10:02:22,374:INFO:              xxhash: 3.4.1
2024-04-15 10:02:22,374:INFO:           wurlitzer: Not installed
2024-04-15 10:02:22,374:INFO:PyCaret optional dependencies:
2024-04-15 10:02:22,374:INFO:                shap: Not installed
2024-04-15 10:02:22,374:INFO:           interpret: Not installed
2024-04-15 10:02:22,374:INFO:                umap: Not installed
2024-04-15 10:02:22,374:INFO:     ydata_profiling: Not installed
2024-04-15 10:02:22,374:INFO:  explainerdashboard: Not installed
2024-04-15 10:02:22,374:INFO:             autoviz: Not installed
2024-04-15 10:02:22,375:INFO:           fairlearn: Not installed
2024-04-15 10:02:22,375:INFO:          deepchecks: Not installed
2024-04-15 10:02:22,375:INFO:             xgboost: Not installed
2024-04-15 10:02:22,375:INFO:            catboost: Not installed
2024-04-15 10:02:22,375:INFO:              kmodes: Not installed
2024-04-15 10:02:22,375:INFO:             mlxtend: Not installed
2024-04-15 10:02:22,375:INFO:       statsforecast: Not installed
2024-04-15 10:02:22,375:INFO:        tune_sklearn: Not installed
2024-04-15 10:02:22,375:INFO:                 ray: Not installed
2024-04-15 10:02:22,375:INFO:            hyperopt: Not installed
2024-04-15 10:02:22,375:INFO:              optuna: Not installed
2024-04-15 10:02:22,375:INFO:               skopt: Not installed
2024-04-15 10:02:22,375:INFO:              mlflow: 2.11.3
2024-04-15 10:02:22,375:INFO:              gradio: Not installed
2024-04-15 10:02:22,375:INFO:             fastapi: Not installed
2024-04-15 10:02:22,375:INFO:             uvicorn: Not installed
2024-04-15 10:02:22,375:INFO:              m2cgen: Not installed
2024-04-15 10:02:22,375:INFO:           evidently: Not installed
2024-04-15 10:02:22,375:INFO:               fugue: Not installed
2024-04-15 10:02:22,375:INFO:           streamlit: 1.33.0
2024-04-15 10:02:22,375:INFO:             prophet: Not installed
2024-04-15 10:02:22,375:INFO:None
2024-04-15 10:02:22,375:INFO:Set up data.
2024-04-15 10:02:22,381:INFO:Set up folding strategy.
2024-04-15 10:02:22,381:INFO:Set up train/test split.
2024-04-15 10:02:22,381:INFO:Set up data.
2024-04-15 10:02:22,385:INFO:Set up index.
2024-04-15 10:02:22,385:INFO:Assigning column types.
2024-04-15 10:02:22,388:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 10:02:22,427:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:02:22,428:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:22,453:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,492:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:02:22,492:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:22,518:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,518:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,518:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 10:02:22,553:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:22,577:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,577:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,613:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:22,635:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,635:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 10:02:22,694:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,694:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,752:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,752:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,753:INFO:Preparing preprocessing pipeline...
2024-04-15 10:02:22,754:INFO:Set up simple imputation.
2024-04-15 10:02:22,755:INFO:Set up feature normalization.
2024-04-15 10:02:22,770:INFO:Finished creating preprocessing pipeline.
2024-04-15 10:02:22,774:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 10:02:22,774:INFO:Creating final display dataframe.
2024-04-15 10:02:22,835:INFO:Setup _display_container:                     Description             Value
0                    Session id              3078
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              783f
2024-04-15 10:02:22,903:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,969:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,969:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:22,970:INFO:setup() successfully completed in 0.61s...............
2024-04-15 10:02:22,971:INFO:Initializing compare_models()
2024-04-15 10:02:22,971:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 10:02:22,971:INFO:Checking exceptions
2024-04-15 10:02:22,974:INFO:Preparing display monitor
2024-04-15 10:02:22,990:INFO:Initializing Logistic Regression
2024-04-15 10:02:22,990:INFO:Total runtime is 0.0 minutes
2024-04-15 10:02:22,993:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:22,993:INFO:Initializing create_model()
2024-04-15 10:02:22,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59007DB50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:22,993:INFO:Checking exceptions
2024-04-15 10:02:22,994:INFO:Importing libraries
2024-04-15 10:02:22,994:INFO:Copying training dataset
2024-04-15 10:02:22,999:INFO:Defining folds
2024-04-15 10:02:22,999:INFO:Declaring metric variables
2024-04-15 10:02:23,003:INFO:Importing untrained model
2024-04-15 10:02:23,019:INFO:Logistic Regression Imported successfully
2024-04-15 10:02:23,030:INFO:Starting cross validation
2024-04-15 10:02:23,031:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:23,146:INFO:Calculating mean and std
2024-04-15 10:02:23,147:INFO:Creating metrics dataframe
2024-04-15 10:02:23,150:INFO:Uploading results into container
2024-04-15 10:02:23,150:INFO:Uploading model into container now
2024-04-15 10:02:23,151:INFO:_master_model_container: 1
2024-04-15 10:02:23,151:INFO:_display_container: 2
2024-04-15 10:02:23,151:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3078, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:02:23,151:INFO:create_model() successfully completed......................................
2024-04-15 10:02:23,455:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:23,456:INFO:Creating metrics dataframe
2024-04-15 10:02:23,463:INFO:Initializing Decision Tree Classifier
2024-04-15 10:02:23,463:INFO:Total runtime is 0.007885118325551351 minutes
2024-04-15 10:02:23,465:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:23,466:INFO:Initializing create_model()
2024-04-15 10:02:23,466:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59007DB50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:23,466:INFO:Checking exceptions
2024-04-15 10:02:23,466:INFO:Importing libraries
2024-04-15 10:02:23,466:INFO:Copying training dataset
2024-04-15 10:02:23,470:INFO:Defining folds
2024-04-15 10:02:23,470:INFO:Declaring metric variables
2024-04-15 10:02:23,473:INFO:Importing untrained model
2024-04-15 10:02:23,475:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:23,481:INFO:Starting cross validation
2024-04-15 10:02:23,482:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:23,624:INFO:Calculating mean and std
2024-04-15 10:02:23,624:INFO:Creating metrics dataframe
2024-04-15 10:02:23,628:INFO:Uploading results into container
2024-04-15 10:02:23,628:INFO:Uploading model into container now
2024-04-15 10:02:23,628:INFO:_master_model_container: 2
2024-04-15 10:02:23,628:INFO:_display_container: 2
2024-04-15 10:02:23,629:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best')
2024-04-15 10:02:23,629:INFO:create_model() successfully completed......................................
2024-04-15 10:02:23,911:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:23,911:INFO:Creating metrics dataframe
2024-04-15 10:02:23,923:INFO:Initializing create_model()
2024-04-15 10:02:23,923:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:23,924:INFO:Checking exceptions
2024-04-15 10:02:23,925:INFO:Importing libraries
2024-04-15 10:02:23,925:INFO:Copying training dataset
2024-04-15 10:02:23,929:INFO:Defining folds
2024-04-15 10:02:23,929:INFO:Declaring metric variables
2024-04-15 10:02:23,930:INFO:Importing untrained model
2024-04-15 10:02:23,930:INFO:Declaring custom model
2024-04-15 10:02:23,930:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:23,931:INFO:Cross validation set to False
2024-04-15 10:02:23,931:INFO:Fitting Model
2024-04-15 10:02:23,983:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best')
2024-04-15 10:02:23,983:INFO:create_model() successfully completed......................................
2024-04-15 10:02:24,265:INFO:Initializing create_model()
2024-04-15 10:02:24,265:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3078, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:24,265:INFO:Checking exceptions
2024-04-15 10:02:24,266:INFO:Importing libraries
2024-04-15 10:02:24,267:INFO:Copying training dataset
2024-04-15 10:02:24,270:INFO:Defining folds
2024-04-15 10:02:24,270:INFO:Declaring metric variables
2024-04-15 10:02:24,271:INFO:Importing untrained model
2024-04-15 10:02:24,271:INFO:Declaring custom model
2024-04-15 10:02:24,271:INFO:Logistic Regression Imported successfully
2024-04-15 10:02:24,272:INFO:Cross validation set to False
2024-04-15 10:02:24,272:INFO:Fitting Model
2024-04-15 10:02:24,288:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3078, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:02:24,288:INFO:create_model() successfully completed......................................
2024-04-15 10:02:24,585:INFO:_master_model_container: 2
2024-04-15 10:02:24,585:INFO:_display_container: 2
2024-04-15 10:02:24,586:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3078, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 10:02:24,586:INFO:compare_models() successfully completed......................................
2024-04-15 10:02:24,586:INFO:Initializing predict_model()
2024-04-15 10:02:24,586:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58DEE3EE0>)
2024-04-15 10:02:24,587:INFO:Checking exceptions
2024-04-15 10:02:24,587:INFO:Preloading libraries
2024-04-15 10:02:25,022:INFO:Initializing predict_model()
2024-04-15 10:02:25,022:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3078, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591F9B4C0>)
2024-04-15 10:02:25,022:INFO:Checking exceptions
2024-04-15 10:02:25,022:INFO:Preloading libraries
2024-04-15 10:02:25,516:INFO:Initializing tune_model()
2024-04-15 10:02:25,516:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>)
2024-04-15 10:02:25,516:INFO:Checking exceptions
2024-04-15 10:02:25,529:INFO:Copying training dataset
2024-04-15 10:02:25,534:INFO:Checking base model
2024-04-15 10:02:25,534:INFO:Base model : Decision Tree Classifier
2024-04-15 10:02:25,539:INFO:Declaring metric variables
2024-04-15 10:02:25,542:INFO:Defining Hyperparameters
2024-04-15 10:02:25,892:INFO:Tuning with n_jobs=-1
2024-04-15 10:02:25,892:INFO:Initializing RandomizedSearchCV
2024-04-15 10:02:26,136:INFO:best_params: {'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 11, 'actual_estimator__criterion': 'gini'}
2024-04-15 10:02:26,136:INFO:Hyperparameter search completed
2024-04-15 10:02:26,136:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:26,136:INFO:Initializing create_model()
2024-04-15 10:02:26,136:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58E2133D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 9, 'min_samples_leaf': 4, 'min_impurity_decrease': 0, 'max_features': 'log2', 'max_depth': 11, 'criterion': 'gini'})
2024-04-15 10:02:26,137:INFO:Checking exceptions
2024-04-15 10:02:26,137:INFO:Importing libraries
2024-04-15 10:02:26,137:INFO:Copying training dataset
2024-04-15 10:02:26,142:INFO:Defining folds
2024-04-15 10:02:26,142:INFO:Declaring metric variables
2024-04-15 10:02:26,145:INFO:Importing untrained model
2024-04-15 10:02:26,145:INFO:Declaring custom model
2024-04-15 10:02:26,148:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:26,154:INFO:Starting cross validation
2024-04-15 10:02:26,155:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:26,257:INFO:Calculating mean and std
2024-04-15 10:02:26,258:INFO:Creating metrics dataframe
2024-04-15 10:02:26,262:INFO:Finalizing model
2024-04-15 10:02:26,289:INFO:Uploading results into container
2024-04-15 10:02:26,290:INFO:Uploading model into container now
2024-04-15 10:02:26,290:INFO:_master_model_container: 3
2024-04-15 10:02:26,290:INFO:_display_container: 5
2024-04-15 10:02:26,291:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=11, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0, min_samples_leaf=4,
                       min_samples_split=9, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best')
2024-04-15 10:02:26,291:INFO:create_model() successfully completed......................................
2024-04-15 10:02:26,644:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:26,645:INFO:choose_better activated
2024-04-15 10:02:26,647:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:26,648:INFO:Initializing create_model()
2024-04-15 10:02:26,648:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:26,648:INFO:Checking exceptions
2024-04-15 10:02:26,649:INFO:Importing libraries
2024-04-15 10:02:26,649:INFO:Copying training dataset
2024-04-15 10:02:26,654:INFO:Defining folds
2024-04-15 10:02:26,654:INFO:Declaring metric variables
2024-04-15 10:02:26,654:INFO:Importing untrained model
2024-04-15 10:02:26,654:INFO:Declaring custom model
2024-04-15 10:02:26,655:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:26,655:INFO:Starting cross validation
2024-04-15 10:02:26,656:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:26,778:INFO:Calculating mean and std
2024-04-15 10:02:26,779:INFO:Creating metrics dataframe
2024-04-15 10:02:26,781:INFO:Finalizing model
2024-04-15 10:02:26,834:INFO:Uploading results into container
2024-04-15 10:02:26,834:INFO:Uploading model into container now
2024-04-15 10:02:26,835:INFO:_master_model_container: 4
2024-04-15 10:02:26,835:INFO:_display_container: 6
2024-04-15 10:02:26,835:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best')
2024-04-15 10:02:26,835:INFO:create_model() successfully completed......................................
2024-04-15 10:02:27,118:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:27,119:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best') result for F1 is 0.5432
2024-04-15 10:02:27,119:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=11, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0, min_samples_leaf=4,
                       min_samples_split=9, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best') result for F1 is 0.4931
2024-04-15 10:02:27,119:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best') is best model
2024-04-15 10:02:27,119:INFO:choose_better completed
2024-04-15 10:02:27,120:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 10:02:27,126:INFO:_master_model_container: 4
2024-04-15 10:02:27,126:INFO:_display_container: 5
2024-04-15 10:02:27,127:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best')
2024-04-15 10:02:27,127:INFO:tune_model() successfully completed......................................
2024-04-15 10:02:27,412:INFO:Initializing predict_model()
2024-04-15 10:02:27,412:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C585555E50>)
2024-04-15 10:02:27,412:INFO:Checking exceptions
2024-04-15 10:02:27,412:INFO:Preloading libraries
2024-04-15 10:02:27,768:INFO:Initializing finalize_model()
2024-04-15 10:02:27,768:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 10:02:27,768:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best')
2024-04-15 10:02:27,771:INFO:Initializing create_model()
2024-04-15 10:02:27,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58879B760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3078, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:27,771:INFO:Checking exceptions
2024-04-15 10:02:27,772:INFO:Importing libraries
2024-04-15 10:02:27,772:INFO:Copying training dataset
2024-04-15 10:02:27,772:INFO:Defining folds
2024-04-15 10:02:27,772:INFO:Declaring metric variables
2024-04-15 10:02:27,772:INFO:Importing untrained model
2024-04-15 10:02:27,772:INFO:Declaring custom model
2024-04-15 10:02:27,773:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:27,773:INFO:Cross validation set to False
2024-04-15 10:02:27,773:INFO:Fitting Model
2024-04-15 10:02:27,840:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=3078, splitter='best'))],
         verbose=False)
2024-04-15 10:02:27,840:INFO:create_model() successfully completed......................................
2024-04-15 10:02:28,108:INFO:_master_model_container: 4
2024-04-15 10:02:28,109:INFO:_display_container: 6
2024-04-15 10:02:28,112:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=3078, splitter='best'))],
         verbose=False)
2024-04-15 10:02:28,112:INFO:finalize_model() successfully completed......................................
2024-04-15 10:02:28,452:INFO:Initializing save_model()
2024-04-15 10:02:28,452:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=3078, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 10:02:28,453:INFO:Adding model into prep_pipe
2024-04-15 10:02:28,453:WARNING:Only Model saved as it was a pipeline.
2024-04-15 10:02:28,456:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 10:02:28,460:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=3078, splitter='best'))],
         verbose=False)
2024-04-15 10:02:28,460:INFO:save_model() successfully completed......................................
2024-04-15 10:02:28,741:INFO:Initializing load_model()
2024-04-15 10:02:28,741:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 10:02:28,813:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 10:02:31,734:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1859173732.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 10:02:50,709:INFO:PyCaret ClassificationExperiment
2024-04-15 10:02:50,709:INFO:Logging name: clf-default-name
2024-04-15 10:02:50,710:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 10:02:50,710:INFO:version 3.2.0
2024-04-15 10:02:50,710:INFO:Initializing setup()
2024-04-15 10:02:50,710:INFO:self.USI: 1950
2024-04-15 10:02:50,710:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 10:02:50,710:INFO:Checking environment
2024-04-15 10:02:50,710:INFO:python_version: 3.8.0
2024-04-15 10:02:50,710:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 10:02:50,710:INFO:machine: AMD64
2024-04-15 10:02:50,710:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 10:02:50,716:INFO:Memory: svmem(total=34301427712, available=18047070208, percent=47.4, used=16254357504, free=18047070208)
2024-04-15 10:02:50,717:INFO:Physical Core: 6
2024-04-15 10:02:50,717:INFO:Logical Core: 12
2024-04-15 10:02:50,717:INFO:Checking libraries
2024-04-15 10:02:50,717:INFO:System:
2024-04-15 10:02:50,717:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 10:02:50,717:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 10:02:50,717:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 10:02:50,717:INFO:PyCaret required dependencies:
2024-04-15 10:02:50,717:INFO:                 pip: 19.2.3
2024-04-15 10:02:50,717:INFO:          setuptools: 41.2.0
2024-04-15 10:02:50,717:INFO:             pycaret: 3.2.0
2024-04-15 10:02:50,717:INFO:             IPython: 8.12.3
2024-04-15 10:02:50,717:INFO:          ipywidgets: 8.1.2
2024-04-15 10:02:50,717:INFO:                tqdm: 4.66.2
2024-04-15 10:02:50,717:INFO:               numpy: 1.24.4
2024-04-15 10:02:50,717:INFO:              pandas: 1.5.3
2024-04-15 10:02:50,717:INFO:              jinja2: 3.1.3
2024-04-15 10:02:50,717:INFO:               scipy: 1.10.1
2024-04-15 10:02:50,717:INFO:              joblib: 1.3.2
2024-04-15 10:02:50,717:INFO:             sklearn: 1.2.0
2024-04-15 10:02:50,717:INFO:                pyod: 1.1.3
2024-04-15 10:02:50,717:INFO:            imblearn: 0.12.2
2024-04-15 10:02:50,717:INFO:   category_encoders: 2.6.3
2024-04-15 10:02:50,717:INFO:            lightgbm: 4.3.0
2024-04-15 10:02:50,717:INFO:               numba: 0.58.1
2024-04-15 10:02:50,717:INFO:            requests: 2.31.0
2024-04-15 10:02:50,718:INFO:          matplotlib: 3.6.0
2024-04-15 10:02:50,718:INFO:          scikitplot: 0.3.7
2024-04-15 10:02:50,718:INFO:         yellowbrick: 1.5
2024-04-15 10:02:50,718:INFO:              plotly: 5.20.0
2024-04-15 10:02:50,718:INFO:    plotly-resampler: Not installed
2024-04-15 10:02:50,718:INFO:             kaleido: 0.2.1
2024-04-15 10:02:50,718:INFO:           schemdraw: 0.15
2024-04-15 10:02:50,718:INFO:         statsmodels: 0.14.1
2024-04-15 10:02:50,718:INFO:              sktime: 0.21.1
2024-04-15 10:02:50,718:INFO:               tbats: 1.1.3
2024-04-15 10:02:50,718:INFO:            pmdarima: 2.0.4
2024-04-15 10:02:50,718:INFO:              psutil: 5.9.8
2024-04-15 10:02:50,718:INFO:          markupsafe: 2.1.5
2024-04-15 10:02:50,718:INFO:             pickle5: Not installed
2024-04-15 10:02:50,718:INFO:         cloudpickle: 3.0.0
2024-04-15 10:02:50,718:INFO:         deprecation: 2.1.0
2024-04-15 10:02:50,718:INFO:              xxhash: 3.4.1
2024-04-15 10:02:50,718:INFO:           wurlitzer: Not installed
2024-04-15 10:02:50,718:INFO:PyCaret optional dependencies:
2024-04-15 10:02:50,718:INFO:                shap: Not installed
2024-04-15 10:02:50,718:INFO:           interpret: Not installed
2024-04-15 10:02:50,718:INFO:                umap: Not installed
2024-04-15 10:02:50,718:INFO:     ydata_profiling: Not installed
2024-04-15 10:02:50,718:INFO:  explainerdashboard: Not installed
2024-04-15 10:02:50,718:INFO:             autoviz: Not installed
2024-04-15 10:02:50,718:INFO:           fairlearn: Not installed
2024-04-15 10:02:50,718:INFO:          deepchecks: Not installed
2024-04-15 10:02:50,718:INFO:             xgboost: Not installed
2024-04-15 10:02:50,718:INFO:            catboost: Not installed
2024-04-15 10:02:50,718:INFO:              kmodes: Not installed
2024-04-15 10:02:50,719:INFO:             mlxtend: Not installed
2024-04-15 10:02:50,719:INFO:       statsforecast: Not installed
2024-04-15 10:02:50,719:INFO:        tune_sklearn: Not installed
2024-04-15 10:02:50,719:INFO:                 ray: Not installed
2024-04-15 10:02:50,719:INFO:            hyperopt: Not installed
2024-04-15 10:02:50,719:INFO:              optuna: Not installed
2024-04-15 10:02:50,719:INFO:               skopt: Not installed
2024-04-15 10:02:50,719:INFO:              mlflow: 2.11.3
2024-04-15 10:02:50,719:INFO:              gradio: Not installed
2024-04-15 10:02:50,719:INFO:             fastapi: Not installed
2024-04-15 10:02:50,719:INFO:             uvicorn: Not installed
2024-04-15 10:02:50,719:INFO:              m2cgen: Not installed
2024-04-15 10:02:50,719:INFO:           evidently: Not installed
2024-04-15 10:02:50,719:INFO:               fugue: Not installed
2024-04-15 10:02:50,719:INFO:           streamlit: 1.33.0
2024-04-15 10:02:50,719:INFO:             prophet: Not installed
2024-04-15 10:02:50,719:INFO:None
2024-04-15 10:02:50,719:INFO:Set up data.
2024-04-15 10:02:50,725:INFO:Set up folding strategy.
2024-04-15 10:02:50,725:INFO:Set up train/test split.
2024-04-15 10:02:50,725:INFO:Set up data.
2024-04-15 10:02:50,728:INFO:Set up index.
2024-04-15 10:02:50,728:INFO:Assigning column types.
2024-04-15 10:02:50,730:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 10:02:50,771:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:02:50,772:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:50,798:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,798:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,837:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 10:02:50,838:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:50,859:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,860:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,860:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 10:02:50,903:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:50,930:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,967:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 10:02:50,989:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:50,989:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 10:02:51,047:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,047:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,106:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,106:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,107:INFO:Preparing preprocessing pipeline...
2024-04-15 10:02:51,109:INFO:Set up simple imputation.
2024-04-15 10:02:51,109:INFO:Set up feature normalization.
2024-04-15 10:02:51,126:INFO:Finished creating preprocessing pipeline.
2024-04-15 10:02:51,130:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 10:02:51,130:INFO:Creating final display dataframe.
2024-04-15 10:02:51,187:INFO:Setup _display_container:                     Description             Value
0                    Session id              4615
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              1950
2024-04-15 10:02:51,252:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,253:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,311:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,312:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 10:02:51,312:INFO:setup() successfully completed in 0.6s...............
2024-04-15 10:02:51,313:INFO:Initializing compare_models()
2024-04-15 10:02:51,313:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 10:02:51,313:INFO:Checking exceptions
2024-04-15 10:02:51,317:INFO:Preparing display monitor
2024-04-15 10:02:51,333:INFO:Initializing Logistic Regression
2024-04-15 10:02:51,333:INFO:Total runtime is 0.0 minutes
2024-04-15 10:02:51,335:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:51,336:INFO:Initializing create_model()
2024-04-15 10:02:51,336:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B079D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:51,336:INFO:Checking exceptions
2024-04-15 10:02:51,336:INFO:Importing libraries
2024-04-15 10:02:51,336:INFO:Copying training dataset
2024-04-15 10:02:51,340:INFO:Defining folds
2024-04-15 10:02:51,340:INFO:Declaring metric variables
2024-04-15 10:02:51,343:INFO:Importing untrained model
2024-04-15 10:02:51,346:INFO:Logistic Regression Imported successfully
2024-04-15 10:02:51,351:INFO:Starting cross validation
2024-04-15 10:02:51,352:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:51,442:INFO:Calculating mean and std
2024-04-15 10:02:51,442:INFO:Creating metrics dataframe
2024-04-15 10:02:51,445:INFO:Uploading results into container
2024-04-15 10:02:51,445:INFO:Uploading model into container now
2024-04-15 10:02:51,446:INFO:_master_model_container: 1
2024-04-15 10:02:51,446:INFO:_display_container: 2
2024-04-15 10:02:51,446:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4615, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:02:51,446:INFO:create_model() successfully completed......................................
2024-04-15 10:02:51,730:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:51,731:INFO:Creating metrics dataframe
2024-04-15 10:02:51,737:INFO:Initializing Decision Tree Classifier
2024-04-15 10:02:51,737:INFO:Total runtime is 0.0067348480224609375 minutes
2024-04-15 10:02:51,739:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:51,740:INFO:Initializing create_model()
2024-04-15 10:02:51,740:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B079D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:51,740:INFO:Checking exceptions
2024-04-15 10:02:51,740:INFO:Importing libraries
2024-04-15 10:02:51,740:INFO:Copying training dataset
2024-04-15 10:02:51,745:INFO:Defining folds
2024-04-15 10:02:51,745:INFO:Declaring metric variables
2024-04-15 10:02:51,748:INFO:Importing untrained model
2024-04-15 10:02:51,752:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:51,759:INFO:Starting cross validation
2024-04-15 10:02:51,760:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:51,890:INFO:Calculating mean and std
2024-04-15 10:02:51,891:INFO:Creating metrics dataframe
2024-04-15 10:02:51,893:INFO:Uploading results into container
2024-04-15 10:02:51,893:INFO:Uploading model into container now
2024-04-15 10:02:51,894:INFO:_master_model_container: 2
2024-04-15 10:02:51,894:INFO:_display_container: 2
2024-04-15 10:02:51,894:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best')
2024-04-15 10:02:51,894:INFO:create_model() successfully completed......................................
2024-04-15 10:02:52,168:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:52,168:INFO:Creating metrics dataframe
2024-04-15 10:02:52,181:INFO:Initializing create_model()
2024-04-15 10:02:52,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:52,182:INFO:Checking exceptions
2024-04-15 10:02:52,183:INFO:Importing libraries
2024-04-15 10:02:52,183:INFO:Copying training dataset
2024-04-15 10:02:52,187:INFO:Defining folds
2024-04-15 10:02:52,187:INFO:Declaring metric variables
2024-04-15 10:02:52,187:INFO:Importing untrained model
2024-04-15 10:02:52,187:INFO:Declaring custom model
2024-04-15 10:02:52,188:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:52,188:INFO:Cross validation set to False
2024-04-15 10:02:52,188:INFO:Fitting Model
2024-04-15 10:02:52,239:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best')
2024-04-15 10:02:52,239:INFO:create_model() successfully completed......................................
2024-04-15 10:02:52,516:INFO:Initializing create_model()
2024-04-15 10:02:52,516:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4615, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:52,516:INFO:Checking exceptions
2024-04-15 10:02:52,518:INFO:Importing libraries
2024-04-15 10:02:52,518:INFO:Copying training dataset
2024-04-15 10:02:52,522:INFO:Defining folds
2024-04-15 10:02:52,522:INFO:Declaring metric variables
2024-04-15 10:02:52,522:INFO:Importing untrained model
2024-04-15 10:02:52,522:INFO:Declaring custom model
2024-04-15 10:02:52,522:INFO:Logistic Regression Imported successfully
2024-04-15 10:02:52,523:INFO:Cross validation set to False
2024-04-15 10:02:52,523:INFO:Fitting Model
2024-04-15 10:02:52,538:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4615, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 10:02:52,538:INFO:create_model() successfully completed......................................
2024-04-15 10:02:52,851:INFO:_master_model_container: 2
2024-04-15 10:02:52,851:INFO:_display_container: 2
2024-04-15 10:02:52,851:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4615, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 10:02:52,852:INFO:compare_models() successfully completed......................................
2024-04-15 10:02:52,852:INFO:Initializing predict_model()
2024-04-15 10:02:52,852:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C585693B80>)
2024-04-15 10:02:52,852:INFO:Checking exceptions
2024-04-15 10:02:52,852:INFO:Preloading libraries
2024-04-15 10:02:53,275:INFO:Initializing predict_model()
2024-04-15 10:02:53,275:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4615, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C59046A1F0>)
2024-04-15 10:02:53,275:INFO:Checking exceptions
2024-04-15 10:02:53,276:INFO:Preloading libraries
2024-04-15 10:02:53,736:INFO:Initializing tune_model()
2024-04-15 10:02:53,736:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>)
2024-04-15 10:02:53,736:INFO:Checking exceptions
2024-04-15 10:02:53,748:INFO:Copying training dataset
2024-04-15 10:02:53,752:INFO:Checking base model
2024-04-15 10:02:53,752:INFO:Base model : Decision Tree Classifier
2024-04-15 10:02:53,755:INFO:Declaring metric variables
2024-04-15 10:02:53,757:INFO:Defining Hyperparameters
2024-04-15 10:02:54,038:INFO:Tuning with n_jobs=-1
2024-04-15 10:02:54,038:INFO:Initializing RandomizedSearchCV
2024-04-15 10:02:54,230:INFO:best_params: {'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.005, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'entropy'}
2024-04-15 10:02:54,230:INFO:Hyperparameter search completed
2024-04-15 10:02:54,230:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:54,230:INFO:Initializing create_model()
2024-04-15 10:02:54,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586B27C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 5, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.005, 'max_features': 'log2', 'max_depth': 6, 'criterion': 'entropy'})
2024-04-15 10:02:54,230:INFO:Checking exceptions
2024-04-15 10:02:54,230:INFO:Importing libraries
2024-04-15 10:02:54,231:INFO:Copying training dataset
2024-04-15 10:02:54,234:INFO:Defining folds
2024-04-15 10:02:54,234:INFO:Declaring metric variables
2024-04-15 10:02:54,237:INFO:Importing untrained model
2024-04-15 10:02:54,237:INFO:Declaring custom model
2024-04-15 10:02:54,240:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:54,245:INFO:Starting cross validation
2024-04-15 10:02:54,246:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:54,338:INFO:Calculating mean and std
2024-04-15 10:02:54,339:INFO:Creating metrics dataframe
2024-04-15 10:02:54,345:INFO:Finalizing model
2024-04-15 10:02:54,363:INFO:Uploading results into container
2024-04-15 10:02:54,364:INFO:Uploading model into container now
2024-04-15 10:02:54,364:INFO:_master_model_container: 3
2024-04-15 10:02:54,364:INFO:_display_container: 5
2024-04-15 10:02:54,365:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best')
2024-04-15 10:02:54,365:INFO:create_model() successfully completed......................................
2024-04-15 10:02:54,658:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:54,658:INFO:choose_better activated
2024-04-15 10:02:54,661:INFO:SubProcess create_model() called ==================================
2024-04-15 10:02:54,662:INFO:Initializing create_model()
2024-04-15 10:02:54,662:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:54,662:INFO:Checking exceptions
2024-04-15 10:02:54,663:INFO:Importing libraries
2024-04-15 10:02:54,663:INFO:Copying training dataset
2024-04-15 10:02:54,667:INFO:Defining folds
2024-04-15 10:02:54,667:INFO:Declaring metric variables
2024-04-15 10:02:54,667:INFO:Importing untrained model
2024-04-15 10:02:54,667:INFO:Declaring custom model
2024-04-15 10:02:54,668:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:54,668:INFO:Starting cross validation
2024-04-15 10:02:54,669:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 10:02:54,799:INFO:Calculating mean and std
2024-04-15 10:02:54,799:INFO:Creating metrics dataframe
2024-04-15 10:02:54,802:INFO:Finalizing model
2024-04-15 10:02:54,857:INFO:Uploading results into container
2024-04-15 10:02:54,857:INFO:Uploading model into container now
2024-04-15 10:02:54,858:INFO:_master_model_container: 4
2024-04-15 10:02:54,858:INFO:_display_container: 6
2024-04-15 10:02:54,858:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best')
2024-04-15 10:02:54,858:INFO:create_model() successfully completed......................................
2024-04-15 10:02:55,134:INFO:SubProcess create_model() end ==================================
2024-04-15 10:02:55,135:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best') result for F1 is 0.544
2024-04-15 10:02:55,135:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.005, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best') result for F1 is 0.4516
2024-04-15 10:02:55,135:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best') is best model
2024-04-15 10:02:55,135:INFO:choose_better completed
2024-04-15 10:02:55,136:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-04-15 10:02:55,143:INFO:_master_model_container: 4
2024-04-15 10:02:55,143:INFO:_display_container: 5
2024-04-15 10:02:55,144:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best')
2024-04-15 10:02:55,144:INFO:tune_model() successfully completed......................................
2024-04-15 10:02:55,439:INFO:Initializing predict_model()
2024-04-15 10:02:55,439:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586BC7280>)
2024-04-15 10:02:55,439:INFO:Checking exceptions
2024-04-15 10:02:55,439:INFO:Preloading libraries
2024-04-15 10:02:55,849:INFO:Initializing finalize_model()
2024-04-15 10:02:55,850:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 10:02:55,850:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best')
2024-04-15 10:02:55,852:INFO:Initializing create_model()
2024-04-15 10:02:55,853:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E197F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4615, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 10:02:55,853:INFO:Checking exceptions
2024-04-15 10:02:55,854:INFO:Importing libraries
2024-04-15 10:02:55,854:INFO:Copying training dataset
2024-04-15 10:02:55,854:INFO:Defining folds
2024-04-15 10:02:55,854:INFO:Declaring metric variables
2024-04-15 10:02:55,854:INFO:Importing untrained model
2024-04-15 10:02:55,854:INFO:Declaring custom model
2024-04-15 10:02:55,855:INFO:Decision Tree Classifier Imported successfully
2024-04-15 10:02:55,855:INFO:Cross validation set to False
2024-04-15 10:02:55,856:INFO:Fitting Model
2024-04-15 10:02:55,925:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=4615, splitter='best'))],
         verbose=False)
2024-04-15 10:02:55,925:INFO:create_model() successfully completed......................................
2024-04-15 10:02:56,203:INFO:_master_model_container: 4
2024-04-15 10:02:56,203:INFO:_display_container: 6
2024-04-15 10:02:56,207:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=4615, splitter='best'))],
         verbose=False)
2024-04-15 10:02:56,207:INFO:finalize_model() successfully completed......................................
2024-04-15 10:02:56,494:INFO:Initializing save_model()
2024-04-15 10:02:56,494:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=4615, splitter='best'))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 10:02:56,495:INFO:Adding model into prep_pipe
2024-04-15 10:02:56,495:WARNING:Only Model saved as it was a pipeline.
2024-04-15 10:02:56,498:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 10:02:56,502:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=4615, splitter='best'))],
         verbose=False)
2024-04-15 10:02:56,502:INFO:save_model() successfully completed......................................
2024-04-15 10:02:56,778:INFO:Initializing load_model()
2024-04-15 10:02:56,779:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 10:02:56,849:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 10:02:59,780:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\343824390.py:81: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 15:20:44,919:INFO:PyCaret ClassificationExperiment
2024-04-15 15:20:44,919:INFO:Logging name: clf-default-name
2024-04-15 15:20:44,919:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 15:20:44,919:INFO:version 3.2.0
2024-04-15 15:20:44,919:INFO:Initializing setup()
2024-04-15 15:20:44,919:INFO:self.USI: 79ff
2024-04-15 15:20:44,919:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 15:20:44,919:INFO:Checking environment
2024-04-15 15:20:44,920:INFO:python_version: 3.8.0
2024-04-15 15:20:44,920:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 15:20:44,920:INFO:machine: AMD64
2024-04-15 15:20:44,920:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 15:20:44,926:INFO:Memory: svmem(total=34301427712, available=17822593024, percent=48.0, used=16478834688, free=17822593024)
2024-04-15 15:20:44,926:INFO:Physical Core: 6
2024-04-15 15:20:44,926:INFO:Logical Core: 12
2024-04-15 15:20:44,926:INFO:Checking libraries
2024-04-15 15:20:44,926:INFO:System:
2024-04-15 15:20:44,926:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 15:20:44,926:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 15:20:44,926:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 15:20:44,926:INFO:PyCaret required dependencies:
2024-04-15 15:20:44,926:INFO:                 pip: 19.2.3
2024-04-15 15:20:44,926:INFO:          setuptools: 41.2.0
2024-04-15 15:20:44,926:INFO:             pycaret: 3.2.0
2024-04-15 15:20:44,926:INFO:             IPython: 8.12.3
2024-04-15 15:20:44,926:INFO:          ipywidgets: 8.1.2
2024-04-15 15:20:44,926:INFO:                tqdm: 4.66.2
2024-04-15 15:20:44,926:INFO:               numpy: 1.24.4
2024-04-15 15:20:44,926:INFO:              pandas: 1.5.3
2024-04-15 15:20:44,926:INFO:              jinja2: 3.1.3
2024-04-15 15:20:44,926:INFO:               scipy: 1.10.1
2024-04-15 15:20:44,926:INFO:              joblib: 1.3.2
2024-04-15 15:20:44,927:INFO:             sklearn: 1.2.0
2024-04-15 15:20:44,927:INFO:                pyod: 1.1.3
2024-04-15 15:20:44,927:INFO:            imblearn: 0.12.2
2024-04-15 15:20:44,927:INFO:   category_encoders: 2.6.3
2024-04-15 15:20:44,927:INFO:            lightgbm: 4.3.0
2024-04-15 15:20:44,927:INFO:               numba: 0.58.1
2024-04-15 15:20:44,927:INFO:            requests: 2.31.0
2024-04-15 15:20:44,927:INFO:          matplotlib: 3.6.0
2024-04-15 15:20:44,927:INFO:          scikitplot: 0.3.7
2024-04-15 15:20:44,927:INFO:         yellowbrick: 1.5
2024-04-15 15:20:44,927:INFO:              plotly: 5.20.0
2024-04-15 15:20:44,927:INFO:    plotly-resampler: Not installed
2024-04-15 15:20:44,927:INFO:             kaleido: 0.2.1
2024-04-15 15:20:44,927:INFO:           schemdraw: 0.15
2024-04-15 15:20:44,927:INFO:         statsmodels: 0.14.1
2024-04-15 15:20:44,927:INFO:              sktime: 0.21.1
2024-04-15 15:20:44,927:INFO:               tbats: 1.1.3
2024-04-15 15:20:44,927:INFO:            pmdarima: 2.0.4
2024-04-15 15:20:44,928:INFO:              psutil: 5.9.8
2024-04-15 15:20:44,928:INFO:          markupsafe: 2.1.5
2024-04-15 15:20:44,928:INFO:             pickle5: Not installed
2024-04-15 15:20:44,928:INFO:         cloudpickle: 3.0.0
2024-04-15 15:20:44,928:INFO:         deprecation: 2.1.0
2024-04-15 15:20:44,928:INFO:              xxhash: 3.4.1
2024-04-15 15:20:44,928:INFO:           wurlitzer: Not installed
2024-04-15 15:20:44,928:INFO:PyCaret optional dependencies:
2024-04-15 15:20:44,928:INFO:                shap: Not installed
2024-04-15 15:20:44,928:INFO:           interpret: Not installed
2024-04-15 15:20:44,928:INFO:                umap: Not installed
2024-04-15 15:20:44,928:INFO:     ydata_profiling: Not installed
2024-04-15 15:20:44,928:INFO:  explainerdashboard: Not installed
2024-04-15 15:20:44,928:INFO:             autoviz: Not installed
2024-04-15 15:20:44,928:INFO:           fairlearn: Not installed
2024-04-15 15:20:44,928:INFO:          deepchecks: Not installed
2024-04-15 15:20:44,928:INFO:             xgboost: Not installed
2024-04-15 15:20:44,928:INFO:            catboost: Not installed
2024-04-15 15:20:44,928:INFO:              kmodes: Not installed
2024-04-15 15:20:44,928:INFO:             mlxtend: Not installed
2024-04-15 15:20:44,928:INFO:       statsforecast: Not installed
2024-04-15 15:20:44,928:INFO:        tune_sklearn: Not installed
2024-04-15 15:20:44,928:INFO:                 ray: Not installed
2024-04-15 15:20:44,928:INFO:            hyperopt: Not installed
2024-04-15 15:20:44,928:INFO:              optuna: Not installed
2024-04-15 15:20:44,929:INFO:               skopt: Not installed
2024-04-15 15:20:44,929:INFO:              mlflow: 2.11.3
2024-04-15 15:20:44,929:INFO:              gradio: Not installed
2024-04-15 15:20:44,929:INFO:             fastapi: Not installed
2024-04-15 15:20:44,929:INFO:             uvicorn: Not installed
2024-04-15 15:20:44,929:INFO:              m2cgen: Not installed
2024-04-15 15:20:44,929:INFO:           evidently: Not installed
2024-04-15 15:20:44,929:INFO:               fugue: Not installed
2024-04-15 15:20:44,929:INFO:           streamlit: 1.33.0
2024-04-15 15:20:44,929:INFO:             prophet: Not installed
2024-04-15 15:20:44,929:INFO:None
2024-04-15 15:20:44,929:INFO:Set up data.
2024-04-15 15:20:44,936:INFO:Set up folding strategy.
2024-04-15 15:20:44,936:INFO:Set up train/test split.
2024-04-15 15:20:44,936:INFO:Set up data.
2024-04-15 15:20:44,939:INFO:Set up index.
2024-04-15 15:20:44,939:INFO:Assigning column types.
2024-04-15 15:20:44,942:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 15:20:44,980:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:20:44,980:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:20:45,003:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,003:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,042:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:20:45,043:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:20:45,067:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,068:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 15:20:45,105:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:20:45,130:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,175:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:20:45,201:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,201:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 15:20:45,291:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,292:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,370:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,370:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,371:INFO:Preparing preprocessing pipeline...
2024-04-15 15:20:45,372:INFO:Set up simple imputation.
2024-04-15 15:20:45,372:INFO:Set up feature normalization.
2024-04-15 15:20:45,391:INFO:Finished creating preprocessing pipeline.
2024-04-15 15:20:45,395:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 15:20:45,395:INFO:Creating final display dataframe.
2024-04-15 15:20:45,463:INFO:Setup _display_container:                     Description             Value
0                    Session id              2672
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              79ff
2024-04-15 15:20:45,534:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,534:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,598:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,599:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:20:45,599:INFO:setup() successfully completed in 0.68s...............
2024-04-15 15:20:45,600:INFO:Initializing compare_models()
2024-04-15 15:20:45,600:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 15:20:45,600:INFO:Checking exceptions
2024-04-15 15:20:45,604:INFO:Preparing display monitor
2024-04-15 15:20:45,621:INFO:Initializing Logistic Regression
2024-04-15 15:20:45,621:INFO:Total runtime is 0.0 minutes
2024-04-15 15:20:45,624:INFO:SubProcess create_model() called ==================================
2024-04-15 15:20:45,624:INFO:Initializing create_model()
2024-04-15 15:20:45,624:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5885B4D00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:20:45,624:INFO:Checking exceptions
2024-04-15 15:20:45,625:INFO:Importing libraries
2024-04-15 15:20:45,625:INFO:Copying training dataset
2024-04-15 15:20:45,630:INFO:Defining folds
2024-04-15 15:20:45,630:INFO:Declaring metric variables
2024-04-15 15:20:45,634:INFO:Importing untrained model
2024-04-15 15:20:45,637:INFO:Logistic Regression Imported successfully
2024-04-15 15:20:45,641:INFO:Starting cross validation
2024-04-15 15:20:45,642:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:20:55,026:INFO:Calculating mean and std
2024-04-15 15:20:55,029:INFO:Creating metrics dataframe
2024-04-15 15:20:55,036:INFO:Uploading results into container
2024-04-15 15:20:55,037:INFO:Uploading model into container now
2024-04-15 15:20:55,038:INFO:_master_model_container: 1
2024-04-15 15:20:55,038:INFO:_display_container: 2
2024-04-15 15:20:55,039:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:20:55,039:INFO:create_model() successfully completed......................................
2024-04-15 15:20:55,625:INFO:SubProcess create_model() end ==================================
2024-04-15 15:20:55,625:INFO:Creating metrics dataframe
2024-04-15 15:20:55,634:INFO:Initializing Decision Tree Classifier
2024-04-15 15:20:55,634:INFO:Total runtime is 0.1668876846631368 minutes
2024-04-15 15:20:55,637:INFO:SubProcess create_model() called ==================================
2024-04-15 15:20:55,638:INFO:Initializing create_model()
2024-04-15 15:20:55,638:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5885B4D00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:20:55,638:INFO:Checking exceptions
2024-04-15 15:20:55,638:INFO:Importing libraries
2024-04-15 15:20:55,638:INFO:Copying training dataset
2024-04-15 15:20:55,644:INFO:Defining folds
2024-04-15 15:20:55,644:INFO:Declaring metric variables
2024-04-15 15:20:55,647:INFO:Importing untrained model
2024-04-15 15:20:55,650:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:20:55,658:INFO:Starting cross validation
2024-04-15 15:20:55,659:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:20:58,013:INFO:Calculating mean and std
2024-04-15 15:20:58,015:INFO:Creating metrics dataframe
2024-04-15 15:20:58,020:INFO:Uploading results into container
2024-04-15 15:20:58,021:INFO:Uploading model into container now
2024-04-15 15:20:58,022:INFO:_master_model_container: 2
2024-04-15 15:20:58,022:INFO:_display_container: 2
2024-04-15 15:20:58,022:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2672, splitter='best')
2024-04-15 15:20:58,022:INFO:create_model() successfully completed......................................
2024-04-15 15:20:58,388:INFO:SubProcess create_model() end ==================================
2024-04-15 15:20:58,388:INFO:Creating metrics dataframe
2024-04-15 15:20:58,402:INFO:Initializing create_model()
2024-04-15 15:20:58,402:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2672, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:20:58,402:INFO:Checking exceptions
2024-04-15 15:20:58,404:INFO:Importing libraries
2024-04-15 15:20:58,404:INFO:Copying training dataset
2024-04-15 15:20:58,408:INFO:Defining folds
2024-04-15 15:20:58,408:INFO:Declaring metric variables
2024-04-15 15:20:58,408:INFO:Importing untrained model
2024-04-15 15:20:58,408:INFO:Declaring custom model
2024-04-15 15:20:58,409:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:20:58,410:INFO:Cross validation set to False
2024-04-15 15:20:58,410:INFO:Fitting Model
2024-04-15 15:20:58,464:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2672, splitter='best')
2024-04-15 15:20:58,464:INFO:create_model() successfully completed......................................
2024-04-15 15:20:58,775:INFO:Initializing create_model()
2024-04-15 15:20:58,776:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:20:58,776:INFO:Checking exceptions
2024-04-15 15:20:58,778:INFO:Importing libraries
2024-04-15 15:20:58,778:INFO:Copying training dataset
2024-04-15 15:20:58,783:INFO:Defining folds
2024-04-15 15:20:58,783:INFO:Declaring metric variables
2024-04-15 15:20:58,783:INFO:Importing untrained model
2024-04-15 15:20:58,783:INFO:Declaring custom model
2024-04-15 15:20:58,783:INFO:Logistic Regression Imported successfully
2024-04-15 15:20:58,784:INFO:Cross validation set to False
2024-04-15 15:20:58,784:INFO:Fitting Model
2024-04-15 15:20:58,800:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:20:58,801:INFO:create_model() successfully completed......................................
2024-04-15 15:20:59,178:INFO:_master_model_container: 2
2024-04-15 15:20:59,178:INFO:_display_container: 2
2024-04-15 15:20:59,179:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2672, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2672, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 15:20:59,179:INFO:compare_models() successfully completed......................................
2024-04-15 15:20:59,179:INFO:Initializing predict_model()
2024-04-15 15:20:59,179:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C592A53310>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2672, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5997D0550>)
2024-04-15 15:20:59,180:INFO:Checking exceptions
2024-04-15 15:20:59,180:INFO:Preloading libraries
2024-04-15 15:23:35,140:INFO:PyCaret ClassificationExperiment
2024-04-15 15:23:35,140:INFO:Logging name: clf-default-name
2024-04-15 15:23:35,140:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 15:23:35,140:INFO:version 3.2.0
2024-04-15 15:23:35,140:INFO:Initializing setup()
2024-04-15 15:23:35,140:INFO:self.USI: 1dc0
2024-04-15 15:23:35,140:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 15:23:35,140:INFO:Checking environment
2024-04-15 15:23:35,141:INFO:python_version: 3.8.0
2024-04-15 15:23:35,141:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 15:23:35,141:INFO:machine: AMD64
2024-04-15 15:23:35,141:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 15:23:35,148:INFO:Memory: svmem(total=34301427712, available=17875419136, percent=47.9, used=16426008576, free=17875419136)
2024-04-15 15:23:35,149:INFO:Physical Core: 6
2024-04-15 15:23:35,149:INFO:Logical Core: 12
2024-04-15 15:23:35,149:INFO:Checking libraries
2024-04-15 15:23:35,149:INFO:System:
2024-04-15 15:23:35,149:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 15:23:35,149:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 15:23:35,149:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 15:23:35,149:INFO:PyCaret required dependencies:
2024-04-15 15:23:35,149:INFO:                 pip: 19.2.3
2024-04-15 15:23:35,149:INFO:          setuptools: 41.2.0
2024-04-15 15:23:35,149:INFO:             pycaret: 3.2.0
2024-04-15 15:23:35,149:INFO:             IPython: 8.12.3
2024-04-15 15:23:35,149:INFO:          ipywidgets: 8.1.2
2024-04-15 15:23:35,149:INFO:                tqdm: 4.66.2
2024-04-15 15:23:35,149:INFO:               numpy: 1.24.4
2024-04-15 15:23:35,149:INFO:              pandas: 1.5.3
2024-04-15 15:23:35,149:INFO:              jinja2: 3.1.3
2024-04-15 15:23:35,149:INFO:               scipy: 1.10.1
2024-04-15 15:23:35,149:INFO:              joblib: 1.3.2
2024-04-15 15:23:35,149:INFO:             sklearn: 1.2.0
2024-04-15 15:23:35,149:INFO:                pyod: 1.1.3
2024-04-15 15:23:35,149:INFO:            imblearn: 0.12.2
2024-04-15 15:23:35,149:INFO:   category_encoders: 2.6.3
2024-04-15 15:23:35,149:INFO:            lightgbm: 4.3.0
2024-04-15 15:23:35,149:INFO:               numba: 0.58.1
2024-04-15 15:23:35,149:INFO:            requests: 2.31.0
2024-04-15 15:23:35,149:INFO:          matplotlib: 3.6.0
2024-04-15 15:23:35,149:INFO:          scikitplot: 0.3.7
2024-04-15 15:23:35,149:INFO:         yellowbrick: 1.5
2024-04-15 15:23:35,149:INFO:              plotly: 5.20.0
2024-04-15 15:23:35,149:INFO:    plotly-resampler: Not installed
2024-04-15 15:23:35,149:INFO:             kaleido: 0.2.1
2024-04-15 15:23:35,149:INFO:           schemdraw: 0.15
2024-04-15 15:23:35,150:INFO:         statsmodels: 0.14.1
2024-04-15 15:23:35,150:INFO:              sktime: 0.21.1
2024-04-15 15:23:35,150:INFO:               tbats: 1.1.3
2024-04-15 15:23:35,150:INFO:            pmdarima: 2.0.4
2024-04-15 15:23:35,150:INFO:              psutil: 5.9.8
2024-04-15 15:23:35,150:INFO:          markupsafe: 2.1.5
2024-04-15 15:23:35,150:INFO:             pickle5: Not installed
2024-04-15 15:23:35,150:INFO:         cloudpickle: 3.0.0
2024-04-15 15:23:35,150:INFO:         deprecation: 2.1.0
2024-04-15 15:23:35,150:INFO:              xxhash: 3.4.1
2024-04-15 15:23:35,150:INFO:           wurlitzer: Not installed
2024-04-15 15:23:35,150:INFO:PyCaret optional dependencies:
2024-04-15 15:23:35,150:INFO:                shap: Not installed
2024-04-15 15:23:35,150:INFO:           interpret: Not installed
2024-04-15 15:23:35,150:INFO:                umap: Not installed
2024-04-15 15:23:35,150:INFO:     ydata_profiling: Not installed
2024-04-15 15:23:35,150:INFO:  explainerdashboard: Not installed
2024-04-15 15:23:35,150:INFO:             autoviz: Not installed
2024-04-15 15:23:35,150:INFO:           fairlearn: Not installed
2024-04-15 15:23:35,150:INFO:          deepchecks: Not installed
2024-04-15 15:23:35,150:INFO:             xgboost: Not installed
2024-04-15 15:23:35,150:INFO:            catboost: Not installed
2024-04-15 15:23:35,150:INFO:              kmodes: Not installed
2024-04-15 15:23:35,150:INFO:             mlxtend: Not installed
2024-04-15 15:23:35,150:INFO:       statsforecast: Not installed
2024-04-15 15:23:35,150:INFO:        tune_sklearn: Not installed
2024-04-15 15:23:35,150:INFO:                 ray: Not installed
2024-04-15 15:23:35,150:INFO:            hyperopt: Not installed
2024-04-15 15:23:35,150:INFO:              optuna: Not installed
2024-04-15 15:23:35,151:INFO:               skopt: Not installed
2024-04-15 15:23:35,151:INFO:              mlflow: 2.11.3
2024-04-15 15:23:35,151:INFO:              gradio: Not installed
2024-04-15 15:23:35,151:INFO:             fastapi: Not installed
2024-04-15 15:23:35,151:INFO:             uvicorn: Not installed
2024-04-15 15:23:35,151:INFO:              m2cgen: Not installed
2024-04-15 15:23:35,151:INFO:           evidently: Not installed
2024-04-15 15:23:35,151:INFO:               fugue: Not installed
2024-04-15 15:23:35,151:INFO:           streamlit: 1.33.0
2024-04-15 15:23:35,151:INFO:             prophet: Not installed
2024-04-15 15:23:35,151:INFO:None
2024-04-15 15:23:35,151:INFO:Set up data.
2024-04-15 15:23:35,156:INFO:Set up folding strategy.
2024-04-15 15:23:35,156:INFO:Set up train/test split.
2024-04-15 15:23:35,156:INFO:Set up data.
2024-04-15 15:23:35,161:INFO:Set up index.
2024-04-15 15:23:35,161:INFO:Assigning column types.
2024-04-15 15:23:35,164:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 15:23:35,208:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:23:35,209:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:23:35,243:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,244:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,289:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:23:35,290:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:23:35,317:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,317:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,317:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 15:23:35,372:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:23:35,397:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,398:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,435:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:23:35,459:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,459:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,460:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 15:23:35,526:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,527:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,596:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,596:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,598:INFO:Preparing preprocessing pipeline...
2024-04-15 15:23:35,599:INFO:Set up simple imputation.
2024-04-15 15:23:35,599:INFO:Set up feature normalization.
2024-04-15 15:23:35,616:INFO:Finished creating preprocessing pipeline.
2024-04-15 15:23:35,619:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 15:23:35,620:INFO:Creating final display dataframe.
2024-04-15 15:23:35,693:INFO:Setup _display_container:                     Description             Value
0                    Session id              8792
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              1dc0
2024-04-15 15:23:35,763:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,839:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:23:35,840:INFO:setup() successfully completed in 0.7s...............
2024-04-15 15:23:35,841:INFO:Initializing compare_models()
2024-04-15 15:23:35,841:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 15:23:35,841:INFO:Checking exceptions
2024-04-15 15:23:35,844:INFO:Preparing display monitor
2024-04-15 15:23:35,861:INFO:Initializing Logistic Regression
2024-04-15 15:23:35,862:INFO:Total runtime is 1.6669432322184246e-05 minutes
2024-04-15 15:23:35,864:INFO:SubProcess create_model() called ==================================
2024-04-15 15:23:35,864:INFO:Initializing create_model()
2024-04-15 15:23:35,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5998A3F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:23:35,864:INFO:Checking exceptions
2024-04-15 15:23:35,864:INFO:Importing libraries
2024-04-15 15:23:35,864:INFO:Copying training dataset
2024-04-15 15:23:35,871:INFO:Defining folds
2024-04-15 15:23:35,871:INFO:Declaring metric variables
2024-04-15 15:23:35,875:INFO:Importing untrained model
2024-04-15 15:23:35,878:INFO:Logistic Regression Imported successfully
2024-04-15 15:23:35,883:INFO:Starting cross validation
2024-04-15 15:23:35,884:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:23:40,044:INFO:Calculating mean and std
2024-04-15 15:23:40,046:INFO:Creating metrics dataframe
2024-04-15 15:23:40,051:INFO:Uploading results into container
2024-04-15 15:23:40,052:INFO:Uploading model into container now
2024-04-15 15:23:40,053:INFO:_master_model_container: 1
2024-04-15 15:23:40,053:INFO:_display_container: 2
2024-04-15 15:23:40,053:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8792, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:23:40,053:INFO:create_model() successfully completed......................................
2024-04-15 15:23:40,402:INFO:SubProcess create_model() end ==================================
2024-04-15 15:23:40,402:INFO:Creating metrics dataframe
2024-04-15 15:23:40,410:INFO:Initializing Decision Tree Classifier
2024-04-15 15:23:40,410:INFO:Total runtime is 0.07581880887349447 minutes
2024-04-15 15:23:40,413:INFO:SubProcess create_model() called ==================================
2024-04-15 15:23:40,413:INFO:Initializing create_model()
2024-04-15 15:23:40,413:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5998A3F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:23:40,413:INFO:Checking exceptions
2024-04-15 15:23:40,413:INFO:Importing libraries
2024-04-15 15:23:40,413:INFO:Copying training dataset
2024-04-15 15:23:40,418:INFO:Defining folds
2024-04-15 15:23:40,418:INFO:Declaring metric variables
2024-04-15 15:23:40,421:INFO:Importing untrained model
2024-04-15 15:23:40,424:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:23:40,428:INFO:Starting cross validation
2024-04-15 15:23:40,429:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:23:42,358:INFO:Calculating mean and std
2024-04-15 15:23:42,360:INFO:Creating metrics dataframe
2024-04-15 15:23:42,365:INFO:Uploading results into container
2024-04-15 15:23:42,366:INFO:Uploading model into container now
2024-04-15 15:23:42,367:INFO:_master_model_container: 2
2024-04-15 15:23:42,367:INFO:_display_container: 2
2024-04-15 15:23:42,367:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8792, splitter='best')
2024-04-15 15:23:42,367:INFO:create_model() successfully completed......................................
2024-04-15 15:23:42,701:INFO:SubProcess create_model() end ==================================
2024-04-15 15:23:42,701:INFO:Creating metrics dataframe
2024-04-15 15:23:42,716:INFO:Initializing create_model()
2024-04-15 15:23:42,716:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8792, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:23:42,716:INFO:Checking exceptions
2024-04-15 15:23:42,718:INFO:Importing libraries
2024-04-15 15:23:42,718:INFO:Copying training dataset
2024-04-15 15:23:42,722:INFO:Defining folds
2024-04-15 15:23:42,722:INFO:Declaring metric variables
2024-04-15 15:23:42,723:INFO:Importing untrained model
2024-04-15 15:23:42,723:INFO:Declaring custom model
2024-04-15 15:23:42,723:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:23:42,724:INFO:Cross validation set to False
2024-04-15 15:23:42,724:INFO:Fitting Model
2024-04-15 15:23:42,779:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8792, splitter='best')
2024-04-15 15:23:42,779:INFO:create_model() successfully completed......................................
2024-04-15 15:23:43,097:INFO:Initializing create_model()
2024-04-15 15:23:43,097:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8792, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:23:43,097:INFO:Checking exceptions
2024-04-15 15:23:43,099:INFO:Importing libraries
2024-04-15 15:23:43,099:INFO:Copying training dataset
2024-04-15 15:23:43,103:INFO:Defining folds
2024-04-15 15:23:43,103:INFO:Declaring metric variables
2024-04-15 15:23:43,103:INFO:Importing untrained model
2024-04-15 15:23:43,104:INFO:Declaring custom model
2024-04-15 15:23:43,104:INFO:Logistic Regression Imported successfully
2024-04-15 15:23:43,105:INFO:Cross validation set to False
2024-04-15 15:23:43,105:INFO:Fitting Model
2024-04-15 15:23:43,122:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8792, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:23:43,122:INFO:create_model() successfully completed......................................
2024-04-15 15:23:43,466:INFO:_master_model_container: 2
2024-04-15 15:23:43,466:INFO:_display_container: 2
2024-04-15 15:23:43,466:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8792, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8792, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 15:23:43,467:INFO:compare_models() successfully completed......................................
2024-04-15 15:23:43,467:INFO:Initializing predict_model()
2024-04-15 15:23:43,467:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58FEFE4F0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8792, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E22DF70>)
2024-04-15 15:23:43,467:INFO:Checking exceptions
2024-04-15 15:23:43,467:INFO:Preloading libraries
2024-04-15 15:30:53,355:INFO:PyCaret ClassificationExperiment
2024-04-15 15:30:53,355:INFO:Logging name: clf-default-name
2024-04-15 15:30:53,355:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 15:30:53,355:INFO:version 3.2.0
2024-04-15 15:30:53,355:INFO:Initializing setup()
2024-04-15 15:30:53,355:INFO:self.USI: a23c
2024-04-15 15:30:53,355:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 15:30:53,355:INFO:Checking environment
2024-04-15 15:30:53,355:INFO:python_version: 3.8.0
2024-04-15 15:30:53,355:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 15:30:53,355:INFO:machine: AMD64
2024-04-15 15:30:53,355:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 15:30:53,364:INFO:Memory: svmem(total=34301427712, available=17758838784, percent=48.2, used=16542588928, free=17758838784)
2024-04-15 15:30:53,364:INFO:Physical Core: 6
2024-04-15 15:30:53,364:INFO:Logical Core: 12
2024-04-15 15:30:53,365:INFO:Checking libraries
2024-04-15 15:30:53,365:INFO:System:
2024-04-15 15:30:53,365:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 15:30:53,365:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 15:30:53,365:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 15:30:53,365:INFO:PyCaret required dependencies:
2024-04-15 15:30:53,365:INFO:                 pip: 19.2.3
2024-04-15 15:30:53,365:INFO:          setuptools: 41.2.0
2024-04-15 15:30:53,365:INFO:             pycaret: 3.2.0
2024-04-15 15:30:53,365:INFO:             IPython: 8.12.3
2024-04-15 15:30:53,365:INFO:          ipywidgets: 8.1.2
2024-04-15 15:30:53,365:INFO:                tqdm: 4.66.2
2024-04-15 15:30:53,366:INFO:               numpy: 1.24.4
2024-04-15 15:30:53,366:INFO:              pandas: 1.5.3
2024-04-15 15:30:53,366:INFO:              jinja2: 3.1.3
2024-04-15 15:30:53,366:INFO:               scipy: 1.10.1
2024-04-15 15:30:53,366:INFO:              joblib: 1.3.2
2024-04-15 15:30:53,366:INFO:             sklearn: 1.2.0
2024-04-15 15:30:53,366:INFO:                pyod: 1.1.3
2024-04-15 15:30:53,366:INFO:            imblearn: 0.12.2
2024-04-15 15:30:53,366:INFO:   category_encoders: 2.6.3
2024-04-15 15:30:53,366:INFO:            lightgbm: 4.3.0
2024-04-15 15:30:53,366:INFO:               numba: 0.58.1
2024-04-15 15:30:53,366:INFO:            requests: 2.31.0
2024-04-15 15:30:53,366:INFO:          matplotlib: 3.6.0
2024-04-15 15:30:53,366:INFO:          scikitplot: 0.3.7
2024-04-15 15:30:53,366:INFO:         yellowbrick: 1.5
2024-04-15 15:30:53,366:INFO:              plotly: 5.20.0
2024-04-15 15:30:53,366:INFO:    plotly-resampler: Not installed
2024-04-15 15:30:53,366:INFO:             kaleido: 0.2.1
2024-04-15 15:30:53,366:INFO:           schemdraw: 0.15
2024-04-15 15:30:53,366:INFO:         statsmodels: 0.14.1
2024-04-15 15:30:53,366:INFO:              sktime: 0.21.1
2024-04-15 15:30:53,366:INFO:               tbats: 1.1.3
2024-04-15 15:30:53,366:INFO:            pmdarima: 2.0.4
2024-04-15 15:30:53,367:INFO:              psutil: 5.9.8
2024-04-15 15:30:53,367:INFO:          markupsafe: 2.1.5
2024-04-15 15:30:53,367:INFO:             pickle5: Not installed
2024-04-15 15:30:53,367:INFO:         cloudpickle: 3.0.0
2024-04-15 15:30:53,367:INFO:         deprecation: 2.1.0
2024-04-15 15:30:53,367:INFO:              xxhash: 3.4.1
2024-04-15 15:30:53,367:INFO:           wurlitzer: Not installed
2024-04-15 15:30:53,367:INFO:PyCaret optional dependencies:
2024-04-15 15:30:53,367:INFO:                shap: Not installed
2024-04-15 15:30:53,367:INFO:           interpret: Not installed
2024-04-15 15:30:53,367:INFO:                umap: Not installed
2024-04-15 15:30:53,367:INFO:     ydata_profiling: Not installed
2024-04-15 15:30:53,367:INFO:  explainerdashboard: Not installed
2024-04-15 15:30:53,367:INFO:             autoviz: Not installed
2024-04-15 15:30:53,367:INFO:           fairlearn: Not installed
2024-04-15 15:30:53,367:INFO:          deepchecks: Not installed
2024-04-15 15:30:53,367:INFO:             xgboost: Not installed
2024-04-15 15:30:53,367:INFO:            catboost: Not installed
2024-04-15 15:30:53,367:INFO:              kmodes: Not installed
2024-04-15 15:30:53,367:INFO:             mlxtend: Not installed
2024-04-15 15:30:53,367:INFO:       statsforecast: Not installed
2024-04-15 15:30:53,367:INFO:        tune_sklearn: Not installed
2024-04-15 15:30:53,367:INFO:                 ray: Not installed
2024-04-15 15:30:53,367:INFO:            hyperopt: Not installed
2024-04-15 15:30:53,367:INFO:              optuna: Not installed
2024-04-15 15:30:53,367:INFO:               skopt: Not installed
2024-04-15 15:30:53,367:INFO:              mlflow: 2.11.3
2024-04-15 15:30:53,367:INFO:              gradio: Not installed
2024-04-15 15:30:53,367:INFO:             fastapi: Not installed
2024-04-15 15:30:53,367:INFO:             uvicorn: Not installed
2024-04-15 15:30:53,367:INFO:              m2cgen: Not installed
2024-04-15 15:30:53,368:INFO:           evidently: Not installed
2024-04-15 15:30:53,368:INFO:               fugue: Not installed
2024-04-15 15:30:53,368:INFO:           streamlit: 1.33.0
2024-04-15 15:30:53,368:INFO:             prophet: Not installed
2024-04-15 15:30:53,368:INFO:None
2024-04-15 15:30:53,368:INFO:Set up data.
2024-04-15 15:30:53,375:INFO:Set up folding strategy.
2024-04-15 15:30:53,375:INFO:Set up train/test split.
2024-04-15 15:30:53,375:INFO:Set up data.
2024-04-15 15:30:53,380:INFO:Set up index.
2024-04-15 15:30:53,380:INFO:Assigning column types.
2024-04-15 15:30:53,383:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 15:30:53,428:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:30:53,429:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:30:53,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,456:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,498:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:30:53,499:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:30:53,525:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,526:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,526:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 15:30:53,567:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:30:53,590:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,591:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,627:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:30:53,648:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,649:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 15:30:53,707:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,708:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,770:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,771:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,772:INFO:Preparing preprocessing pipeline...
2024-04-15 15:30:53,774:INFO:Set up simple imputation.
2024-04-15 15:30:53,774:INFO:Set up feature normalization.
2024-04-15 15:30:53,790:INFO:Finished creating preprocessing pipeline.
2024-04-15 15:30:53,794:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 15:30:53,794:INFO:Creating final display dataframe.
2024-04-15 15:30:53,854:INFO:Setup _display_container:                     Description             Value
0                    Session id              3988
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              a23c
2024-04-15 15:30:53,921:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,922:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,992:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,992:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:30:53,993:INFO:setup() successfully completed in 0.64s...............
2024-04-15 15:30:53,994:INFO:Initializing compare_models()
2024-04-15 15:30:53,994:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 15:30:53,994:INFO:Checking exceptions
2024-04-15 15:30:53,997:INFO:Preparing display monitor
2024-04-15 15:30:54,015:INFO:Initializing Logistic Regression
2024-04-15 15:30:54,015:INFO:Total runtime is 1.6673405965169272e-05 minutes
2024-04-15 15:30:54,017:INFO:SubProcess create_model() called ==================================
2024-04-15 15:30:54,018:INFO:Initializing create_model()
2024-04-15 15:30:54,018:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5856E8640>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:30:54,018:INFO:Checking exceptions
2024-04-15 15:30:54,018:INFO:Importing libraries
2024-04-15 15:30:54,018:INFO:Copying training dataset
2024-04-15 15:30:54,023:INFO:Defining folds
2024-04-15 15:30:54,023:INFO:Declaring metric variables
2024-04-15 15:30:54,027:INFO:Importing untrained model
2024-04-15 15:30:54,030:INFO:Logistic Regression Imported successfully
2024-04-15 15:30:54,035:INFO:Starting cross validation
2024-04-15 15:30:54,036:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:30:58,225:INFO:Calculating mean and std
2024-04-15 15:30:58,229:INFO:Creating metrics dataframe
2024-04-15 15:30:58,235:INFO:Uploading results into container
2024-04-15 15:30:58,235:INFO:Uploading model into container now
2024-04-15 15:30:58,236:INFO:_master_model_container: 1
2024-04-15 15:30:58,236:INFO:_display_container: 2
2024-04-15 15:30:58,237:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:30:58,237:INFO:create_model() successfully completed......................................
2024-04-15 15:30:58,590:INFO:SubProcess create_model() end ==================================
2024-04-15 15:30:58,590:INFO:Creating metrics dataframe
2024-04-15 15:30:58,598:INFO:Initializing Decision Tree Classifier
2024-04-15 15:30:58,598:INFO:Total runtime is 0.07640057404836019 minutes
2024-04-15 15:30:58,601:INFO:SubProcess create_model() called ==================================
2024-04-15 15:30:58,601:INFO:Initializing create_model()
2024-04-15 15:30:58,601:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5856E8640>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:30:58,601:INFO:Checking exceptions
2024-04-15 15:30:58,601:INFO:Importing libraries
2024-04-15 15:30:58,601:INFO:Copying training dataset
2024-04-15 15:30:58,608:INFO:Defining folds
2024-04-15 15:30:58,608:INFO:Declaring metric variables
2024-04-15 15:30:58,611:INFO:Importing untrained model
2024-04-15 15:30:58,614:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:30:58,619:INFO:Starting cross validation
2024-04-15 15:30:58,620:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:31:00,556:INFO:Calculating mean and std
2024-04-15 15:31:00,558:INFO:Creating metrics dataframe
2024-04-15 15:31:00,564:INFO:Uploading results into container
2024-04-15 15:31:00,564:INFO:Uploading model into container now
2024-04-15 15:31:00,565:INFO:_master_model_container: 2
2024-04-15 15:31:00,565:INFO:_display_container: 2
2024-04-15 15:31:00,565:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3988, splitter='best')
2024-04-15 15:31:00,565:INFO:create_model() successfully completed......................................
2024-04-15 15:31:00,919:INFO:SubProcess create_model() end ==================================
2024-04-15 15:31:00,919:INFO:Creating metrics dataframe
2024-04-15 15:31:00,935:INFO:Initializing create_model()
2024-04-15 15:31:00,935:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3988, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:31:00,935:INFO:Checking exceptions
2024-04-15 15:31:00,937:INFO:Importing libraries
2024-04-15 15:31:00,937:INFO:Copying training dataset
2024-04-15 15:31:00,941:INFO:Defining folds
2024-04-15 15:31:00,941:INFO:Declaring metric variables
2024-04-15 15:31:00,941:INFO:Importing untrained model
2024-04-15 15:31:00,941:INFO:Declaring custom model
2024-04-15 15:31:00,941:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:31:00,942:INFO:Cross validation set to False
2024-04-15 15:31:00,942:INFO:Fitting Model
2024-04-15 15:31:00,999:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3988, splitter='best')
2024-04-15 15:31:00,999:INFO:create_model() successfully completed......................................
2024-04-15 15:31:01,315:INFO:Initializing create_model()
2024-04-15 15:31:01,315:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:31:01,315:INFO:Checking exceptions
2024-04-15 15:31:01,317:INFO:Importing libraries
2024-04-15 15:31:01,317:INFO:Copying training dataset
2024-04-15 15:31:01,321:INFO:Defining folds
2024-04-15 15:31:01,321:INFO:Declaring metric variables
2024-04-15 15:31:01,321:INFO:Importing untrained model
2024-04-15 15:31:01,321:INFO:Declaring custom model
2024-04-15 15:31:01,322:INFO:Logistic Regression Imported successfully
2024-04-15 15:31:01,322:INFO:Cross validation set to False
2024-04-15 15:31:01,322:INFO:Fitting Model
2024-04-15 15:31:01,338:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:31:01,338:INFO:create_model() successfully completed......................................
2024-04-15 15:31:01,661:INFO:_master_model_container: 2
2024-04-15 15:31:01,661:INFO:_display_container: 2
2024-04-15 15:31:01,662:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3988, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 15:31:01,662:INFO:compare_models() successfully completed......................................
2024-04-15 15:31:02,761:INFO:Initializing predict_model()
2024-04-15 15:31:02,761:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3988, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597EED4C0>)
2024-04-15 15:31:02,761:INFO:Checking exceptions
2024-04-15 15:31:02,761:INFO:Preloading libraries
2024-04-15 15:31:03,729:INFO:Initializing predict_model()
2024-04-15 15:31:03,729:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5904FC430>)
2024-04-15 15:31:03,729:INFO:Checking exceptions
2024-04-15 15:31:03,729:INFO:Preloading libraries
2024-04-15 15:31:04,161:INFO:Initializing tune_model()
2024-04-15 15:31:04,161:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>)
2024-04-15 15:31:04,161:INFO:Checking exceptions
2024-04-15 15:31:04,174:INFO:Copying training dataset
2024-04-15 15:31:04,178:INFO:Checking base model
2024-04-15 15:31:04,178:INFO:Base model : Logistic Regression
2024-04-15 15:31:04,181:INFO:Declaring metric variables
2024-04-15 15:31:04,184:INFO:Defining Hyperparameters
2024-04-15 15:31:04,603:INFO:Tuning with n_jobs=-1
2024-04-15 15:31:04,603:INFO:Initializing RandomizedSearchCV
2024-04-15 15:31:04,876:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 4.431}
2024-04-15 15:31:04,876:INFO:Hyperparameter search completed
2024-04-15 15:31:04,876:INFO:SubProcess create_model() called ==================================
2024-04-15 15:31:04,877:INFO:Initializing create_model()
2024-04-15 15:31:04,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5997CD490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 4.431})
2024-04-15 15:31:04,877:INFO:Checking exceptions
2024-04-15 15:31:04,877:INFO:Importing libraries
2024-04-15 15:31:04,877:INFO:Copying training dataset
2024-04-15 15:31:04,881:INFO:Defining folds
2024-04-15 15:31:04,881:INFO:Declaring metric variables
2024-04-15 15:31:04,885:INFO:Importing untrained model
2024-04-15 15:31:04,885:INFO:Declaring custom model
2024-04-15 15:31:04,888:INFO:Logistic Regression Imported successfully
2024-04-15 15:31:04,892:INFO:Starting cross validation
2024-04-15 15:31:04,894:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:31:04,987:INFO:Calculating mean and std
2024-04-15 15:31:04,988:INFO:Creating metrics dataframe
2024-04-15 15:31:04,992:INFO:Finalizing model
2024-04-15 15:31:05,015:INFO:Uploading results into container
2024-04-15 15:31:05,016:INFO:Uploading model into container now
2024-04-15 15:31:05,016:INFO:_master_model_container: 3
2024-04-15 15:31:05,016:INFO:_display_container: 5
2024-04-15 15:31:05,017:INFO:LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:31:05,017:INFO:create_model() successfully completed......................................
2024-04-15 15:31:05,341:INFO:SubProcess create_model() end ==================================
2024-04-15 15:31:05,342:INFO:choose_better activated
2024-04-15 15:31:05,345:INFO:SubProcess create_model() called ==================================
2024-04-15 15:31:05,346:INFO:Initializing create_model()
2024-04-15 15:31:05,346:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:31:05,346:INFO:Checking exceptions
2024-04-15 15:31:05,347:INFO:Importing libraries
2024-04-15 15:31:05,347:INFO:Copying training dataset
2024-04-15 15:31:05,352:INFO:Defining folds
2024-04-15 15:31:05,352:INFO:Declaring metric variables
2024-04-15 15:31:05,352:INFO:Importing untrained model
2024-04-15 15:31:05,352:INFO:Declaring custom model
2024-04-15 15:31:05,352:INFO:Logistic Regression Imported successfully
2024-04-15 15:31:05,353:INFO:Starting cross validation
2024-04-15 15:31:05,353:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:31:05,450:INFO:Calculating mean and std
2024-04-15 15:31:05,451:INFO:Creating metrics dataframe
2024-04-15 15:31:05,452:INFO:Finalizing model
2024-04-15 15:31:05,469:INFO:Uploading results into container
2024-04-15 15:31:05,469:INFO:Uploading model into container now
2024-04-15 15:31:05,470:INFO:_master_model_container: 4
2024-04-15 15:31:05,470:INFO:_display_container: 6
2024-04-15 15:31:05,471:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:31:05,471:INFO:create_model() successfully completed......................................
2024-04-15 15:31:05,800:INFO:SubProcess create_model() end ==================================
2024-04-15 15:31:05,800:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 15:31:05,801:INFO:LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 15:31:05,801:INFO:LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 15:31:05,801:INFO:choose_better completed
2024-04-15 15:31:05,808:INFO:_master_model_container: 4
2024-04-15 15:31:05,808:INFO:_display_container: 5
2024-04-15 15:31:05,809:INFO:LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:31:05,809:INFO:tune_model() successfully completed......................................
2024-04-15 15:31:06,124:INFO:Initializing predict_model()
2024-04-15 15:31:06,124:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591ED3AF0>)
2024-04-15 15:31:06,125:INFO:Checking exceptions
2024-04-15 15:31:06,125:INFO:Preloading libraries
2024-04-15 15:31:06,524:INFO:Initializing finalize_model()
2024-04-15 15:31:06,524:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 15:31:06,525:INFO:Finalizing LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:31:06,528:INFO:Initializing create_model()
2024-04-15 15:31:06,528:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59838D2E0>, estimator=LogisticRegression(C=4.431, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3988, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:31:06,528:INFO:Checking exceptions
2024-04-15 15:31:06,529:INFO:Importing libraries
2024-04-15 15:31:06,529:INFO:Copying training dataset
2024-04-15 15:31:06,530:INFO:Defining folds
2024-04-15 15:31:06,530:INFO:Declaring metric variables
2024-04-15 15:31:06,530:INFO:Importing untrained model
2024-04-15 15:31:06,530:INFO:Declaring custom model
2024-04-15 15:31:06,530:INFO:Logistic Regression Imported successfully
2024-04-15 15:31:06,531:INFO:Cross validation set to False
2024-04-15 15:31:06,531:INFO:Fitting Model
2024-04-15 15:31:06,560:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=4.431, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3988, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 15:31:06,560:INFO:create_model() successfully completed......................................
2024-04-15 15:31:06,878:INFO:_master_model_container: 4
2024-04-15 15:31:06,878:INFO:_display_container: 6
2024-04-15 15:31:06,883:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=4.431, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3988, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 15:31:06,883:INFO:finalize_model() successfully completed......................................
2024-04-15 15:31:07,208:INFO:Initializing save_model()
2024-04-15 15:31:07,208:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=4.431, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3988, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 15:31:07,209:INFO:Adding model into prep_pipe
2024-04-15 15:31:07,209:WARNING:Only Model saved as it was a pipeline.
2024-04-15 15:31:07,212:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 15:31:07,216:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=4.431, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3988, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 15:31:07,217:INFO:save_model() successfully completed......................................
2024-04-15 15:31:07,546:INFO:Initializing load_model()
2024-04-15 15:31:07,547:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 15:31:07,619:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 15:31:11,009:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\4288444585.py:71: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 15:33:05,966:INFO:PyCaret ClassificationExperiment
2024-04-15 15:33:05,966:INFO:Logging name: clf-default-name
2024-04-15 15:33:05,966:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 15:33:05,967:INFO:version 3.2.0
2024-04-15 15:33:05,967:INFO:Initializing setup()
2024-04-15 15:33:05,967:INFO:self.USI: 1faf
2024-04-15 15:33:05,967:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 15:33:05,967:INFO:Checking environment
2024-04-15 15:33:05,967:INFO:python_version: 3.8.0
2024-04-15 15:33:05,967:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 15:33:05,967:INFO:machine: AMD64
2024-04-15 15:33:05,967:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 15:33:05,975:INFO:Memory: svmem(total=34301427712, available=16444874752, percent=52.1, used=17856552960, free=16444874752)
2024-04-15 15:33:05,975:INFO:Physical Core: 6
2024-04-15 15:33:05,975:INFO:Logical Core: 12
2024-04-15 15:33:05,975:INFO:Checking libraries
2024-04-15 15:33:05,975:INFO:System:
2024-04-15 15:33:05,975:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 15:33:05,975:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 15:33:05,975:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 15:33:05,975:INFO:PyCaret required dependencies:
2024-04-15 15:33:05,975:INFO:                 pip: 19.2.3
2024-04-15 15:33:05,976:INFO:          setuptools: 41.2.0
2024-04-15 15:33:05,976:INFO:             pycaret: 3.2.0
2024-04-15 15:33:05,976:INFO:             IPython: 8.12.3
2024-04-15 15:33:05,976:INFO:          ipywidgets: 8.1.2
2024-04-15 15:33:05,976:INFO:                tqdm: 4.66.2
2024-04-15 15:33:05,976:INFO:               numpy: 1.24.4
2024-04-15 15:33:05,976:INFO:              pandas: 1.5.3
2024-04-15 15:33:05,976:INFO:              jinja2: 3.1.3
2024-04-15 15:33:05,976:INFO:               scipy: 1.10.1
2024-04-15 15:33:05,976:INFO:              joblib: 1.3.2
2024-04-15 15:33:05,976:INFO:             sklearn: 1.2.0
2024-04-15 15:33:05,976:INFO:                pyod: 1.1.3
2024-04-15 15:33:05,976:INFO:            imblearn: 0.12.2
2024-04-15 15:33:05,976:INFO:   category_encoders: 2.6.3
2024-04-15 15:33:05,976:INFO:            lightgbm: 4.3.0
2024-04-15 15:33:05,976:INFO:               numba: 0.58.1
2024-04-15 15:33:05,976:INFO:            requests: 2.31.0
2024-04-15 15:33:05,976:INFO:          matplotlib: 3.6.0
2024-04-15 15:33:05,976:INFO:          scikitplot: 0.3.7
2024-04-15 15:33:05,976:INFO:         yellowbrick: 1.5
2024-04-15 15:33:05,976:INFO:              plotly: 5.20.0
2024-04-15 15:33:05,976:INFO:    plotly-resampler: Not installed
2024-04-15 15:33:05,976:INFO:             kaleido: 0.2.1
2024-04-15 15:33:05,976:INFO:           schemdraw: 0.15
2024-04-15 15:33:05,976:INFO:         statsmodels: 0.14.1
2024-04-15 15:33:05,976:INFO:              sktime: 0.21.1
2024-04-15 15:33:05,976:INFO:               tbats: 1.1.3
2024-04-15 15:33:05,976:INFO:            pmdarima: 2.0.4
2024-04-15 15:33:05,976:INFO:              psutil: 5.9.8
2024-04-15 15:33:05,976:INFO:          markupsafe: 2.1.5
2024-04-15 15:33:05,977:INFO:             pickle5: Not installed
2024-04-15 15:33:05,977:INFO:         cloudpickle: 3.0.0
2024-04-15 15:33:05,977:INFO:         deprecation: 2.1.0
2024-04-15 15:33:05,977:INFO:              xxhash: 3.4.1
2024-04-15 15:33:05,977:INFO:           wurlitzer: Not installed
2024-04-15 15:33:05,977:INFO:PyCaret optional dependencies:
2024-04-15 15:33:05,977:INFO:                shap: Not installed
2024-04-15 15:33:05,977:INFO:           interpret: Not installed
2024-04-15 15:33:05,977:INFO:                umap: Not installed
2024-04-15 15:33:05,977:INFO:     ydata_profiling: Not installed
2024-04-15 15:33:05,977:INFO:  explainerdashboard: Not installed
2024-04-15 15:33:05,977:INFO:             autoviz: Not installed
2024-04-15 15:33:05,977:INFO:           fairlearn: Not installed
2024-04-15 15:33:05,977:INFO:          deepchecks: Not installed
2024-04-15 15:33:05,977:INFO:             xgboost: Not installed
2024-04-15 15:33:05,977:INFO:            catboost: Not installed
2024-04-15 15:33:05,977:INFO:              kmodes: Not installed
2024-04-15 15:33:05,977:INFO:             mlxtend: Not installed
2024-04-15 15:33:05,977:INFO:       statsforecast: Not installed
2024-04-15 15:33:05,977:INFO:        tune_sklearn: Not installed
2024-04-15 15:33:05,977:INFO:                 ray: Not installed
2024-04-15 15:33:05,977:INFO:            hyperopt: Not installed
2024-04-15 15:33:05,977:INFO:              optuna: Not installed
2024-04-15 15:33:05,977:INFO:               skopt: Not installed
2024-04-15 15:33:05,977:INFO:              mlflow: 2.11.3
2024-04-15 15:33:05,977:INFO:              gradio: Not installed
2024-04-15 15:33:05,977:INFO:             fastapi: Not installed
2024-04-15 15:33:05,977:INFO:             uvicorn: Not installed
2024-04-15 15:33:05,977:INFO:              m2cgen: Not installed
2024-04-15 15:33:05,977:INFO:           evidently: Not installed
2024-04-15 15:33:05,978:INFO:               fugue: Not installed
2024-04-15 15:33:05,978:INFO:           streamlit: 1.33.0
2024-04-15 15:33:05,978:INFO:             prophet: Not installed
2024-04-15 15:33:05,978:INFO:None
2024-04-15 15:33:05,978:INFO:Set up data.
2024-04-15 15:33:05,983:INFO:Set up folding strategy.
2024-04-15 15:33:05,983:INFO:Set up train/test split.
2024-04-15 15:33:05,984:INFO:Set up data.
2024-04-15 15:33:05,987:INFO:Set up index.
2024-04-15 15:33:05,987:INFO:Assigning column types.
2024-04-15 15:33:05,990:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 15:33:06,028:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:33:06,029:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:33:06,053:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,053:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,093:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 15:33:06,094:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:33:06,117:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,117:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,117:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 15:33:06,156:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:33:06,180:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,180:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,217:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 15:33:06,240:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,241:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,241:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 15:33:06,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,372:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,372:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,374:INFO:Preparing preprocessing pipeline...
2024-04-15 15:33:06,375:INFO:Set up simple imputation.
2024-04-15 15:33:06,375:INFO:Set up feature normalization.
2024-04-15 15:33:06,396:INFO:Finished creating preprocessing pipeline.
2024-04-15 15:33:06,401:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 15:33:06,401:INFO:Creating final display dataframe.
2024-04-15 15:33:06,474:INFO:Setup _display_container:                     Description             Value
0                    Session id              1047
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              1faf
2024-04-15 15:33:06,546:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,547:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,614:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 15:33:06,615:INFO:setup() successfully completed in 0.65s...............
2024-04-15 15:33:06,616:INFO:Initializing compare_models()
2024-04-15 15:33:06,616:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 15:33:06,616:INFO:Checking exceptions
2024-04-15 15:33:06,620:INFO:Preparing display monitor
2024-04-15 15:33:06,637:INFO:Initializing Logistic Regression
2024-04-15 15:33:06,638:INFO:Total runtime is 1.6681353251139323e-05 minutes
2024-04-15 15:33:06,640:INFO:SubProcess create_model() called ==================================
2024-04-15 15:33:06,641:INFO:Initializing create_model()
2024-04-15 15:33:06,642:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59825DCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:33:06,642:INFO:Checking exceptions
2024-04-15 15:33:06,642:INFO:Importing libraries
2024-04-15 15:33:06,642:INFO:Copying training dataset
2024-04-15 15:33:06,646:INFO:Defining folds
2024-04-15 15:33:06,647:INFO:Declaring metric variables
2024-04-15 15:33:06,650:INFO:Importing untrained model
2024-04-15 15:33:06,653:INFO:Logistic Regression Imported successfully
2024-04-15 15:33:06,660:INFO:Starting cross validation
2024-04-15 15:33:06,661:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:33:06,768:INFO:Calculating mean and std
2024-04-15 15:33:06,769:INFO:Creating metrics dataframe
2024-04-15 15:33:06,772:INFO:Uploading results into container
2024-04-15 15:33:06,772:INFO:Uploading model into container now
2024-04-15 15:33:06,772:INFO:_master_model_container: 1
2024-04-15 15:33:06,772:INFO:_display_container: 2
2024-04-15 15:33:06,773:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:33:06,773:INFO:create_model() successfully completed......................................
2024-04-15 15:33:07,190:INFO:SubProcess create_model() end ==================================
2024-04-15 15:33:07,191:INFO:Creating metrics dataframe
2024-04-15 15:33:07,199:INFO:Initializing Decision Tree Classifier
2024-04-15 15:33:07,199:INFO:Total runtime is 0.009365383783976238 minutes
2024-04-15 15:33:07,202:INFO:SubProcess create_model() called ==================================
2024-04-15 15:33:07,202:INFO:Initializing create_model()
2024-04-15 15:33:07,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59825DCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:33:07,202:INFO:Checking exceptions
2024-04-15 15:33:07,202:INFO:Importing libraries
2024-04-15 15:33:07,203:INFO:Copying training dataset
2024-04-15 15:33:07,207:INFO:Defining folds
2024-04-15 15:33:07,208:INFO:Declaring metric variables
2024-04-15 15:33:07,211:INFO:Importing untrained model
2024-04-15 15:33:07,214:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:33:07,219:INFO:Starting cross validation
2024-04-15 15:33:07,220:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:33:07,381:INFO:Calculating mean and std
2024-04-15 15:33:07,382:INFO:Creating metrics dataframe
2024-04-15 15:33:07,385:INFO:Uploading results into container
2024-04-15 15:33:07,385:INFO:Uploading model into container now
2024-04-15 15:33:07,386:INFO:_master_model_container: 2
2024-04-15 15:33:07,386:INFO:_display_container: 2
2024-04-15 15:33:07,386:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1047, splitter='best')
2024-04-15 15:33:07,386:INFO:create_model() successfully completed......................................
2024-04-15 15:33:07,706:INFO:SubProcess create_model() end ==================================
2024-04-15 15:33:07,707:INFO:Creating metrics dataframe
2024-04-15 15:33:07,721:INFO:Initializing create_model()
2024-04-15 15:33:07,721:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1047, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:33:07,721:INFO:Checking exceptions
2024-04-15 15:33:07,723:INFO:Importing libraries
2024-04-15 15:33:07,723:INFO:Copying training dataset
2024-04-15 15:33:07,728:INFO:Defining folds
2024-04-15 15:33:07,728:INFO:Declaring metric variables
2024-04-15 15:33:07,728:INFO:Importing untrained model
2024-04-15 15:33:07,728:INFO:Declaring custom model
2024-04-15 15:33:07,728:INFO:Decision Tree Classifier Imported successfully
2024-04-15 15:33:07,729:INFO:Cross validation set to False
2024-04-15 15:33:07,729:INFO:Fitting Model
2024-04-15 15:33:07,787:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1047, splitter='best')
2024-04-15 15:33:07,787:INFO:create_model() successfully completed......................................
2024-04-15 15:33:08,125:INFO:Initializing create_model()
2024-04-15 15:33:08,125:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:33:08,125:INFO:Checking exceptions
2024-04-15 15:33:08,127:INFO:Importing libraries
2024-04-15 15:33:08,127:INFO:Copying training dataset
2024-04-15 15:33:08,132:INFO:Defining folds
2024-04-15 15:33:08,132:INFO:Declaring metric variables
2024-04-15 15:33:08,132:INFO:Importing untrained model
2024-04-15 15:33:08,132:INFO:Declaring custom model
2024-04-15 15:33:08,132:INFO:Logistic Regression Imported successfully
2024-04-15 15:33:08,133:INFO:Cross validation set to False
2024-04-15 15:33:08,133:INFO:Fitting Model
2024-04-15 15:33:08,151:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:33:08,152:INFO:create_model() successfully completed......................................
2024-04-15 15:33:08,493:INFO:_master_model_container: 2
2024-04-15 15:33:08,493:INFO:_display_container: 2
2024-04-15 15:33:08,494:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1047, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 15:33:08,494:INFO:compare_models() successfully completed......................................
2024-04-15 15:33:09,514:INFO:Initializing predict_model()
2024-04-15 15:33:09,514:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1047, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597E37700>)
2024-04-15 15:33:09,514:INFO:Checking exceptions
2024-04-15 15:33:09,514:INFO:Preloading libraries
2024-04-15 15:33:10,543:INFO:Initializing predict_model()
2024-04-15 15:33:10,544:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5904FCDC0>)
2024-04-15 15:33:10,544:INFO:Checking exceptions
2024-04-15 15:33:10,544:INFO:Preloading libraries
2024-04-15 15:33:11,063:INFO:Initializing tune_model()
2024-04-15 15:33:11,063:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>)
2024-04-15 15:33:11,063:INFO:Checking exceptions
2024-04-15 15:33:11,078:INFO:Copying training dataset
2024-04-15 15:33:11,083:INFO:Checking base model
2024-04-15 15:33:11,083:INFO:Base model : Logistic Regression
2024-04-15 15:33:11,088:INFO:Declaring metric variables
2024-04-15 15:33:11,092:INFO:Defining Hyperparameters
2024-04-15 15:33:11,491:INFO:Tuning with n_jobs=-1
2024-04-15 15:33:11,491:INFO:Initializing RandomizedSearchCV
2024-04-15 15:33:11,748:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 1.053}
2024-04-15 15:33:11,749:INFO:Hyperparameter search completed
2024-04-15 15:33:11,749:INFO:SubProcess create_model() called ==================================
2024-04-15 15:33:11,749:INFO:Initializing create_model()
2024-04-15 15:33:11,749:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C591E09BE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 1.053})
2024-04-15 15:33:11,749:INFO:Checking exceptions
2024-04-15 15:33:11,749:INFO:Importing libraries
2024-04-15 15:33:11,749:INFO:Copying training dataset
2024-04-15 15:33:11,754:INFO:Defining folds
2024-04-15 15:33:11,754:INFO:Declaring metric variables
2024-04-15 15:33:11,757:INFO:Importing untrained model
2024-04-15 15:33:11,757:INFO:Declaring custom model
2024-04-15 15:33:11,760:INFO:Logistic Regression Imported successfully
2024-04-15 15:33:11,764:INFO:Starting cross validation
2024-04-15 15:33:11,765:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:33:11,906:INFO:Calculating mean and std
2024-04-15 15:33:11,907:INFO:Creating metrics dataframe
2024-04-15 15:33:11,912:INFO:Finalizing model
2024-04-15 15:33:11,938:INFO:Uploading results into container
2024-04-15 15:33:11,938:INFO:Uploading model into container now
2024-04-15 15:33:11,939:INFO:_master_model_container: 3
2024-04-15 15:33:11,939:INFO:_display_container: 5
2024-04-15 15:33:11,939:INFO:LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:33:11,940:INFO:create_model() successfully completed......................................
2024-04-15 15:33:12,283:INFO:SubProcess create_model() end ==================================
2024-04-15 15:33:12,283:INFO:choose_better activated
2024-04-15 15:33:12,287:INFO:SubProcess create_model() called ==================================
2024-04-15 15:33:12,287:INFO:Initializing create_model()
2024-04-15 15:33:12,287:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:33:12,287:INFO:Checking exceptions
2024-04-15 15:33:12,289:INFO:Importing libraries
2024-04-15 15:33:12,289:INFO:Copying training dataset
2024-04-15 15:33:12,293:INFO:Defining folds
2024-04-15 15:33:12,293:INFO:Declaring metric variables
2024-04-15 15:33:12,293:INFO:Importing untrained model
2024-04-15 15:33:12,293:INFO:Declaring custom model
2024-04-15 15:33:12,294:INFO:Logistic Regression Imported successfully
2024-04-15 15:33:12,294:INFO:Starting cross validation
2024-04-15 15:33:12,295:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 15:33:12,382:INFO:Calculating mean and std
2024-04-15 15:33:12,383:INFO:Creating metrics dataframe
2024-04-15 15:33:12,385:INFO:Finalizing model
2024-04-15 15:33:12,403:INFO:Uploading results into container
2024-04-15 15:33:12,404:INFO:Uploading model into container now
2024-04-15 15:33:12,405:INFO:_master_model_container: 4
2024-04-15 15:33:12,405:INFO:_display_container: 6
2024-04-15 15:33:12,405:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:33:12,405:INFO:create_model() successfully completed......................................
2024-04-15 15:33:12,721:INFO:SubProcess create_model() end ==================================
2024-04-15 15:33:12,722:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 15:33:12,722:INFO:LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 15:33:12,722:INFO:LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 15:33:12,722:INFO:choose_better completed
2024-04-15 15:33:12,730:INFO:_master_model_container: 4
2024-04-15 15:33:12,730:INFO:_display_container: 5
2024-04-15 15:33:12,730:INFO:LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:33:12,730:INFO:tune_model() successfully completed......................................
2024-04-15 15:33:13,049:INFO:Initializing predict_model()
2024-04-15 15:33:13,049:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590546D30>)
2024-04-15 15:33:13,049:INFO:Checking exceptions
2024-04-15 15:33:13,049:INFO:Preloading libraries
2024-04-15 15:33:13,438:INFO:Initializing finalize_model()
2024-04-15 15:33:13,438:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 15:33:13,438:INFO:Finalizing LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 15:33:13,441:INFO:Initializing create_model()
2024-04-15 15:33:13,441:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E21220>, estimator=LogisticRegression(C=1.053, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1047, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 15:33:13,441:INFO:Checking exceptions
2024-04-15 15:33:13,442:INFO:Importing libraries
2024-04-15 15:33:13,442:INFO:Copying training dataset
2024-04-15 15:33:13,443:INFO:Defining folds
2024-04-15 15:33:13,443:INFO:Declaring metric variables
2024-04-15 15:33:13,443:INFO:Importing untrained model
2024-04-15 15:33:13,443:INFO:Declaring custom model
2024-04-15 15:33:13,443:INFO:Logistic Regression Imported successfully
2024-04-15 15:33:13,444:INFO:Cross validation set to False
2024-04-15 15:33:13,444:INFO:Fitting Model
2024-04-15 15:33:13,472:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.053, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=1047, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 15:33:13,472:INFO:create_model() successfully completed......................................
2024-04-15 15:33:13,785:INFO:_master_model_container: 4
2024-04-15 15:33:13,786:INFO:_display_container: 6
2024-04-15 15:33:13,790:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.053, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=1047, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 15:33:13,790:INFO:finalize_model() successfully completed......................................
2024-04-15 15:33:14,109:INFO:Initializing save_model()
2024-04-15 15:33:14,109:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.053, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=1047, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 15:33:14,109:INFO:Adding model into prep_pipe
2024-04-15 15:33:14,109:WARNING:Only Model saved as it was a pipeline.
2024-04-15 15:33:14,112:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 15:33:14,116:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.053, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=1047, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 15:33:14,116:INFO:save_model() successfully completed......................................
2024-04-15 15:33:14,443:INFO:Initializing load_model()
2024-04-15 15:33:14,443:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 15:33:14,521:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 15:33:17,546:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\2766082431.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:02:43,455:INFO:PyCaret ClassificationExperiment
2024-04-15 16:02:43,455:INFO:Logging name: clf-default-name
2024-04-15 16:02:43,455:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:02:43,455:INFO:version 3.2.0
2024-04-15 16:02:43,455:INFO:Initializing setup()
2024-04-15 16:02:43,455:INFO:self.USI: 9c35
2024-04-15 16:02:43,455:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:02:43,455:INFO:Checking environment
2024-04-15 16:02:43,455:INFO:python_version: 3.8.0
2024-04-15 16:02:43,455:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:02:43,455:INFO:machine: AMD64
2024-04-15 16:02:43,456:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:02:43,464:INFO:Memory: svmem(total=34301427712, available=19867234304, percent=42.1, used=14434193408, free=19867234304)
2024-04-15 16:02:43,465:INFO:Physical Core: 6
2024-04-15 16:02:43,465:INFO:Logical Core: 12
2024-04-15 16:02:43,465:INFO:Checking libraries
2024-04-15 16:02:43,465:INFO:System:
2024-04-15 16:02:43,465:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:02:43,465:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:02:43,465:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:02:43,465:INFO:PyCaret required dependencies:
2024-04-15 16:02:43,465:INFO:                 pip: 19.2.3
2024-04-15 16:02:43,465:INFO:          setuptools: 41.2.0
2024-04-15 16:02:43,465:INFO:             pycaret: 3.2.0
2024-04-15 16:02:43,465:INFO:             IPython: 8.12.3
2024-04-15 16:02:43,465:INFO:          ipywidgets: 8.1.2
2024-04-15 16:02:43,465:INFO:                tqdm: 4.66.2
2024-04-15 16:02:43,465:INFO:               numpy: 1.24.4
2024-04-15 16:02:43,466:INFO:              pandas: 1.5.3
2024-04-15 16:02:43,466:INFO:              jinja2: 3.1.3
2024-04-15 16:02:43,466:INFO:               scipy: 1.10.1
2024-04-15 16:02:43,466:INFO:              joblib: 1.3.2
2024-04-15 16:02:43,466:INFO:             sklearn: 1.2.0
2024-04-15 16:02:43,466:INFO:                pyod: 1.1.3
2024-04-15 16:02:43,466:INFO:            imblearn: 0.12.2
2024-04-15 16:02:43,466:INFO:   category_encoders: 2.6.3
2024-04-15 16:02:43,466:INFO:            lightgbm: 4.3.0
2024-04-15 16:02:43,466:INFO:               numba: 0.58.1
2024-04-15 16:02:43,466:INFO:            requests: 2.31.0
2024-04-15 16:02:43,466:INFO:          matplotlib: 3.6.0
2024-04-15 16:02:43,466:INFO:          scikitplot: 0.3.7
2024-04-15 16:02:43,466:INFO:         yellowbrick: 1.5
2024-04-15 16:02:43,466:INFO:              plotly: 5.20.0
2024-04-15 16:02:43,466:INFO:    plotly-resampler: Not installed
2024-04-15 16:02:43,466:INFO:             kaleido: 0.2.1
2024-04-15 16:02:43,466:INFO:           schemdraw: 0.15
2024-04-15 16:02:43,466:INFO:         statsmodels: 0.14.1
2024-04-15 16:02:43,466:INFO:              sktime: 0.21.1
2024-04-15 16:02:43,466:INFO:               tbats: 1.1.3
2024-04-15 16:02:43,466:INFO:            pmdarima: 2.0.4
2024-04-15 16:02:43,466:INFO:              psutil: 5.9.8
2024-04-15 16:02:43,467:INFO:          markupsafe: 2.1.5
2024-04-15 16:02:43,467:INFO:             pickle5: Not installed
2024-04-15 16:02:43,467:INFO:         cloudpickle: 3.0.0
2024-04-15 16:02:43,467:INFO:         deprecation: 2.1.0
2024-04-15 16:02:43,467:INFO:              xxhash: 3.4.1
2024-04-15 16:02:43,467:INFO:           wurlitzer: Not installed
2024-04-15 16:02:43,467:INFO:PyCaret optional dependencies:
2024-04-15 16:02:43,467:INFO:                shap: Not installed
2024-04-15 16:02:43,467:INFO:           interpret: Not installed
2024-04-15 16:02:43,467:INFO:                umap: Not installed
2024-04-15 16:02:43,467:INFO:     ydata_profiling: Not installed
2024-04-15 16:02:43,467:INFO:  explainerdashboard: Not installed
2024-04-15 16:02:43,467:INFO:             autoviz: Not installed
2024-04-15 16:02:43,467:INFO:           fairlearn: Not installed
2024-04-15 16:02:43,467:INFO:          deepchecks: Not installed
2024-04-15 16:02:43,467:INFO:             xgboost: Not installed
2024-04-15 16:02:43,467:INFO:            catboost: Not installed
2024-04-15 16:02:43,467:INFO:              kmodes: Not installed
2024-04-15 16:02:43,467:INFO:             mlxtend: Not installed
2024-04-15 16:02:43,467:INFO:       statsforecast: Not installed
2024-04-15 16:02:43,467:INFO:        tune_sklearn: Not installed
2024-04-15 16:02:43,468:INFO:                 ray: Not installed
2024-04-15 16:02:43,468:INFO:            hyperopt: Not installed
2024-04-15 16:02:43,468:INFO:              optuna: Not installed
2024-04-15 16:02:43,468:INFO:               skopt: Not installed
2024-04-15 16:02:43,468:INFO:              mlflow: 2.11.3
2024-04-15 16:02:43,468:INFO:              gradio: Not installed
2024-04-15 16:02:43,468:INFO:             fastapi: Not installed
2024-04-15 16:02:43,468:INFO:             uvicorn: Not installed
2024-04-15 16:02:43,468:INFO:              m2cgen: Not installed
2024-04-15 16:02:43,468:INFO:           evidently: Not installed
2024-04-15 16:02:43,468:INFO:               fugue: Not installed
2024-04-15 16:02:43,468:INFO:           streamlit: 1.33.0
2024-04-15 16:02:43,468:INFO:             prophet: Not installed
2024-04-15 16:02:43,468:INFO:None
2024-04-15 16:02:43,468:INFO:Set up data.
2024-04-15 16:02:43,474:INFO:Set up folding strategy.
2024-04-15 16:02:43,474:INFO:Set up train/test split.
2024-04-15 16:02:43,474:INFO:Set up data.
2024-04-15 16:02:43,478:INFO:Set up index.
2024-04-15 16:02:43,479:INFO:Assigning column types.
2024-04-15 16:02:43,482:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:02:43,526:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:02:43,527:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:02:43,555:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,555:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,601:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:02:43,603:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:02:43,628:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,628:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,629:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:02:43,673:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:02:43,697:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,734:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:02:43,757:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,757:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,758:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:02:43,824:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,889:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,889:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:43,891:INFO:Preparing preprocessing pipeline...
2024-04-15 16:02:43,892:INFO:Set up simple imputation.
2024-04-15 16:02:43,892:INFO:Set up feature normalization.
2024-04-15 16:02:43,913:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:02:43,916:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:02:43,916:INFO:Creating final display dataframe.
2024-04-15 16:02:43,988:INFO:Setup _display_container:                     Description             Value
0                    Session id               221
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              9c35
2024-04-15 16:02:44,060:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:44,061:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:44,130:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:44,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:02:44,131:INFO:setup() successfully completed in 0.68s...............
2024-04-15 16:02:44,131:INFO:Initializing compare_models()
2024-04-15 16:02:44,131:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:02:44,131:INFO:Checking exceptions
2024-04-15 16:02:44,135:INFO:Preparing display monitor
2024-04-15 16:02:44,153:INFO:Initializing Logistic Regression
2024-04-15 16:02:44,154:INFO:Total runtime is 1.6673405965169272e-05 minutes
2024-04-15 16:02:44,157:INFO:SubProcess create_model() called ==================================
2024-04-15 16:02:44,157:INFO:Initializing create_model()
2024-04-15 16:02:44,157:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597E710A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:02:44,157:INFO:Checking exceptions
2024-04-15 16:02:44,157:INFO:Importing libraries
2024-04-15 16:02:44,157:INFO:Copying training dataset
2024-04-15 16:02:44,164:INFO:Defining folds
2024-04-15 16:02:44,164:INFO:Declaring metric variables
2024-04-15 16:02:44,167:INFO:Importing untrained model
2024-04-15 16:02:44,170:INFO:Logistic Regression Imported successfully
2024-04-15 16:02:44,175:INFO:Starting cross validation
2024-04-15 16:02:44,176:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:02:48,460:INFO:Calculating mean and std
2024-04-15 16:02:48,463:INFO:Creating metrics dataframe
2024-04-15 16:02:48,467:INFO:Uploading results into container
2024-04-15 16:02:48,468:INFO:Uploading model into container now
2024-04-15 16:02:48,468:INFO:_master_model_container: 1
2024-04-15 16:02:48,468:INFO:_display_container: 2
2024-04-15 16:02:48,469:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:02:48,469:INFO:create_model() successfully completed......................................
2024-04-15 16:02:48,789:INFO:SubProcess create_model() end ==================================
2024-04-15 16:02:48,789:INFO:Creating metrics dataframe
2024-04-15 16:02:48,797:INFO:Initializing Decision Tree Classifier
2024-04-15 16:02:48,797:INFO:Total runtime is 0.07739256223042806 minutes
2024-04-15 16:02:48,799:INFO:SubProcess create_model() called ==================================
2024-04-15 16:02:48,799:INFO:Initializing create_model()
2024-04-15 16:02:48,800:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597E710A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:02:48,800:INFO:Checking exceptions
2024-04-15 16:02:48,800:INFO:Importing libraries
2024-04-15 16:02:48,800:INFO:Copying training dataset
2024-04-15 16:02:48,805:INFO:Defining folds
2024-04-15 16:02:48,805:INFO:Declaring metric variables
2024-04-15 16:02:48,808:INFO:Importing untrained model
2024-04-15 16:02:48,811:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:02:48,815:INFO:Starting cross validation
2024-04-15 16:02:48,816:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:02:50,768:INFO:Calculating mean and std
2024-04-15 16:02:50,770:INFO:Creating metrics dataframe
2024-04-15 16:02:50,775:INFO:Uploading results into container
2024-04-15 16:02:50,776:INFO:Uploading model into container now
2024-04-15 16:02:50,776:INFO:_master_model_container: 2
2024-04-15 16:02:50,776:INFO:_display_container: 2
2024-04-15 16:02:50,777:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=221, splitter='best')
2024-04-15 16:02:50,777:INFO:create_model() successfully completed......................................
2024-04-15 16:02:51,107:INFO:SubProcess create_model() end ==================================
2024-04-15 16:02:51,108:INFO:Creating metrics dataframe
2024-04-15 16:02:51,122:INFO:Initializing create_model()
2024-04-15 16:02:51,123:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=221, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:02:51,123:INFO:Checking exceptions
2024-04-15 16:02:51,124:INFO:Importing libraries
2024-04-15 16:02:51,124:INFO:Copying training dataset
2024-04-15 16:02:51,129:INFO:Defining folds
2024-04-15 16:02:51,129:INFO:Declaring metric variables
2024-04-15 16:02:51,130:INFO:Importing untrained model
2024-04-15 16:02:51,130:INFO:Declaring custom model
2024-04-15 16:02:51,130:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:02:51,131:INFO:Cross validation set to False
2024-04-15 16:02:51,131:INFO:Fitting Model
2024-04-15 16:02:51,186:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=221, splitter='best')
2024-04-15 16:02:51,186:INFO:create_model() successfully completed......................................
2024-04-15 16:02:51,508:INFO:Initializing create_model()
2024-04-15 16:02:51,508:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:02:51,508:INFO:Checking exceptions
2024-04-15 16:02:51,510:INFO:Importing libraries
2024-04-15 16:02:51,510:INFO:Copying training dataset
2024-04-15 16:02:51,514:INFO:Defining folds
2024-04-15 16:02:51,514:INFO:Declaring metric variables
2024-04-15 16:02:51,514:INFO:Importing untrained model
2024-04-15 16:02:51,514:INFO:Declaring custom model
2024-04-15 16:02:51,515:INFO:Logistic Regression Imported successfully
2024-04-15 16:02:51,515:INFO:Cross validation set to False
2024-04-15 16:02:51,515:INFO:Fitting Model
2024-04-15 16:02:51,536:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:02:51,536:INFO:create_model() successfully completed......................................
2024-04-15 16:02:51,872:INFO:_master_model_container: 2
2024-04-15 16:02:51,872:INFO:_display_container: 2
2024-04-15 16:02:51,872:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=221, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:02:51,873:INFO:compare_models() successfully completed......................................
2024-04-15 16:02:52,752:INFO:Initializing predict_model()
2024-04-15 16:02:52,752:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=221, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596DAFAF0>)
2024-04-15 16:02:52,752:INFO:Checking exceptions
2024-04-15 16:02:52,752:INFO:Preloading libraries
2024-04-15 16:02:53,793:INFO:Initializing predict_model()
2024-04-15 16:02:53,793:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5904FCAF0>)
2024-04-15 16:02:53,793:INFO:Checking exceptions
2024-04-15 16:02:53,793:INFO:Preloading libraries
2024-04-15 16:02:54,222:INFO:Initializing tune_model()
2024-04-15 16:02:54,222:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>)
2024-04-15 16:02:54,223:INFO:Checking exceptions
2024-04-15 16:02:54,237:INFO:Copying training dataset
2024-04-15 16:02:54,243:INFO:Checking base model
2024-04-15 16:02:54,243:INFO:Base model : Logistic Regression
2024-04-15 16:02:54,247:INFO:Declaring metric variables
2024-04-15 16:02:54,250:INFO:Defining Hyperparameters
2024-04-15 16:02:54,622:INFO:Tuning with n_jobs=-1
2024-04-15 16:02:54,622:INFO:Initializing RandomizedSearchCV
2024-04-15 16:02:54,891:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 1.978}
2024-04-15 16:02:54,891:INFO:Hyperparameter search completed
2024-04-15 16:02:54,891:INFO:SubProcess create_model() called ==================================
2024-04-15 16:02:54,892:INFO:Initializing create_model()
2024-04-15 16:02:54,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C588ACA8B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 1.978})
2024-04-15 16:02:54,892:INFO:Checking exceptions
2024-04-15 16:02:54,892:INFO:Importing libraries
2024-04-15 16:02:54,892:INFO:Copying training dataset
2024-04-15 16:02:54,897:INFO:Defining folds
2024-04-15 16:02:54,897:INFO:Declaring metric variables
2024-04-15 16:02:54,901:INFO:Importing untrained model
2024-04-15 16:02:54,901:INFO:Declaring custom model
2024-04-15 16:02:54,905:INFO:Logistic Regression Imported successfully
2024-04-15 16:02:54,910:INFO:Starting cross validation
2024-04-15 16:02:54,911:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:02:55,016:INFO:Calculating mean and std
2024-04-15 16:02:55,017:INFO:Creating metrics dataframe
2024-04-15 16:02:55,021:INFO:Finalizing model
2024-04-15 16:02:55,046:INFO:Uploading results into container
2024-04-15 16:02:55,047:INFO:Uploading model into container now
2024-04-15 16:02:55,047:INFO:_master_model_container: 3
2024-04-15 16:02:55,048:INFO:_display_container: 5
2024-04-15 16:02:55,048:INFO:LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:02:55,048:INFO:create_model() successfully completed......................................
2024-04-15 16:02:55,375:INFO:SubProcess create_model() end ==================================
2024-04-15 16:02:55,376:INFO:choose_better activated
2024-04-15 16:02:55,379:INFO:SubProcess create_model() called ==================================
2024-04-15 16:02:55,379:INFO:Initializing create_model()
2024-04-15 16:02:55,379:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:02:55,379:INFO:Checking exceptions
2024-04-15 16:02:55,381:INFO:Importing libraries
2024-04-15 16:02:55,381:INFO:Copying training dataset
2024-04-15 16:02:55,386:INFO:Defining folds
2024-04-15 16:02:55,386:INFO:Declaring metric variables
2024-04-15 16:02:55,386:INFO:Importing untrained model
2024-04-15 16:02:55,386:INFO:Declaring custom model
2024-04-15 16:02:55,386:INFO:Logistic Regression Imported successfully
2024-04-15 16:02:55,387:INFO:Starting cross validation
2024-04-15 16:02:55,387:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:02:55,477:INFO:Calculating mean and std
2024-04-15 16:02:55,478:INFO:Creating metrics dataframe
2024-04-15 16:02:55,480:INFO:Finalizing model
2024-04-15 16:02:55,502:INFO:Uploading results into container
2024-04-15 16:02:55,502:INFO:Uploading model into container now
2024-04-15 16:02:55,503:INFO:_master_model_container: 4
2024-04-15 16:02:55,503:INFO:_display_container: 6
2024-04-15 16:02:55,503:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:02:55,503:INFO:create_model() successfully completed......................................
2024-04-15 16:02:55,863:INFO:SubProcess create_model() end ==================================
2024-04-15 16:02:55,864:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:02:55,865:INFO:LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:02:55,865:INFO:LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:02:55,865:INFO:choose_better completed
2024-04-15 16:02:55,874:INFO:_master_model_container: 4
2024-04-15 16:02:55,875:INFO:_display_container: 5
2024-04-15 16:02:55,875:INFO:LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:02:55,875:INFO:tune_model() successfully completed......................................
2024-04-15 16:02:56,214:INFO:Initializing predict_model()
2024-04-15 16:02:56,214:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5904FC310>)
2024-04-15 16:02:56,214:INFO:Checking exceptions
2024-04-15 16:02:56,214:INFO:Preloading libraries
2024-04-15 16:02:56,623:INFO:Initializing finalize_model()
2024-04-15 16:02:56,623:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:02:56,624:INFO:Finalizing LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:02:56,626:INFO:Initializing create_model()
2024-04-15 16:02:56,626:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58DBECD00>, estimator=LogisticRegression(C=1.978, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=221, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:02:56,626:INFO:Checking exceptions
2024-04-15 16:02:56,628:INFO:Importing libraries
2024-04-15 16:02:56,628:INFO:Copying training dataset
2024-04-15 16:02:56,628:INFO:Defining folds
2024-04-15 16:02:56,628:INFO:Declaring metric variables
2024-04-15 16:02:56,628:INFO:Importing untrained model
2024-04-15 16:02:56,628:INFO:Declaring custom model
2024-04-15 16:02:56,628:INFO:Logistic Regression Imported successfully
2024-04-15 16:02:56,629:INFO:Cross validation set to False
2024-04-15 16:02:56,629:INFO:Fitting Model
2024-04-15 16:02:56,656:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.978, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=221,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-04-15 16:02:56,656:INFO:create_model() successfully completed......................................
2024-04-15 16:02:56,983:INFO:_master_model_container: 4
2024-04-15 16:02:56,984:INFO:_display_container: 6
2024-04-15 16:02:56,989:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.978, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=221,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-04-15 16:02:56,989:INFO:finalize_model() successfully completed......................................
2024-04-15 16:02:57,342:INFO:Initializing save_model()
2024-04-15 16:02:57,342:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.978, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=221,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:02:57,342:INFO:Adding model into prep_pipe
2024-04-15 16:02:57,342:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:02:57,350:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:02:57,367:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.978, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=221,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-04-15 16:02:57,367:INFO:save_model() successfully completed......................................
2024-04-15 16:02:57,754:INFO:Initializing load_model()
2024-04-15 16:02:57,754:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:02:57,827:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:03:01,312:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\392579703.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:03:03,704:INFO:PyCaret ClassificationExperiment
2024-04-15 16:03:03,704:INFO:Logging name: clf-default-name
2024-04-15 16:03:03,704:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:03:03,704:INFO:version 3.2.0
2024-04-15 16:03:03,704:INFO:Initializing setup()
2024-04-15 16:03:03,704:INFO:self.USI: b1da
2024-04-15 16:03:03,704:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:03:03,704:INFO:Checking environment
2024-04-15 16:03:03,704:INFO:python_version: 3.8.0
2024-04-15 16:03:03,704:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:03:03,704:INFO:machine: AMD64
2024-04-15 16:03:03,704:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:03:03,711:INFO:Memory: svmem(total=34301427712, available=18433978368, percent=46.3, used=15867449344, free=18433978368)
2024-04-15 16:03:03,711:INFO:Physical Core: 6
2024-04-15 16:03:03,711:INFO:Logical Core: 12
2024-04-15 16:03:03,711:INFO:Checking libraries
2024-04-15 16:03:03,711:INFO:System:
2024-04-15 16:03:03,712:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:03:03,712:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:03:03,712:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:03:03,712:INFO:PyCaret required dependencies:
2024-04-15 16:03:03,712:INFO:                 pip: 19.2.3
2024-04-15 16:03:03,712:INFO:          setuptools: 41.2.0
2024-04-15 16:03:03,712:INFO:             pycaret: 3.2.0
2024-04-15 16:03:03,712:INFO:             IPython: 8.12.3
2024-04-15 16:03:03,712:INFO:          ipywidgets: 8.1.2
2024-04-15 16:03:03,712:INFO:                tqdm: 4.66.2
2024-04-15 16:03:03,712:INFO:               numpy: 1.24.4
2024-04-15 16:03:03,712:INFO:              pandas: 1.5.3
2024-04-15 16:03:03,712:INFO:              jinja2: 3.1.3
2024-04-15 16:03:03,712:INFO:               scipy: 1.10.1
2024-04-15 16:03:03,712:INFO:              joblib: 1.3.2
2024-04-15 16:03:03,712:INFO:             sklearn: 1.2.0
2024-04-15 16:03:03,712:INFO:                pyod: 1.1.3
2024-04-15 16:03:03,712:INFO:            imblearn: 0.12.2
2024-04-15 16:03:03,712:INFO:   category_encoders: 2.6.3
2024-04-15 16:03:03,712:INFO:            lightgbm: 4.3.0
2024-04-15 16:03:03,712:INFO:               numba: 0.58.1
2024-04-15 16:03:03,712:INFO:            requests: 2.31.0
2024-04-15 16:03:03,712:INFO:          matplotlib: 3.6.0
2024-04-15 16:03:03,712:INFO:          scikitplot: 0.3.7
2024-04-15 16:03:03,712:INFO:         yellowbrick: 1.5
2024-04-15 16:03:03,712:INFO:              plotly: 5.20.0
2024-04-15 16:03:03,712:INFO:    plotly-resampler: Not installed
2024-04-15 16:03:03,712:INFO:             kaleido: 0.2.1
2024-04-15 16:03:03,712:INFO:           schemdraw: 0.15
2024-04-15 16:03:03,712:INFO:         statsmodels: 0.14.1
2024-04-15 16:03:03,712:INFO:              sktime: 0.21.1
2024-04-15 16:03:03,712:INFO:               tbats: 1.1.3
2024-04-15 16:03:03,712:INFO:            pmdarima: 2.0.4
2024-04-15 16:03:03,712:INFO:              psutil: 5.9.8
2024-04-15 16:03:03,712:INFO:          markupsafe: 2.1.5
2024-04-15 16:03:03,712:INFO:             pickle5: Not installed
2024-04-15 16:03:03,712:INFO:         cloudpickle: 3.0.0
2024-04-15 16:03:03,713:INFO:         deprecation: 2.1.0
2024-04-15 16:03:03,713:INFO:              xxhash: 3.4.1
2024-04-15 16:03:03,713:INFO:           wurlitzer: Not installed
2024-04-15 16:03:03,713:INFO:PyCaret optional dependencies:
2024-04-15 16:03:03,713:INFO:                shap: Not installed
2024-04-15 16:03:03,713:INFO:           interpret: Not installed
2024-04-15 16:03:03,713:INFO:                umap: Not installed
2024-04-15 16:03:03,713:INFO:     ydata_profiling: Not installed
2024-04-15 16:03:03,713:INFO:  explainerdashboard: Not installed
2024-04-15 16:03:03,713:INFO:             autoviz: Not installed
2024-04-15 16:03:03,713:INFO:           fairlearn: Not installed
2024-04-15 16:03:03,713:INFO:          deepchecks: Not installed
2024-04-15 16:03:03,713:INFO:             xgboost: Not installed
2024-04-15 16:03:03,713:INFO:            catboost: Not installed
2024-04-15 16:03:03,713:INFO:              kmodes: Not installed
2024-04-15 16:03:03,713:INFO:             mlxtend: Not installed
2024-04-15 16:03:03,713:INFO:       statsforecast: Not installed
2024-04-15 16:03:03,713:INFO:        tune_sklearn: Not installed
2024-04-15 16:03:03,713:INFO:                 ray: Not installed
2024-04-15 16:03:03,713:INFO:            hyperopt: Not installed
2024-04-15 16:03:03,713:INFO:              optuna: Not installed
2024-04-15 16:03:03,713:INFO:               skopt: Not installed
2024-04-15 16:03:03,713:INFO:              mlflow: 2.11.3
2024-04-15 16:03:03,713:INFO:              gradio: Not installed
2024-04-15 16:03:03,713:INFO:             fastapi: Not installed
2024-04-15 16:03:03,713:INFO:             uvicorn: Not installed
2024-04-15 16:03:03,713:INFO:              m2cgen: Not installed
2024-04-15 16:03:03,713:INFO:           evidently: Not installed
2024-04-15 16:03:03,713:INFO:               fugue: Not installed
2024-04-15 16:03:03,713:INFO:           streamlit: 1.33.0
2024-04-15 16:03:03,713:INFO:             prophet: Not installed
2024-04-15 16:03:03,714:INFO:None
2024-04-15 16:03:03,714:INFO:Set up data.
2024-04-15 16:03:03,719:INFO:Set up folding strategy.
2024-04-15 16:03:03,719:INFO:Set up train/test split.
2024-04-15 16:03:03,720:INFO:Set up data.
2024-04-15 16:03:03,723:INFO:Set up index.
2024-04-15 16:03:03,723:INFO:Assigning column types.
2024-04-15 16:03:03,726:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:03:03,764:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:03:03,765:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:03:03,789:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,789:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,827:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:03:03,828:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:03:03,851:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,851:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,851:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:03:03,889:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:03:03,913:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,914:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,951:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:03:03,974:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:03,975:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:03:04,039:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,039:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,102:INFO:Preparing preprocessing pipeline...
2024-04-15 16:03:04,103:INFO:Set up simple imputation.
2024-04-15 16:03:04,104:INFO:Set up feature normalization.
2024-04-15 16:03:04,122:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:03:04,125:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:03:04,125:INFO:Creating final display dataframe.
2024-04-15 16:03:04,191:INFO:Setup _display_container:                     Description             Value
0                    Session id               849
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              b1da
2024-04-15 16:03:04,260:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,324:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,325:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:03:04,326:INFO:setup() successfully completed in 0.62s...............
2024-04-15 16:03:04,326:INFO:Initializing compare_models()
2024-04-15 16:03:04,326:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:03:04,326:INFO:Checking exceptions
2024-04-15 16:03:04,331:INFO:Preparing display monitor
2024-04-15 16:03:04,350:INFO:Initializing Logistic Regression
2024-04-15 16:03:04,351:INFO:Total runtime is 1.6669432322184246e-05 minutes
2024-04-15 16:03:04,354:INFO:SubProcess create_model() called ==================================
2024-04-15 16:03:04,354:INFO:Initializing create_model()
2024-04-15 16:03:04,354:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59826D1F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:03:04,354:INFO:Checking exceptions
2024-04-15 16:03:04,355:INFO:Importing libraries
2024-04-15 16:03:04,355:INFO:Copying training dataset
2024-04-15 16:03:04,361:INFO:Defining folds
2024-04-15 16:03:04,361:INFO:Declaring metric variables
2024-04-15 16:03:04,365:INFO:Importing untrained model
2024-04-15 16:03:04,369:INFO:Logistic Regression Imported successfully
2024-04-15 16:03:04,375:INFO:Starting cross validation
2024-04-15 16:03:04,376:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:03:04,476:INFO:Calculating mean and std
2024-04-15 16:03:04,477:INFO:Creating metrics dataframe
2024-04-15 16:03:04,480:INFO:Uploading results into container
2024-04-15 16:03:04,481:INFO:Uploading model into container now
2024-04-15 16:03:04,481:INFO:_master_model_container: 1
2024-04-15 16:03:04,481:INFO:_display_container: 2
2024-04-15 16:03:04,481:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:03:04,481:INFO:create_model() successfully completed......................................
2024-04-15 16:03:04,805:INFO:SubProcess create_model() end ==================================
2024-04-15 16:03:04,805:INFO:Creating metrics dataframe
2024-04-15 16:03:04,813:INFO:Initializing Decision Tree Classifier
2024-04-15 16:03:04,813:INFO:Total runtime is 0.007718416055043539 minutes
2024-04-15 16:03:04,816:INFO:SubProcess create_model() called ==================================
2024-04-15 16:03:04,817:INFO:Initializing create_model()
2024-04-15 16:03:04,817:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59826D1F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:03:04,817:INFO:Checking exceptions
2024-04-15 16:03:04,817:INFO:Importing libraries
2024-04-15 16:03:04,817:INFO:Copying training dataset
2024-04-15 16:03:04,821:INFO:Defining folds
2024-04-15 16:03:04,821:INFO:Declaring metric variables
2024-04-15 16:03:04,824:INFO:Importing untrained model
2024-04-15 16:03:04,827:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:03:04,832:INFO:Starting cross validation
2024-04-15 16:03:04,833:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:03:04,980:INFO:Calculating mean and std
2024-04-15 16:03:04,980:INFO:Creating metrics dataframe
2024-04-15 16:03:04,983:INFO:Uploading results into container
2024-04-15 16:03:04,984:INFO:Uploading model into container now
2024-04-15 16:03:04,984:INFO:_master_model_container: 2
2024-04-15 16:03:04,984:INFO:_display_container: 2
2024-04-15 16:03:04,985:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=849, splitter='best')
2024-04-15 16:03:04,985:INFO:create_model() successfully completed......................................
2024-04-15 16:03:05,305:INFO:SubProcess create_model() end ==================================
2024-04-15 16:03:05,305:INFO:Creating metrics dataframe
2024-04-15 16:03:05,322:INFO:Initializing create_model()
2024-04-15 16:03:05,323:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=849, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:03:05,323:INFO:Checking exceptions
2024-04-15 16:03:05,325:INFO:Importing libraries
2024-04-15 16:03:05,325:INFO:Copying training dataset
2024-04-15 16:03:05,329:INFO:Defining folds
2024-04-15 16:03:05,329:INFO:Declaring metric variables
2024-04-15 16:03:05,329:INFO:Importing untrained model
2024-04-15 16:03:05,330:INFO:Declaring custom model
2024-04-15 16:03:05,330:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:03:05,331:INFO:Cross validation set to False
2024-04-15 16:03:05,331:INFO:Fitting Model
2024-04-15 16:03:05,389:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=849, splitter='best')
2024-04-15 16:03:05,389:INFO:create_model() successfully completed......................................
2024-04-15 16:03:05,727:INFO:Initializing create_model()
2024-04-15 16:03:05,727:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:03:05,727:INFO:Checking exceptions
2024-04-15 16:03:05,728:INFO:Importing libraries
2024-04-15 16:03:05,729:INFO:Copying training dataset
2024-04-15 16:03:05,733:INFO:Defining folds
2024-04-15 16:03:05,733:INFO:Declaring metric variables
2024-04-15 16:03:05,733:INFO:Importing untrained model
2024-04-15 16:03:05,733:INFO:Declaring custom model
2024-04-15 16:03:05,733:INFO:Logistic Regression Imported successfully
2024-04-15 16:03:05,734:INFO:Cross validation set to False
2024-04-15 16:03:05,734:INFO:Fitting Model
2024-04-15 16:03:05,751:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:03:05,751:INFO:create_model() successfully completed......................................
2024-04-15 16:03:06,075:INFO:_master_model_container: 2
2024-04-15 16:03:06,075:INFO:_display_container: 2
2024-04-15 16:03:06,076:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=849, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:03:06,076:INFO:compare_models() successfully completed......................................
2024-04-15 16:03:07,102:INFO:Initializing predict_model()
2024-04-15 16:03:07,102:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=849, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596DAF670>)
2024-04-15 16:03:07,102:INFO:Checking exceptions
2024-04-15 16:03:07,102:INFO:Preloading libraries
2024-04-15 16:03:08,276:INFO:Initializing predict_model()
2024-04-15 16:03:08,277:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596DAF670>)
2024-04-15 16:03:08,277:INFO:Checking exceptions
2024-04-15 16:03:08,277:INFO:Preloading libraries
2024-04-15 16:03:08,885:INFO:Initializing tune_model()
2024-04-15 16:03:08,886:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>)
2024-04-15 16:03:08,886:INFO:Checking exceptions
2024-04-15 16:03:08,899:INFO:Copying training dataset
2024-04-15 16:03:08,903:INFO:Checking base model
2024-04-15 16:03:08,903:INFO:Base model : Logistic Regression
2024-04-15 16:03:08,907:INFO:Declaring metric variables
2024-04-15 16:03:08,910:INFO:Defining Hyperparameters
2024-04-15 16:03:09,244:INFO:Tuning with n_jobs=-1
2024-04-15 16:03:09,244:INFO:Initializing RandomizedSearchCV
2024-04-15 16:03:09,513:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 5.802}
2024-04-15 16:03:09,513:INFO:Hyperparameter search completed
2024-04-15 16:03:09,514:INFO:SubProcess create_model() called ==================================
2024-04-15 16:03:09,514:INFO:Initializing create_model()
2024-04-15 16:03:09,514:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5998A3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 5.802})
2024-04-15 16:03:09,514:INFO:Checking exceptions
2024-04-15 16:03:09,514:INFO:Importing libraries
2024-04-15 16:03:09,514:INFO:Copying training dataset
2024-04-15 16:03:09,521:INFO:Defining folds
2024-04-15 16:03:09,521:INFO:Declaring metric variables
2024-04-15 16:03:09,526:INFO:Importing untrained model
2024-04-15 16:03:09,526:INFO:Declaring custom model
2024-04-15 16:03:09,529:INFO:Logistic Regression Imported successfully
2024-04-15 16:03:09,535:INFO:Starting cross validation
2024-04-15 16:03:09,536:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:03:09,655:INFO:Calculating mean and std
2024-04-15 16:03:09,656:INFO:Creating metrics dataframe
2024-04-15 16:03:09,662:INFO:Finalizing model
2024-04-15 16:03:09,688:INFO:Uploading results into container
2024-04-15 16:03:09,689:INFO:Uploading model into container now
2024-04-15 16:03:09,690:INFO:_master_model_container: 3
2024-04-15 16:03:09,690:INFO:_display_container: 5
2024-04-15 16:03:09,691:INFO:LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:03:09,691:INFO:create_model() successfully completed......................................
2024-04-15 16:03:10,037:INFO:SubProcess create_model() end ==================================
2024-04-15 16:03:10,037:INFO:choose_better activated
2024-04-15 16:03:10,041:INFO:SubProcess create_model() called ==================================
2024-04-15 16:03:10,041:INFO:Initializing create_model()
2024-04-15 16:03:10,042:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:03:10,042:INFO:Checking exceptions
2024-04-15 16:03:10,044:INFO:Importing libraries
2024-04-15 16:03:10,044:INFO:Copying training dataset
2024-04-15 16:03:10,049:INFO:Defining folds
2024-04-15 16:03:10,049:INFO:Declaring metric variables
2024-04-15 16:03:10,050:INFO:Importing untrained model
2024-04-15 16:03:10,050:INFO:Declaring custom model
2024-04-15 16:03:10,050:INFO:Logistic Regression Imported successfully
2024-04-15 16:03:10,051:INFO:Starting cross validation
2024-04-15 16:03:10,051:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:03:10,151:INFO:Calculating mean and std
2024-04-15 16:03:10,152:INFO:Creating metrics dataframe
2024-04-15 16:03:10,154:INFO:Finalizing model
2024-04-15 16:03:10,173:INFO:Uploading results into container
2024-04-15 16:03:10,174:INFO:Uploading model into container now
2024-04-15 16:03:10,174:INFO:_master_model_container: 4
2024-04-15 16:03:10,174:INFO:_display_container: 6
2024-04-15 16:03:10,174:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:03:10,174:INFO:create_model() successfully completed......................................
2024-04-15 16:03:10,498:INFO:SubProcess create_model() end ==================================
2024-04-15 16:03:10,499:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:03:10,499:INFO:LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:03:10,500:INFO:LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:03:10,500:INFO:choose_better completed
2024-04-15 16:03:10,507:INFO:_master_model_container: 4
2024-04-15 16:03:10,508:INFO:_display_container: 5
2024-04-15 16:03:10,508:INFO:LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:03:10,508:INFO:tune_model() successfully completed......................................
2024-04-15 16:03:10,848:INFO:Initializing predict_model()
2024-04-15 16:03:10,848:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5920271F0>)
2024-04-15 16:03:10,848:INFO:Checking exceptions
2024-04-15 16:03:10,848:INFO:Preloading libraries
2024-04-15 16:03:11,238:INFO:Initializing finalize_model()
2024-04-15 16:03:11,239:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:03:11,239:INFO:Finalizing LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:03:11,241:INFO:Initializing create_model()
2024-04-15 16:03:11,241:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597E71400>, estimator=LogisticRegression(C=5.802, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:03:11,241:INFO:Checking exceptions
2024-04-15 16:03:11,243:INFO:Importing libraries
2024-04-15 16:03:11,243:INFO:Copying training dataset
2024-04-15 16:03:11,243:INFO:Defining folds
2024-04-15 16:03:11,243:INFO:Declaring metric variables
2024-04-15 16:03:11,243:INFO:Importing untrained model
2024-04-15 16:03:11,243:INFO:Declaring custom model
2024-04-15 16:03:11,244:INFO:Logistic Regression Imported successfully
2024-04-15 16:03:11,245:INFO:Cross validation set to False
2024-04-15 16:03:11,245:INFO:Fitting Model
2024-04-15 16:03:11,270:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.802, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=849,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-04-15 16:03:11,270:INFO:create_model() successfully completed......................................
2024-04-15 16:03:11,650:INFO:_master_model_container: 4
2024-04-15 16:03:11,650:INFO:_display_container: 6
2024-04-15 16:03:11,655:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.802, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=849,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-04-15 16:03:11,656:INFO:finalize_model() successfully completed......................................
2024-04-15 16:03:12,043:INFO:Initializing save_model()
2024-04-15 16:03:12,044:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.802, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=849,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:03:12,044:INFO:Adding model into prep_pipe
2024-04-15 16:03:12,044:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:03:12,048:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:03:12,053:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.802, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=849,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-04-15 16:03:12,054:INFO:save_model() successfully completed......................................
2024-04-15 16:03:12,433:INFO:Initializing load_model()
2024-04-15 16:03:12,433:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:03:12,513:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:03:15,603:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\2766082431.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:08:54,018:INFO:PyCaret ClassificationExperiment
2024-04-15 16:08:54,018:INFO:Logging name: clf-default-name
2024-04-15 16:08:54,018:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:08:54,018:INFO:version 3.2.0
2024-04-15 16:08:54,019:INFO:Initializing setup()
2024-04-15 16:08:54,019:INFO:self.USI: 5cb0
2024-04-15 16:08:54,019:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:08:54,019:INFO:Checking environment
2024-04-15 16:08:54,019:INFO:python_version: 3.8.0
2024-04-15 16:08:54,019:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:08:54,019:INFO:machine: AMD64
2024-04-15 16:08:54,019:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:08:54,026:INFO:Memory: svmem(total=34301427712, available=19564244992, percent=43.0, used=14737182720, free=19564244992)
2024-04-15 16:08:54,026:INFO:Physical Core: 6
2024-04-15 16:08:54,026:INFO:Logical Core: 12
2024-04-15 16:08:54,026:INFO:Checking libraries
2024-04-15 16:08:54,026:INFO:System:
2024-04-15 16:08:54,026:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:08:54,026:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:08:54,026:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:08:54,027:INFO:PyCaret required dependencies:
2024-04-15 16:08:54,027:INFO:                 pip: 19.2.3
2024-04-15 16:08:54,027:INFO:          setuptools: 41.2.0
2024-04-15 16:08:54,027:INFO:             pycaret: 3.2.0
2024-04-15 16:08:54,027:INFO:             IPython: 8.12.3
2024-04-15 16:08:54,027:INFO:          ipywidgets: 8.1.2
2024-04-15 16:08:54,027:INFO:                tqdm: 4.66.2
2024-04-15 16:08:54,027:INFO:               numpy: 1.24.4
2024-04-15 16:08:54,027:INFO:              pandas: 1.5.3
2024-04-15 16:08:54,027:INFO:              jinja2: 3.1.3
2024-04-15 16:08:54,027:INFO:               scipy: 1.10.1
2024-04-15 16:08:54,027:INFO:              joblib: 1.3.2
2024-04-15 16:08:54,027:INFO:             sklearn: 1.2.0
2024-04-15 16:08:54,027:INFO:                pyod: 1.1.3
2024-04-15 16:08:54,027:INFO:            imblearn: 0.12.2
2024-04-15 16:08:54,027:INFO:   category_encoders: 2.6.3
2024-04-15 16:08:54,027:INFO:            lightgbm: 4.3.0
2024-04-15 16:08:54,027:INFO:               numba: 0.58.1
2024-04-15 16:08:54,027:INFO:            requests: 2.31.0
2024-04-15 16:08:54,027:INFO:          matplotlib: 3.6.0
2024-04-15 16:08:54,027:INFO:          scikitplot: 0.3.7
2024-04-15 16:08:54,027:INFO:         yellowbrick: 1.5
2024-04-15 16:08:54,027:INFO:              plotly: 5.20.0
2024-04-15 16:08:54,027:INFO:    plotly-resampler: Not installed
2024-04-15 16:08:54,027:INFO:             kaleido: 0.2.1
2024-04-15 16:08:54,027:INFO:           schemdraw: 0.15
2024-04-15 16:08:54,027:INFO:         statsmodels: 0.14.1
2024-04-15 16:08:54,027:INFO:              sktime: 0.21.1
2024-04-15 16:08:54,027:INFO:               tbats: 1.1.3
2024-04-15 16:08:54,028:INFO:            pmdarima: 2.0.4
2024-04-15 16:08:54,028:INFO:              psutil: 5.9.8
2024-04-15 16:08:54,028:INFO:          markupsafe: 2.1.5
2024-04-15 16:08:54,028:INFO:             pickle5: Not installed
2024-04-15 16:08:54,028:INFO:         cloudpickle: 3.0.0
2024-04-15 16:08:54,028:INFO:         deprecation: 2.1.0
2024-04-15 16:08:54,028:INFO:              xxhash: 3.4.1
2024-04-15 16:08:54,028:INFO:           wurlitzer: Not installed
2024-04-15 16:08:54,028:INFO:PyCaret optional dependencies:
2024-04-15 16:08:54,028:INFO:                shap: Not installed
2024-04-15 16:08:54,028:INFO:           interpret: Not installed
2024-04-15 16:08:54,028:INFO:                umap: Not installed
2024-04-15 16:08:54,028:INFO:     ydata_profiling: Not installed
2024-04-15 16:08:54,028:INFO:  explainerdashboard: Not installed
2024-04-15 16:08:54,028:INFO:             autoviz: Not installed
2024-04-15 16:08:54,028:INFO:           fairlearn: Not installed
2024-04-15 16:08:54,028:INFO:          deepchecks: Not installed
2024-04-15 16:08:54,028:INFO:             xgboost: Not installed
2024-04-15 16:08:54,028:INFO:            catboost: Not installed
2024-04-15 16:08:54,028:INFO:              kmodes: Not installed
2024-04-15 16:08:54,028:INFO:             mlxtend: Not installed
2024-04-15 16:08:54,028:INFO:       statsforecast: Not installed
2024-04-15 16:08:54,028:INFO:        tune_sklearn: Not installed
2024-04-15 16:08:54,028:INFO:                 ray: Not installed
2024-04-15 16:08:54,028:INFO:            hyperopt: Not installed
2024-04-15 16:08:54,028:INFO:              optuna: Not installed
2024-04-15 16:08:54,029:INFO:               skopt: Not installed
2024-04-15 16:08:54,029:INFO:              mlflow: 2.11.3
2024-04-15 16:08:54,029:INFO:              gradio: Not installed
2024-04-15 16:08:54,029:INFO:             fastapi: Not installed
2024-04-15 16:08:54,029:INFO:             uvicorn: Not installed
2024-04-15 16:08:54,029:INFO:              m2cgen: Not installed
2024-04-15 16:08:54,029:INFO:           evidently: Not installed
2024-04-15 16:08:54,029:INFO:               fugue: Not installed
2024-04-15 16:08:54,029:INFO:           streamlit: 1.33.0
2024-04-15 16:08:54,029:INFO:             prophet: Not installed
2024-04-15 16:08:54,029:INFO:None
2024-04-15 16:08:54,029:INFO:Set up data.
2024-04-15 16:08:54,036:INFO:Set up folding strategy.
2024-04-15 16:08:54,036:INFO:Set up train/test split.
2024-04-15 16:08:54,036:INFO:Set up data.
2024-04-15 16:08:54,041:INFO:Set up index.
2024-04-15 16:08:54,042:INFO:Assigning column types.
2024-04-15 16:08:54,045:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:08:54,083:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:08:54,084:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:08:54,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,111:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,150:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:08:54,151:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:08:54,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,176:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:08:54,212:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:08:54,240:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,240:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,279:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:08:54,303:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,303:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,304:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:08:54,371:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,371:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,430:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,432:INFO:Preparing preprocessing pipeline...
2024-04-15 16:08:54,433:INFO:Set up simple imputation.
2024-04-15 16:08:54,433:INFO:Set up feature normalization.
2024-04-15 16:08:54,452:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:08:54,455:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:08:54,456:INFO:Creating final display dataframe.
2024-04-15 16:08:54,522:INFO:Setup _display_container:                     Description             Value
0                    Session id              5885
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              5cb0
2024-04-15 16:08:54,589:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,589:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,650:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,651:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:08:54,652:INFO:setup() successfully completed in 0.64s...............
2024-04-15 16:08:54,652:INFO:Initializing compare_models()
2024-04-15 16:08:54,652:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:08:54,652:INFO:Checking exceptions
2024-04-15 16:08:54,656:INFO:Preparing display monitor
2024-04-15 16:08:54,672:INFO:Initializing Logistic Regression
2024-04-15 16:08:54,672:INFO:Total runtime is 0.0 minutes
2024-04-15 16:08:54,675:INFO:SubProcess create_model() called ==================================
2024-04-15 16:08:54,675:INFO:Initializing create_model()
2024-04-15 16:08:54,675:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597E15DF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:08:54,676:INFO:Checking exceptions
2024-04-15 16:08:54,676:INFO:Importing libraries
2024-04-15 16:08:54,676:INFO:Copying training dataset
2024-04-15 16:08:54,682:INFO:Defining folds
2024-04-15 16:08:54,682:INFO:Declaring metric variables
2024-04-15 16:08:54,686:INFO:Importing untrained model
2024-04-15 16:08:54,689:INFO:Logistic Regression Imported successfully
2024-04-15 16:08:54,694:INFO:Starting cross validation
2024-04-15 16:08:54,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:08:54,995:INFO:Calculating mean and std
2024-04-15 16:08:54,996:INFO:Creating metrics dataframe
2024-04-15 16:08:55,000:INFO:Uploading results into container
2024-04-15 16:08:55,001:INFO:Uploading model into container now
2024-04-15 16:08:55,002:INFO:_master_model_container: 1
2024-04-15 16:08:55,002:INFO:_display_container: 2
2024-04-15 16:08:55,002:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:08:55,003:INFO:create_model() successfully completed......................................
2024-04-15 16:08:55,524:INFO:SubProcess create_model() end ==================================
2024-04-15 16:08:55,524:INFO:Creating metrics dataframe
2024-04-15 16:08:55,532:INFO:Initializing Decision Tree Classifier
2024-04-15 16:08:55,533:INFO:Total runtime is 0.01433783769607544 minutes
2024-04-15 16:08:55,535:INFO:SubProcess create_model() called ==================================
2024-04-15 16:08:55,536:INFO:Initializing create_model()
2024-04-15 16:08:55,536:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597E15DF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:08:55,536:INFO:Checking exceptions
2024-04-15 16:08:55,536:INFO:Importing libraries
2024-04-15 16:08:55,536:INFO:Copying training dataset
2024-04-15 16:08:55,542:INFO:Defining folds
2024-04-15 16:08:55,542:INFO:Declaring metric variables
2024-04-15 16:08:55,545:INFO:Importing untrained model
2024-04-15 16:08:55,548:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:08:55,553:INFO:Starting cross validation
2024-04-15 16:08:55,554:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:08:58,408:INFO:Calculating mean and std
2024-04-15 16:08:58,412:INFO:Creating metrics dataframe
2024-04-15 16:08:58,420:INFO:Uploading results into container
2024-04-15 16:08:58,421:INFO:Uploading model into container now
2024-04-15 16:08:58,421:INFO:_master_model_container: 2
2024-04-15 16:08:58,421:INFO:_display_container: 2
2024-04-15 16:08:58,422:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5885, splitter='best')
2024-04-15 16:08:58,422:INFO:create_model() successfully completed......................................
2024-04-15 16:08:58,794:INFO:SubProcess create_model() end ==================================
2024-04-15 16:08:58,795:INFO:Creating metrics dataframe
2024-04-15 16:08:58,813:INFO:Initializing create_model()
2024-04-15 16:08:58,813:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5885, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:08:58,813:INFO:Checking exceptions
2024-04-15 16:08:58,814:INFO:Importing libraries
2024-04-15 16:08:58,814:INFO:Copying training dataset
2024-04-15 16:08:58,818:INFO:Defining folds
2024-04-15 16:08:58,818:INFO:Declaring metric variables
2024-04-15 16:08:58,818:INFO:Importing untrained model
2024-04-15 16:08:58,818:INFO:Declaring custom model
2024-04-15 16:08:58,818:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:08:58,819:INFO:Cross validation set to False
2024-04-15 16:08:58,819:INFO:Fitting Model
2024-04-15 16:08:58,881:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5885, splitter='best')
2024-04-15 16:08:58,881:INFO:create_model() successfully completed......................................
2024-04-15 16:08:59,205:INFO:Initializing create_model()
2024-04-15 16:08:59,205:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:08:59,205:INFO:Checking exceptions
2024-04-15 16:08:59,208:INFO:Importing libraries
2024-04-15 16:08:59,208:INFO:Copying training dataset
2024-04-15 16:08:59,212:INFO:Defining folds
2024-04-15 16:08:59,212:INFO:Declaring metric variables
2024-04-15 16:08:59,212:INFO:Importing untrained model
2024-04-15 16:08:59,212:INFO:Declaring custom model
2024-04-15 16:08:59,213:INFO:Logistic Regression Imported successfully
2024-04-15 16:08:59,213:INFO:Cross validation set to False
2024-04-15 16:08:59,213:INFO:Fitting Model
2024-04-15 16:08:59,231:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:08:59,231:INFO:create_model() successfully completed......................................
2024-04-15 16:08:59,569:INFO:_master_model_container: 2
2024-04-15 16:08:59,569:INFO:_display_container: 2
2024-04-15 16:08:59,570:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5885, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:08:59,570:INFO:compare_models() successfully completed......................................
2024-04-15 16:09:01,454:INFO:Initializing predict_model()
2024-04-15 16:09:01,454:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5885, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596D9FC10>)
2024-04-15 16:09:01,454:INFO:Checking exceptions
2024-04-15 16:09:01,454:INFO:Preloading libraries
2024-04-15 16:09:02,399:INFO:Initializing predict_model()
2024-04-15 16:09:02,399:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E575B80>)
2024-04-15 16:09:02,399:INFO:Checking exceptions
2024-04-15 16:09:02,399:INFO:Preloading libraries
2024-04-15 16:09:02,839:INFO:Initializing tune_model()
2024-04-15 16:09:02,840:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>)
2024-04-15 16:09:02,840:INFO:Checking exceptions
2024-04-15 16:09:02,851:INFO:Copying training dataset
2024-04-15 16:09:02,855:INFO:Checking base model
2024-04-15 16:09:02,855:INFO:Base model : Logistic Regression
2024-04-15 16:09:02,859:INFO:Declaring metric variables
2024-04-15 16:09:02,861:INFO:Defining Hyperparameters
2024-04-15 16:09:03,210:INFO:Tuning with n_jobs=-1
2024-04-15 16:09:03,210:INFO:Initializing RandomizedSearchCV
2024-04-15 16:09:04,212:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 5.669}
2024-04-15 16:09:04,213:INFO:Hyperparameter search completed
2024-04-15 16:09:04,213:INFO:SubProcess create_model() called ==================================
2024-04-15 16:09:04,214:INFO:Initializing create_model()
2024-04-15 16:09:04,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58C245160>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 5.669})
2024-04-15 16:09:04,214:INFO:Checking exceptions
2024-04-15 16:09:04,214:INFO:Importing libraries
2024-04-15 16:09:04,214:INFO:Copying training dataset
2024-04-15 16:09:04,219:INFO:Defining folds
2024-04-15 16:09:04,219:INFO:Declaring metric variables
2024-04-15 16:09:04,222:INFO:Importing untrained model
2024-04-15 16:09:04,222:INFO:Declaring custom model
2024-04-15 16:09:04,225:INFO:Logistic Regression Imported successfully
2024-04-15 16:09:04,230:INFO:Starting cross validation
2024-04-15 16:09:04,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:09:04,339:INFO:Calculating mean and std
2024-04-15 16:09:04,340:INFO:Creating metrics dataframe
2024-04-15 16:09:04,346:INFO:Finalizing model
2024-04-15 16:09:04,371:INFO:Uploading results into container
2024-04-15 16:09:04,372:INFO:Uploading model into container now
2024-04-15 16:09:04,372:INFO:_master_model_container: 3
2024-04-15 16:09:04,372:INFO:_display_container: 5
2024-04-15 16:09:04,373:INFO:LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:09:04,373:INFO:create_model() successfully completed......................................
2024-04-15 16:09:04,699:INFO:SubProcess create_model() end ==================================
2024-04-15 16:09:04,699:INFO:choose_better activated
2024-04-15 16:09:04,703:INFO:SubProcess create_model() called ==================================
2024-04-15 16:09:04,703:INFO:Initializing create_model()
2024-04-15 16:09:04,703:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:09:04,703:INFO:Checking exceptions
2024-04-15 16:09:04,705:INFO:Importing libraries
2024-04-15 16:09:04,705:INFO:Copying training dataset
2024-04-15 16:09:04,709:INFO:Defining folds
2024-04-15 16:09:04,710:INFO:Declaring metric variables
2024-04-15 16:09:04,710:INFO:Importing untrained model
2024-04-15 16:09:04,710:INFO:Declaring custom model
2024-04-15 16:09:04,710:INFO:Logistic Regression Imported successfully
2024-04-15 16:09:04,710:INFO:Starting cross validation
2024-04-15 16:09:04,711:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:09:04,874:INFO:Calculating mean and std
2024-04-15 16:09:04,875:INFO:Creating metrics dataframe
2024-04-15 16:09:04,876:INFO:Finalizing model
2024-04-15 16:09:04,894:INFO:Uploading results into container
2024-04-15 16:09:04,895:INFO:Uploading model into container now
2024-04-15 16:09:04,895:INFO:_master_model_container: 4
2024-04-15 16:09:04,895:INFO:_display_container: 6
2024-04-15 16:09:04,895:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:09:04,895:INFO:create_model() successfully completed......................................
2024-04-15 16:09:05,222:INFO:SubProcess create_model() end ==================================
2024-04-15 16:09:05,224:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:09:05,224:INFO:LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:09:05,225:INFO:LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:09:05,225:INFO:choose_better completed
2024-04-15 16:09:05,234:INFO:_master_model_container: 4
2024-04-15 16:09:05,235:INFO:_display_container: 5
2024-04-15 16:09:05,235:INFO:LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:09:05,235:INFO:tune_model() successfully completed......................................
2024-04-15 16:09:05,593:INFO:Initializing predict_model()
2024-04-15 16:09:05,593:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590571CA0>)
2024-04-15 16:09:05,593:INFO:Checking exceptions
2024-04-15 16:09:05,593:INFO:Preloading libraries
2024-04-15 16:09:05,979:INFO:Initializing finalize_model()
2024-04-15 16:09:05,979:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:09:05,980:INFO:Finalizing LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:09:05,982:INFO:Initializing create_model()
2024-04-15 16:09:05,982:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D1C6D0>, estimator=LogisticRegression(C=5.669, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5885, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:09:05,982:INFO:Checking exceptions
2024-04-15 16:09:05,984:INFO:Importing libraries
2024-04-15 16:09:05,984:INFO:Copying training dataset
2024-04-15 16:09:05,984:INFO:Defining folds
2024-04-15 16:09:05,984:INFO:Declaring metric variables
2024-04-15 16:09:05,984:INFO:Importing untrained model
2024-04-15 16:09:05,984:INFO:Declaring custom model
2024-04-15 16:09:05,985:INFO:Logistic Regression Imported successfully
2024-04-15 16:09:05,985:INFO:Cross validation set to False
2024-04-15 16:09:05,985:INFO:Fitting Model
2024-04-15 16:09:06,013:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.669, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=5885, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:09:06,013:INFO:create_model() successfully completed......................................
2024-04-15 16:09:06,322:INFO:_master_model_container: 4
2024-04-15 16:09:06,322:INFO:_display_container: 6
2024-04-15 16:09:06,327:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.669, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=5885, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:09:06,327:INFO:finalize_model() successfully completed......................................
2024-04-15 16:09:06,713:INFO:Initializing save_model()
2024-04-15 16:09:06,713:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.669, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=5885, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:09:06,713:INFO:Adding model into prep_pipe
2024-04-15 16:09:06,713:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:09:06,716:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:09:06,721:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=5.669, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=5885, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:09:06,721:INFO:save_model() successfully completed......................................
2024-04-15 16:09:07,185:INFO:Initializing load_model()
2024-04-15 16:09:07,186:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:09:07,273:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:09:10,737:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\2766082431.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:11:15,754:INFO:PyCaret ClassificationExperiment
2024-04-15 16:11:15,754:INFO:Logging name: clf-default-name
2024-04-15 16:11:15,754:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:11:15,754:INFO:version 3.2.0
2024-04-15 16:11:15,754:INFO:Initializing setup()
2024-04-15 16:11:15,754:INFO:self.USI: 1b62
2024-04-15 16:11:15,754:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:11:15,755:INFO:Checking environment
2024-04-15 16:11:15,755:INFO:python_version: 3.8.0
2024-04-15 16:11:15,755:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:11:15,755:INFO:machine: AMD64
2024-04-15 16:11:15,755:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:11:15,763:INFO:Memory: svmem(total=34301427712, available=18444689408, percent=46.2, used=15856738304, free=18444689408)
2024-04-15 16:11:15,764:INFO:Physical Core: 6
2024-04-15 16:11:15,764:INFO:Logical Core: 12
2024-04-15 16:11:15,764:INFO:Checking libraries
2024-04-15 16:11:15,764:INFO:System:
2024-04-15 16:11:15,764:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:11:15,764:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:11:15,764:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:11:15,764:INFO:PyCaret required dependencies:
2024-04-15 16:11:15,764:INFO:                 pip: 19.2.3
2024-04-15 16:11:15,765:INFO:          setuptools: 41.2.0
2024-04-15 16:11:15,765:INFO:             pycaret: 3.2.0
2024-04-15 16:11:15,765:INFO:             IPython: 8.12.3
2024-04-15 16:11:15,765:INFO:          ipywidgets: 8.1.2
2024-04-15 16:11:15,765:INFO:                tqdm: 4.66.2
2024-04-15 16:11:15,765:INFO:               numpy: 1.24.4
2024-04-15 16:11:15,765:INFO:              pandas: 1.5.3
2024-04-15 16:11:15,765:INFO:              jinja2: 3.1.3
2024-04-15 16:11:15,765:INFO:               scipy: 1.10.1
2024-04-15 16:11:15,765:INFO:              joblib: 1.3.2
2024-04-15 16:11:15,765:INFO:             sklearn: 1.2.0
2024-04-15 16:11:15,765:INFO:                pyod: 1.1.3
2024-04-15 16:11:15,765:INFO:            imblearn: 0.12.2
2024-04-15 16:11:15,765:INFO:   category_encoders: 2.6.3
2024-04-15 16:11:15,765:INFO:            lightgbm: 4.3.0
2024-04-15 16:11:15,765:INFO:               numba: 0.58.1
2024-04-15 16:11:15,765:INFO:            requests: 2.31.0
2024-04-15 16:11:15,766:INFO:          matplotlib: 3.6.0
2024-04-15 16:11:15,766:INFO:          scikitplot: 0.3.7
2024-04-15 16:11:15,766:INFO:         yellowbrick: 1.5
2024-04-15 16:11:15,766:INFO:              plotly: 5.20.0
2024-04-15 16:11:15,766:INFO:    plotly-resampler: Not installed
2024-04-15 16:11:15,766:INFO:             kaleido: 0.2.1
2024-04-15 16:11:15,766:INFO:           schemdraw: 0.15
2024-04-15 16:11:15,766:INFO:         statsmodels: 0.14.1
2024-04-15 16:11:15,766:INFO:              sktime: 0.21.1
2024-04-15 16:11:15,766:INFO:               tbats: 1.1.3
2024-04-15 16:11:15,766:INFO:            pmdarima: 2.0.4
2024-04-15 16:11:15,766:INFO:              psutil: 5.9.8
2024-04-15 16:11:15,766:INFO:          markupsafe: 2.1.5
2024-04-15 16:11:15,766:INFO:             pickle5: Not installed
2024-04-15 16:11:15,766:INFO:         cloudpickle: 3.0.0
2024-04-15 16:11:15,766:INFO:         deprecation: 2.1.0
2024-04-15 16:11:15,766:INFO:              xxhash: 3.4.1
2024-04-15 16:11:15,766:INFO:           wurlitzer: Not installed
2024-04-15 16:11:15,766:INFO:PyCaret optional dependencies:
2024-04-15 16:11:15,767:INFO:                shap: Not installed
2024-04-15 16:11:15,767:INFO:           interpret: Not installed
2024-04-15 16:11:15,767:INFO:                umap: Not installed
2024-04-15 16:11:15,767:INFO:     ydata_profiling: Not installed
2024-04-15 16:11:15,767:INFO:  explainerdashboard: Not installed
2024-04-15 16:11:15,767:INFO:             autoviz: Not installed
2024-04-15 16:11:15,767:INFO:           fairlearn: Not installed
2024-04-15 16:11:15,767:INFO:          deepchecks: Not installed
2024-04-15 16:11:15,767:INFO:             xgboost: Not installed
2024-04-15 16:11:15,767:INFO:            catboost: Not installed
2024-04-15 16:11:15,767:INFO:              kmodes: Not installed
2024-04-15 16:11:15,767:INFO:             mlxtend: Not installed
2024-04-15 16:11:15,767:INFO:       statsforecast: Not installed
2024-04-15 16:11:15,767:INFO:        tune_sklearn: Not installed
2024-04-15 16:11:15,767:INFO:                 ray: Not installed
2024-04-15 16:11:15,767:INFO:            hyperopt: Not installed
2024-04-15 16:11:15,767:INFO:              optuna: Not installed
2024-04-15 16:11:15,767:INFO:               skopt: Not installed
2024-04-15 16:11:15,767:INFO:              mlflow: 2.11.3
2024-04-15 16:11:15,767:INFO:              gradio: Not installed
2024-04-15 16:11:15,767:INFO:             fastapi: Not installed
2024-04-15 16:11:15,767:INFO:             uvicorn: Not installed
2024-04-15 16:11:15,767:INFO:              m2cgen: Not installed
2024-04-15 16:11:15,767:INFO:           evidently: Not installed
2024-04-15 16:11:15,767:INFO:               fugue: Not installed
2024-04-15 16:11:15,767:INFO:           streamlit: 1.33.0
2024-04-15 16:11:15,767:INFO:             prophet: Not installed
2024-04-15 16:11:15,767:INFO:None
2024-04-15 16:11:15,767:INFO:Set up data.
2024-04-15 16:11:15,774:INFO:Set up folding strategy.
2024-04-15 16:11:15,774:INFO:Set up train/test split.
2024-04-15 16:11:15,774:INFO:Set up data.
2024-04-15 16:11:15,778:INFO:Set up index.
2024-04-15 16:11:15,779:INFO:Assigning column types.
2024-04-15 16:11:15,782:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:11:15,827:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:11:15,828:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:15,853:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:15,854:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:15,894:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:11:15,896:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:15,927:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:15,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:15,928:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:11:15,973:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:15,998:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:15,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,035:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:16,058:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,058:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,058:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:11:16,117:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,118:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,177:INFO:Preparing preprocessing pipeline...
2024-04-15 16:11:16,178:INFO:Set up simple imputation.
2024-04-15 16:11:16,178:INFO:Set up feature normalization.
2024-04-15 16:11:16,196:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:11:16,199:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:11:16,199:INFO:Creating final display dataframe.
2024-04-15 16:11:16,261:INFO:Setup _display_container:                     Description             Value
0                    Session id              3270
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              1b62
2024-04-15 16:11:16,354:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,424:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,424:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:16,425:INFO:setup() successfully completed in 0.67s...............
2024-04-15 16:11:16,425:INFO:Initializing compare_models()
2024-04-15 16:11:16,425:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:11:16,425:INFO:Checking exceptions
2024-04-15 16:11:16,429:INFO:Preparing display monitor
2024-04-15 16:11:16,447:INFO:Initializing Logistic Regression
2024-04-15 16:11:16,448:INFO:Total runtime is 1.666545867919922e-05 minutes
2024-04-15 16:11:16,451:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:16,451:INFO:Initializing create_model()
2024-04-15 16:11:16,451:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59051BC70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:16,451:INFO:Checking exceptions
2024-04-15 16:11:16,451:INFO:Importing libraries
2024-04-15 16:11:16,452:INFO:Copying training dataset
2024-04-15 16:11:16,458:INFO:Defining folds
2024-04-15 16:11:16,458:INFO:Declaring metric variables
2024-04-15 16:11:16,462:INFO:Importing untrained model
2024-04-15 16:11:16,465:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:16,470:INFO:Starting cross validation
2024-04-15 16:11:16,471:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:16,585:INFO:Calculating mean and std
2024-04-15 16:11:16,586:INFO:Creating metrics dataframe
2024-04-15 16:11:16,588:INFO:Uploading results into container
2024-04-15 16:11:16,589:INFO:Uploading model into container now
2024-04-15 16:11:16,589:INFO:_master_model_container: 1
2024-04-15 16:11:16,589:INFO:_display_container: 2
2024-04-15 16:11:16,589:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:16,590:INFO:create_model() successfully completed......................................
2024-04-15 16:11:16,968:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:16,968:INFO:Creating metrics dataframe
2024-04-15 16:11:16,976:INFO:Initializing Decision Tree Classifier
2024-04-15 16:11:16,977:INFO:Total runtime is 0.00883639653523763 minutes
2024-04-15 16:11:16,987:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:16,990:INFO:Initializing create_model()
2024-04-15 16:11:16,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C59051BC70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:16,999:INFO:Checking exceptions
2024-04-15 16:11:16,999:INFO:Importing libraries
2024-04-15 16:11:16,999:INFO:Copying training dataset
2024-04-15 16:11:17,009:INFO:Defining folds
2024-04-15 16:11:17,009:INFO:Declaring metric variables
2024-04-15 16:11:17,014:INFO:Importing untrained model
2024-04-15 16:11:17,018:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:11:17,026:INFO:Starting cross validation
2024-04-15 16:11:17,029:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:17,192:INFO:Calculating mean and std
2024-04-15 16:11:17,193:INFO:Creating metrics dataframe
2024-04-15 16:11:17,195:INFO:Uploading results into container
2024-04-15 16:11:17,196:INFO:Uploading model into container now
2024-04-15 16:11:17,196:INFO:_master_model_container: 2
2024-04-15 16:11:17,196:INFO:_display_container: 2
2024-04-15 16:11:17,197:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3270, splitter='best')
2024-04-15 16:11:17,197:INFO:create_model() successfully completed......................................
2024-04-15 16:11:17,589:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:17,589:INFO:Creating metrics dataframe
2024-04-15 16:11:17,605:INFO:Initializing create_model()
2024-04-15 16:11:17,606:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3270, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:17,606:INFO:Checking exceptions
2024-04-15 16:11:17,607:INFO:Importing libraries
2024-04-15 16:11:17,607:INFO:Copying training dataset
2024-04-15 16:11:17,611:INFO:Defining folds
2024-04-15 16:11:17,611:INFO:Declaring metric variables
2024-04-15 16:11:17,611:INFO:Importing untrained model
2024-04-15 16:11:17,612:INFO:Declaring custom model
2024-04-15 16:11:17,612:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:11:17,613:INFO:Cross validation set to False
2024-04-15 16:11:17,613:INFO:Fitting Model
2024-04-15 16:11:17,669:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3270, splitter='best')
2024-04-15 16:11:17,669:INFO:create_model() successfully completed......................................
2024-04-15 16:11:18,029:INFO:Initializing create_model()
2024-04-15 16:11:18,030:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:18,030:INFO:Checking exceptions
2024-04-15 16:11:18,031:INFO:Importing libraries
2024-04-15 16:11:18,032:INFO:Copying training dataset
2024-04-15 16:11:18,037:INFO:Defining folds
2024-04-15 16:11:18,037:INFO:Declaring metric variables
2024-04-15 16:11:18,037:INFO:Importing untrained model
2024-04-15 16:11:18,037:INFO:Declaring custom model
2024-04-15 16:11:18,038:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:18,038:INFO:Cross validation set to False
2024-04-15 16:11:18,038:INFO:Fitting Model
2024-04-15 16:11:18,054:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:18,055:INFO:create_model() successfully completed......................................
2024-04-15 16:11:18,435:INFO:_master_model_container: 2
2024-04-15 16:11:18,436:INFO:_display_container: 2
2024-04-15 16:11:18,436:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3270, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:11:18,436:INFO:compare_models() successfully completed......................................
2024-04-15 16:11:19,519:INFO:Initializing predict_model()
2024-04-15 16:11:19,519:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3270, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596D9F820>)
2024-04-15 16:11:19,519:INFO:Checking exceptions
2024-04-15 16:11:19,519:INFO:Preloading libraries
2024-04-15 16:11:20,839:INFO:Initializing predict_model()
2024-04-15 16:11:20,839:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E575CA0>)
2024-04-15 16:11:20,839:INFO:Checking exceptions
2024-04-15 16:11:20,839:INFO:Preloading libraries
2024-04-15 16:11:21,281:INFO:Initializing tune_model()
2024-04-15 16:11:21,282:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>)
2024-04-15 16:11:21,282:INFO:Checking exceptions
2024-04-15 16:11:21,296:INFO:Copying training dataset
2024-04-15 16:11:21,300:INFO:Checking base model
2024-04-15 16:11:21,301:INFO:Base model : Logistic Regression
2024-04-15 16:11:21,305:INFO:Declaring metric variables
2024-04-15 16:11:21,308:INFO:Defining Hyperparameters
2024-04-15 16:11:21,769:INFO:Tuning with n_jobs=-1
2024-04-15 16:11:21,769:INFO:Initializing RandomizedSearchCV
2024-04-15 16:11:22,033:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 6.873}
2024-04-15 16:11:22,033:INFO:Hyperparameter search completed
2024-04-15 16:11:22,034:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:22,035:INFO:Initializing create_model()
2024-04-15 16:11:22,035:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597DBF190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 6.873})
2024-04-15 16:11:22,035:INFO:Checking exceptions
2024-04-15 16:11:22,035:INFO:Importing libraries
2024-04-15 16:11:22,035:INFO:Copying training dataset
2024-04-15 16:11:22,044:INFO:Defining folds
2024-04-15 16:11:22,044:INFO:Declaring metric variables
2024-04-15 16:11:22,049:INFO:Importing untrained model
2024-04-15 16:11:22,049:INFO:Declaring custom model
2024-04-15 16:11:22,054:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:22,060:INFO:Starting cross validation
2024-04-15 16:11:22,061:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:22,208:INFO:Calculating mean and std
2024-04-15 16:11:22,209:INFO:Creating metrics dataframe
2024-04-15 16:11:22,217:INFO:Finalizing model
2024-04-15 16:11:22,257:INFO:Uploading results into container
2024-04-15 16:11:22,258:INFO:Uploading model into container now
2024-04-15 16:11:22,259:INFO:_master_model_container: 3
2024-04-15 16:11:22,259:INFO:_display_container: 5
2024-04-15 16:11:22,259:INFO:LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:22,259:INFO:create_model() successfully completed......................................
2024-04-15 16:11:22,666:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:22,666:INFO:choose_better activated
2024-04-15 16:11:22,669:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:22,670:INFO:Initializing create_model()
2024-04-15 16:11:22,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:22,670:INFO:Checking exceptions
2024-04-15 16:11:22,672:INFO:Importing libraries
2024-04-15 16:11:22,672:INFO:Copying training dataset
2024-04-15 16:11:22,676:INFO:Defining folds
2024-04-15 16:11:22,676:INFO:Declaring metric variables
2024-04-15 16:11:22,677:INFO:Importing untrained model
2024-04-15 16:11:22,677:INFO:Declaring custom model
2024-04-15 16:11:22,677:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:22,677:INFO:Starting cross validation
2024-04-15 16:11:22,678:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:22,765:INFO:Calculating mean and std
2024-04-15 16:11:22,766:INFO:Creating metrics dataframe
2024-04-15 16:11:22,768:INFO:Finalizing model
2024-04-15 16:11:22,787:INFO:Uploading results into container
2024-04-15 16:11:22,788:INFO:Uploading model into container now
2024-04-15 16:11:22,788:INFO:_master_model_container: 4
2024-04-15 16:11:22,788:INFO:_display_container: 6
2024-04-15 16:11:22,788:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:22,788:INFO:create_model() successfully completed......................................
2024-04-15 16:11:23,161:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:23,162:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:11:23,163:INFO:LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:11:23,163:INFO:LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:11:23,163:INFO:choose_better completed
2024-04-15 16:11:23,173:INFO:_master_model_container: 4
2024-04-15 16:11:23,173:INFO:_display_container: 5
2024-04-15 16:11:23,173:INFO:LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:23,174:INFO:tune_model() successfully completed......................................
2024-04-15 16:11:23,586:INFO:Initializing predict_model()
2024-04-15 16:11:23,587:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C592027B80>)
2024-04-15 16:11:23,587:INFO:Checking exceptions
2024-04-15 16:11:23,587:INFO:Preloading libraries
2024-04-15 16:11:24,020:INFO:Initializing finalize_model()
2024-04-15 16:11:24,020:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:11:24,021:INFO:Finalizing LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:24,023:INFO:Initializing create_model()
2024-04-15 16:11:24,023:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D0ED60>, estimator=LogisticRegression(C=6.873, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3270, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:24,023:INFO:Checking exceptions
2024-04-15 16:11:24,025:INFO:Importing libraries
2024-04-15 16:11:24,025:INFO:Copying training dataset
2024-04-15 16:11:24,025:INFO:Defining folds
2024-04-15 16:11:24,025:INFO:Declaring metric variables
2024-04-15 16:11:24,025:INFO:Importing untrained model
2024-04-15 16:11:24,025:INFO:Declaring custom model
2024-04-15 16:11:24,026:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:24,027:INFO:Cross validation set to False
2024-04-15 16:11:24,027:INFO:Fitting Model
2024-04-15 16:11:24,053:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.873, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3270, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:11:24,053:INFO:create_model() successfully completed......................................
2024-04-15 16:11:24,418:INFO:_master_model_container: 4
2024-04-15 16:11:24,419:INFO:_display_container: 6
2024-04-15 16:11:24,423:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.873, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3270, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:11:24,423:INFO:finalize_model() successfully completed......................................
2024-04-15 16:11:24,743:INFO:Initializing save_model()
2024-04-15 16:11:24,743:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.873, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3270, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:11:24,743:INFO:Adding model into prep_pipe
2024-04-15 16:11:24,743:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:11:24,746:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:11:24,750:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.873, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3270, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:11:24,750:INFO:save_model() successfully completed......................................
2024-04-15 16:11:25,160:INFO:Initializing load_model()
2024-04-15 16:11:25,160:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:11:25,246:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:11:28,483:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\850259990.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:11:50,066:INFO:PyCaret ClassificationExperiment
2024-04-15 16:11:50,066:INFO:Logging name: clf-default-name
2024-04-15 16:11:50,066:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:11:50,066:INFO:version 3.2.0
2024-04-15 16:11:50,066:INFO:Initializing setup()
2024-04-15 16:11:50,066:INFO:self.USI: fae3
2024-04-15 16:11:50,066:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:11:50,066:INFO:Checking environment
2024-04-15 16:11:50,066:INFO:python_version: 3.8.0
2024-04-15 16:11:50,066:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:11:50,066:INFO:machine: AMD64
2024-04-15 16:11:50,066:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:11:50,075:INFO:Memory: svmem(total=34301427712, available=18413801472, percent=46.3, used=15887626240, free=18413801472)
2024-04-15 16:11:50,075:INFO:Physical Core: 6
2024-04-15 16:11:50,075:INFO:Logical Core: 12
2024-04-15 16:11:50,075:INFO:Checking libraries
2024-04-15 16:11:50,075:INFO:System:
2024-04-15 16:11:50,076:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:11:50,076:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:11:50,076:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:11:50,076:INFO:PyCaret required dependencies:
2024-04-15 16:11:50,076:INFO:                 pip: 19.2.3
2024-04-15 16:11:50,076:INFO:          setuptools: 41.2.0
2024-04-15 16:11:50,076:INFO:             pycaret: 3.2.0
2024-04-15 16:11:50,076:INFO:             IPython: 8.12.3
2024-04-15 16:11:50,076:INFO:          ipywidgets: 8.1.2
2024-04-15 16:11:50,076:INFO:                tqdm: 4.66.2
2024-04-15 16:11:50,076:INFO:               numpy: 1.24.4
2024-04-15 16:11:50,076:INFO:              pandas: 1.5.3
2024-04-15 16:11:50,076:INFO:              jinja2: 3.1.3
2024-04-15 16:11:50,076:INFO:               scipy: 1.10.1
2024-04-15 16:11:50,076:INFO:              joblib: 1.3.2
2024-04-15 16:11:50,076:INFO:             sklearn: 1.2.0
2024-04-15 16:11:50,077:INFO:                pyod: 1.1.3
2024-04-15 16:11:50,077:INFO:            imblearn: 0.12.2
2024-04-15 16:11:50,077:INFO:   category_encoders: 2.6.3
2024-04-15 16:11:50,077:INFO:            lightgbm: 4.3.0
2024-04-15 16:11:50,077:INFO:               numba: 0.58.1
2024-04-15 16:11:50,077:INFO:            requests: 2.31.0
2024-04-15 16:11:50,077:INFO:          matplotlib: 3.6.0
2024-04-15 16:11:50,077:INFO:          scikitplot: 0.3.7
2024-04-15 16:11:50,077:INFO:         yellowbrick: 1.5
2024-04-15 16:11:50,077:INFO:              plotly: 5.20.0
2024-04-15 16:11:50,077:INFO:    plotly-resampler: Not installed
2024-04-15 16:11:50,077:INFO:             kaleido: 0.2.1
2024-04-15 16:11:50,077:INFO:           schemdraw: 0.15
2024-04-15 16:11:50,077:INFO:         statsmodels: 0.14.1
2024-04-15 16:11:50,077:INFO:              sktime: 0.21.1
2024-04-15 16:11:50,077:INFO:               tbats: 1.1.3
2024-04-15 16:11:50,077:INFO:            pmdarima: 2.0.4
2024-04-15 16:11:50,077:INFO:              psutil: 5.9.8
2024-04-15 16:11:50,077:INFO:          markupsafe: 2.1.5
2024-04-15 16:11:50,077:INFO:             pickle5: Not installed
2024-04-15 16:11:50,077:INFO:         cloudpickle: 3.0.0
2024-04-15 16:11:50,078:INFO:         deprecation: 2.1.0
2024-04-15 16:11:50,078:INFO:              xxhash: 3.4.1
2024-04-15 16:11:50,078:INFO:           wurlitzer: Not installed
2024-04-15 16:11:50,078:INFO:PyCaret optional dependencies:
2024-04-15 16:11:50,078:INFO:                shap: Not installed
2024-04-15 16:11:50,078:INFO:           interpret: Not installed
2024-04-15 16:11:50,078:INFO:                umap: Not installed
2024-04-15 16:11:50,078:INFO:     ydata_profiling: Not installed
2024-04-15 16:11:50,078:INFO:  explainerdashboard: Not installed
2024-04-15 16:11:50,078:INFO:             autoviz: Not installed
2024-04-15 16:11:50,078:INFO:           fairlearn: Not installed
2024-04-15 16:11:50,078:INFO:          deepchecks: Not installed
2024-04-15 16:11:50,078:INFO:             xgboost: Not installed
2024-04-15 16:11:50,078:INFO:            catboost: Not installed
2024-04-15 16:11:50,078:INFO:              kmodes: Not installed
2024-04-15 16:11:50,078:INFO:             mlxtend: Not installed
2024-04-15 16:11:50,078:INFO:       statsforecast: Not installed
2024-04-15 16:11:50,078:INFO:        tune_sklearn: Not installed
2024-04-15 16:11:50,078:INFO:                 ray: Not installed
2024-04-15 16:11:50,078:INFO:            hyperopt: Not installed
2024-04-15 16:11:50,078:INFO:              optuna: Not installed
2024-04-15 16:11:50,078:INFO:               skopt: Not installed
2024-04-15 16:11:50,079:INFO:              mlflow: 2.11.3
2024-04-15 16:11:50,079:INFO:              gradio: Not installed
2024-04-15 16:11:50,079:INFO:             fastapi: Not installed
2024-04-15 16:11:50,079:INFO:             uvicorn: Not installed
2024-04-15 16:11:50,079:INFO:              m2cgen: Not installed
2024-04-15 16:11:50,079:INFO:           evidently: Not installed
2024-04-15 16:11:50,079:INFO:               fugue: Not installed
2024-04-15 16:11:50,079:INFO:           streamlit: 1.33.0
2024-04-15 16:11:50,079:INFO:             prophet: Not installed
2024-04-15 16:11:50,079:INFO:None
2024-04-15 16:11:50,079:INFO:Set up data.
2024-04-15 16:11:50,085:INFO:Set up folding strategy.
2024-04-15 16:11:50,085:INFO:Set up train/test split.
2024-04-15 16:11:50,085:INFO:Set up data.
2024-04-15 16:11:50,089:INFO:Set up index.
2024-04-15 16:11:50,089:INFO:Assigning column types.
2024-04-15 16:11:50,093:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:11:50,136:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:11:50,137:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:50,169:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,212:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:11:50,213:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:50,238:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,239:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:11:50,279:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:50,305:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,306:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,350:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:11:50,374:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,374:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,375:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:11:50,439:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,440:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,505:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,507:INFO:Preparing preprocessing pipeline...
2024-04-15 16:11:50,509:INFO:Set up simple imputation.
2024-04-15 16:11:50,509:INFO:Set up feature normalization.
2024-04-15 16:11:50,536:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:11:50,541:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:11:50,542:INFO:Creating final display dataframe.
2024-04-15 16:11:50,642:INFO:Setup _display_container:                     Description             Value
0                    Session id              3775
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              fae3
2024-04-15 16:11:50,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,778:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:11:50,778:INFO:setup() successfully completed in 0.71s...............
2024-04-15 16:11:50,779:INFO:Initializing compare_models()
2024-04-15 16:11:50,779:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:11:50,779:INFO:Checking exceptions
2024-04-15 16:11:50,782:INFO:Preparing display monitor
2024-04-15 16:11:50,799:INFO:Initializing Logistic Regression
2024-04-15 16:11:50,799:INFO:Total runtime is 0.0 minutes
2024-04-15 16:11:50,802:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:50,802:INFO:Initializing create_model()
2024-04-15 16:11:50,802:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C592A3D0A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:50,802:INFO:Checking exceptions
2024-04-15 16:11:50,802:INFO:Importing libraries
2024-04-15 16:11:50,802:INFO:Copying training dataset
2024-04-15 16:11:50,809:INFO:Defining folds
2024-04-15 16:11:50,809:INFO:Declaring metric variables
2024-04-15 16:11:50,813:INFO:Importing untrained model
2024-04-15 16:11:50,822:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:50,829:INFO:Starting cross validation
2024-04-15 16:11:50,830:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:50,940:INFO:Calculating mean and std
2024-04-15 16:11:50,941:INFO:Creating metrics dataframe
2024-04-15 16:11:50,946:INFO:Uploading results into container
2024-04-15 16:11:50,946:INFO:Uploading model into container now
2024-04-15 16:11:50,947:INFO:_master_model_container: 1
2024-04-15 16:11:50,947:INFO:_display_container: 2
2024-04-15 16:11:50,947:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:50,947:INFO:create_model() successfully completed......................................
2024-04-15 16:11:51,393:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:51,393:INFO:Creating metrics dataframe
2024-04-15 16:11:51,403:INFO:Initializing Decision Tree Classifier
2024-04-15 16:11:51,403:INFO:Total runtime is 0.010068949063618977 minutes
2024-04-15 16:11:51,405:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:51,406:INFO:Initializing create_model()
2024-04-15 16:11:51,406:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C592A3D0A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:51,406:INFO:Checking exceptions
2024-04-15 16:11:51,406:INFO:Importing libraries
2024-04-15 16:11:51,406:INFO:Copying training dataset
2024-04-15 16:11:51,412:INFO:Defining folds
2024-04-15 16:11:51,412:INFO:Declaring metric variables
2024-04-15 16:11:51,415:INFO:Importing untrained model
2024-04-15 16:11:51,419:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:11:51,424:INFO:Starting cross validation
2024-04-15 16:11:51,425:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:51,584:INFO:Calculating mean and std
2024-04-15 16:11:51,585:INFO:Creating metrics dataframe
2024-04-15 16:11:51,588:INFO:Uploading results into container
2024-04-15 16:11:51,589:INFO:Uploading model into container now
2024-04-15 16:11:51,589:INFO:_master_model_container: 2
2024-04-15 16:11:51,589:INFO:_display_container: 2
2024-04-15 16:11:51,590:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3775, splitter='best')
2024-04-15 16:11:51,590:INFO:create_model() successfully completed......................................
2024-04-15 16:11:51,961:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:51,961:INFO:Creating metrics dataframe
2024-04-15 16:11:51,975:INFO:Initializing create_model()
2024-04-15 16:11:51,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3775, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:51,976:INFO:Checking exceptions
2024-04-15 16:11:51,977:INFO:Importing libraries
2024-04-15 16:11:51,978:INFO:Copying training dataset
2024-04-15 16:11:51,982:INFO:Defining folds
2024-04-15 16:11:51,982:INFO:Declaring metric variables
2024-04-15 16:11:51,982:INFO:Importing untrained model
2024-04-15 16:11:51,982:INFO:Declaring custom model
2024-04-15 16:11:51,983:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:11:51,983:INFO:Cross validation set to False
2024-04-15 16:11:51,983:INFO:Fitting Model
2024-04-15 16:11:52,039:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3775, splitter='best')
2024-04-15 16:11:52,039:INFO:create_model() successfully completed......................................
2024-04-15 16:11:52,446:INFO:Initializing create_model()
2024-04-15 16:11:52,446:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:52,447:INFO:Checking exceptions
2024-04-15 16:11:52,448:INFO:Importing libraries
2024-04-15 16:11:52,449:INFO:Copying training dataset
2024-04-15 16:11:52,454:INFO:Defining folds
2024-04-15 16:11:52,454:INFO:Declaring metric variables
2024-04-15 16:11:52,454:INFO:Importing untrained model
2024-04-15 16:11:52,455:INFO:Declaring custom model
2024-04-15 16:11:52,455:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:52,456:INFO:Cross validation set to False
2024-04-15 16:11:52,456:INFO:Fitting Model
2024-04-15 16:11:52,475:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:52,475:INFO:create_model() successfully completed......................................
2024-04-15 16:11:52,803:INFO:_master_model_container: 2
2024-04-15 16:11:52,803:INFO:_display_container: 2
2024-04-15 16:11:52,803:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3775, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:11:52,804:INFO:compare_models() successfully completed......................................
2024-04-15 16:11:53,756:INFO:Initializing predict_model()
2024-04-15 16:11:53,756:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3775, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597CC9DC0>)
2024-04-15 16:11:53,756:INFO:Checking exceptions
2024-04-15 16:11:53,756:INFO:Preloading libraries
2024-04-15 16:11:55,068:INFO:Initializing predict_model()
2024-04-15 16:11:55,068:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596D9F5E0>)
2024-04-15 16:11:55,068:INFO:Checking exceptions
2024-04-15 16:11:55,068:INFO:Preloading libraries
2024-04-15 16:11:55,499:INFO:Initializing tune_model()
2024-04-15 16:11:55,500:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>)
2024-04-15 16:11:55,500:INFO:Checking exceptions
2024-04-15 16:11:55,514:INFO:Copying training dataset
2024-04-15 16:11:55,519:INFO:Checking base model
2024-04-15 16:11:55,519:INFO:Base model : Logistic Regression
2024-04-15 16:11:55,522:INFO:Declaring metric variables
2024-04-15 16:11:55,524:INFO:Defining Hyperparameters
2024-04-15 16:11:55,868:INFO:Tuning with n_jobs=-1
2024-04-15 16:11:55,868:INFO:Initializing RandomizedSearchCV
2024-04-15 16:11:56,116:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 2.481}
2024-04-15 16:11:56,116:INFO:Hyperparameter search completed
2024-04-15 16:11:56,116:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:56,116:INFO:Initializing create_model()
2024-04-15 16:11:56,116:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5869F96D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 2.481})
2024-04-15 16:11:56,117:INFO:Checking exceptions
2024-04-15 16:11:56,117:INFO:Importing libraries
2024-04-15 16:11:56,117:INFO:Copying training dataset
2024-04-15 16:11:56,120:INFO:Defining folds
2024-04-15 16:11:56,120:INFO:Declaring metric variables
2024-04-15 16:11:56,124:INFO:Importing untrained model
2024-04-15 16:11:56,124:INFO:Declaring custom model
2024-04-15 16:11:56,126:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:56,131:INFO:Starting cross validation
2024-04-15 16:11:56,131:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:56,224:INFO:Calculating mean and std
2024-04-15 16:11:56,225:INFO:Creating metrics dataframe
2024-04-15 16:11:56,229:INFO:Finalizing model
2024-04-15 16:11:56,254:INFO:Uploading results into container
2024-04-15 16:11:56,256:INFO:Uploading model into container now
2024-04-15 16:11:56,256:INFO:_master_model_container: 3
2024-04-15 16:11:56,256:INFO:_display_container: 5
2024-04-15 16:11:56,257:INFO:LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:56,257:INFO:create_model() successfully completed......................................
2024-04-15 16:11:56,600:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:56,600:INFO:choose_better activated
2024-04-15 16:11:56,604:INFO:SubProcess create_model() called ==================================
2024-04-15 16:11:56,604:INFO:Initializing create_model()
2024-04-15 16:11:56,604:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:56,604:INFO:Checking exceptions
2024-04-15 16:11:56,606:INFO:Importing libraries
2024-04-15 16:11:56,606:INFO:Copying training dataset
2024-04-15 16:11:56,611:INFO:Defining folds
2024-04-15 16:11:56,611:INFO:Declaring metric variables
2024-04-15 16:11:56,611:INFO:Importing untrained model
2024-04-15 16:11:56,611:INFO:Declaring custom model
2024-04-15 16:11:56,612:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:56,612:INFO:Starting cross validation
2024-04-15 16:11:56,613:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:11:56,701:INFO:Calculating mean and std
2024-04-15 16:11:56,702:INFO:Creating metrics dataframe
2024-04-15 16:11:56,704:INFO:Finalizing model
2024-04-15 16:11:56,722:INFO:Uploading results into container
2024-04-15 16:11:56,722:INFO:Uploading model into container now
2024-04-15 16:11:56,723:INFO:_master_model_container: 4
2024-04-15 16:11:56,723:INFO:_display_container: 6
2024-04-15 16:11:56,723:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:56,723:INFO:create_model() successfully completed......................................
2024-04-15 16:11:57,033:INFO:SubProcess create_model() end ==================================
2024-04-15 16:11:57,034:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:11:57,034:INFO:LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:11:57,035:INFO:LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:11:57,035:INFO:choose_better completed
2024-04-15 16:11:57,042:INFO:_master_model_container: 4
2024-04-15 16:11:57,042:INFO:_display_container: 5
2024-04-15 16:11:57,042:INFO:LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:57,042:INFO:tune_model() successfully completed......................................
2024-04-15 16:11:57,367:INFO:Initializing predict_model()
2024-04-15 16:11:57,367:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58559F8B0>)
2024-04-15 16:11:57,367:INFO:Checking exceptions
2024-04-15 16:11:57,368:INFO:Preloading libraries
2024-04-15 16:11:57,754:INFO:Initializing finalize_model()
2024-04-15 16:11:57,754:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:11:57,754:INFO:Finalizing LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:11:57,757:INFO:Initializing create_model()
2024-04-15 16:11:57,757:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5982F9280>, estimator=LogisticRegression(C=2.481, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3775, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:11:57,757:INFO:Checking exceptions
2024-04-15 16:11:57,759:INFO:Importing libraries
2024-04-15 16:11:57,759:INFO:Copying training dataset
2024-04-15 16:11:57,759:INFO:Defining folds
2024-04-15 16:11:57,759:INFO:Declaring metric variables
2024-04-15 16:11:57,759:INFO:Importing untrained model
2024-04-15 16:11:57,759:INFO:Declaring custom model
2024-04-15 16:11:57,760:INFO:Logistic Regression Imported successfully
2024-04-15 16:11:57,760:INFO:Cross validation set to False
2024-04-15 16:11:57,760:INFO:Fitting Model
2024-04-15 16:11:57,788:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.481, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3775, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:11:57,788:INFO:create_model() successfully completed......................................
2024-04-15 16:11:58,102:INFO:_master_model_container: 4
2024-04-15 16:11:58,102:INFO:_display_container: 6
2024-04-15 16:11:58,106:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.481, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3775, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:11:58,106:INFO:finalize_model() successfully completed......................................
2024-04-15 16:11:58,419:INFO:Initializing save_model()
2024-04-15 16:11:58,419:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.481, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3775, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:11:58,419:INFO:Adding model into prep_pipe
2024-04-15 16:11:58,419:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:11:58,422:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:11:58,426:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.481, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=3775, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:11:58,426:INFO:save_model() successfully completed......................................
2024-04-15 16:11:58,826:INFO:Initializing load_model()
2024-04-15 16:11:58,826:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:11:58,900:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:12:02,156:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1149097175.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:13:09,274:INFO:PyCaret ClassificationExperiment
2024-04-15 16:13:09,274:INFO:Logging name: clf-default-name
2024-04-15 16:13:09,274:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:13:09,274:INFO:version 3.2.0
2024-04-15 16:13:09,274:INFO:Initializing setup()
2024-04-15 16:13:09,274:INFO:self.USI: 4779
2024-04-15 16:13:09,274:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:13:09,274:INFO:Checking environment
2024-04-15 16:13:09,274:INFO:python_version: 3.8.0
2024-04-15 16:13:09,275:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:13:09,275:INFO:machine: AMD64
2024-04-15 16:13:09,275:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:13:09,282:INFO:Memory: svmem(total=34301427712, available=18359316480, percent=46.5, used=15942111232, free=18359316480)
2024-04-15 16:13:09,282:INFO:Physical Core: 6
2024-04-15 16:13:09,282:INFO:Logical Core: 12
2024-04-15 16:13:09,282:INFO:Checking libraries
2024-04-15 16:13:09,282:INFO:System:
2024-04-15 16:13:09,282:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:13:09,282:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:13:09,282:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:13:09,282:INFO:PyCaret required dependencies:
2024-04-15 16:13:09,282:INFO:                 pip: 19.2.3
2024-04-15 16:13:09,282:INFO:          setuptools: 41.2.0
2024-04-15 16:13:09,282:INFO:             pycaret: 3.2.0
2024-04-15 16:13:09,282:INFO:             IPython: 8.12.3
2024-04-15 16:13:09,282:INFO:          ipywidgets: 8.1.2
2024-04-15 16:13:09,282:INFO:                tqdm: 4.66.2
2024-04-15 16:13:09,282:INFO:               numpy: 1.24.4
2024-04-15 16:13:09,282:INFO:              pandas: 1.5.3
2024-04-15 16:13:09,282:INFO:              jinja2: 3.1.3
2024-04-15 16:13:09,282:INFO:               scipy: 1.10.1
2024-04-15 16:13:09,282:INFO:              joblib: 1.3.2
2024-04-15 16:13:09,282:INFO:             sklearn: 1.2.0
2024-04-15 16:13:09,282:INFO:                pyod: 1.1.3
2024-04-15 16:13:09,282:INFO:            imblearn: 0.12.2
2024-04-15 16:13:09,283:INFO:   category_encoders: 2.6.3
2024-04-15 16:13:09,283:INFO:            lightgbm: 4.3.0
2024-04-15 16:13:09,283:INFO:               numba: 0.58.1
2024-04-15 16:13:09,283:INFO:            requests: 2.31.0
2024-04-15 16:13:09,283:INFO:          matplotlib: 3.6.0
2024-04-15 16:13:09,283:INFO:          scikitplot: 0.3.7
2024-04-15 16:13:09,283:INFO:         yellowbrick: 1.5
2024-04-15 16:13:09,283:INFO:              plotly: 5.20.0
2024-04-15 16:13:09,283:INFO:    plotly-resampler: Not installed
2024-04-15 16:13:09,283:INFO:             kaleido: 0.2.1
2024-04-15 16:13:09,283:INFO:           schemdraw: 0.15
2024-04-15 16:13:09,283:INFO:         statsmodels: 0.14.1
2024-04-15 16:13:09,283:INFO:              sktime: 0.21.1
2024-04-15 16:13:09,283:INFO:               tbats: 1.1.3
2024-04-15 16:13:09,283:INFO:            pmdarima: 2.0.4
2024-04-15 16:13:09,283:INFO:              psutil: 5.9.8
2024-04-15 16:13:09,283:INFO:          markupsafe: 2.1.5
2024-04-15 16:13:09,283:INFO:             pickle5: Not installed
2024-04-15 16:13:09,283:INFO:         cloudpickle: 3.0.0
2024-04-15 16:13:09,283:INFO:         deprecation: 2.1.0
2024-04-15 16:13:09,283:INFO:              xxhash: 3.4.1
2024-04-15 16:13:09,284:INFO:           wurlitzer: Not installed
2024-04-15 16:13:09,284:INFO:PyCaret optional dependencies:
2024-04-15 16:13:09,284:INFO:                shap: Not installed
2024-04-15 16:13:09,284:INFO:           interpret: Not installed
2024-04-15 16:13:09,284:INFO:                umap: Not installed
2024-04-15 16:13:09,284:INFO:     ydata_profiling: Not installed
2024-04-15 16:13:09,284:INFO:  explainerdashboard: Not installed
2024-04-15 16:13:09,284:INFO:             autoviz: Not installed
2024-04-15 16:13:09,284:INFO:           fairlearn: Not installed
2024-04-15 16:13:09,284:INFO:          deepchecks: Not installed
2024-04-15 16:13:09,284:INFO:             xgboost: Not installed
2024-04-15 16:13:09,284:INFO:            catboost: Not installed
2024-04-15 16:13:09,284:INFO:              kmodes: Not installed
2024-04-15 16:13:09,284:INFO:             mlxtend: Not installed
2024-04-15 16:13:09,284:INFO:       statsforecast: Not installed
2024-04-15 16:13:09,284:INFO:        tune_sklearn: Not installed
2024-04-15 16:13:09,284:INFO:                 ray: Not installed
2024-04-15 16:13:09,284:INFO:            hyperopt: Not installed
2024-04-15 16:13:09,284:INFO:              optuna: Not installed
2024-04-15 16:13:09,284:INFO:               skopt: Not installed
2024-04-15 16:13:09,284:INFO:              mlflow: 2.11.3
2024-04-15 16:13:09,284:INFO:              gradio: Not installed
2024-04-15 16:13:09,285:INFO:             fastapi: Not installed
2024-04-15 16:13:09,285:INFO:             uvicorn: Not installed
2024-04-15 16:13:09,285:INFO:              m2cgen: Not installed
2024-04-15 16:13:09,285:INFO:           evidently: Not installed
2024-04-15 16:13:09,285:INFO:               fugue: Not installed
2024-04-15 16:13:09,285:INFO:           streamlit: 1.33.0
2024-04-15 16:13:09,285:INFO:             prophet: Not installed
2024-04-15 16:13:09,285:INFO:None
2024-04-15 16:13:09,285:INFO:Set up data.
2024-04-15 16:13:09,292:INFO:Set up folding strategy.
2024-04-15 16:13:09,292:INFO:Set up train/test split.
2024-04-15 16:13:09,292:INFO:Set up data.
2024-04-15 16:13:09,296:INFO:Set up index.
2024-04-15 16:13:09,297:INFO:Assigning column types.
2024-04-15 16:13:09,300:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:13:09,341:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:13:09,341:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:09,369:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,369:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,414:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:13:09,415:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:09,450:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,450:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,451:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:13:09,495:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:09,521:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,521:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,558:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:09,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,583:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:13:09,646:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,646:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,710:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,711:INFO:Preparing preprocessing pipeline...
2024-04-15 16:13:09,713:INFO:Set up simple imputation.
2024-04-15 16:13:09,713:INFO:Set up feature normalization.
2024-04-15 16:13:09,733:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:13:09,737:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:13:09,737:INFO:Creating final display dataframe.
2024-04-15 16:13:09,813:INFO:Setup _display_container:                     Description             Value
0                    Session id              4288
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              4779
2024-04-15 16:13:09,908:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,908:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,971:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,971:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:09,972:INFO:setup() successfully completed in 0.7s...............
2024-04-15 16:13:09,972:INFO:Initializing compare_models()
2024-04-15 16:13:09,972:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:13:09,972:INFO:Checking exceptions
2024-04-15 16:13:09,976:INFO:Preparing display monitor
2024-04-15 16:13:09,994:INFO:Initializing Logistic Regression
2024-04-15 16:13:09,994:INFO:Total runtime is 0.0 minutes
2024-04-15 16:13:09,996:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:09,997:INFO:Initializing create_model()
2024-04-15 16:13:09,997:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C596D3B040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:09,997:INFO:Checking exceptions
2024-04-15 16:13:09,997:INFO:Importing libraries
2024-04-15 16:13:09,997:INFO:Copying training dataset
2024-04-15 16:13:10,002:INFO:Defining folds
2024-04-15 16:13:10,002:INFO:Declaring metric variables
2024-04-15 16:13:10,005:INFO:Importing untrained model
2024-04-15 16:13:10,009:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:10,016:INFO:Starting cross validation
2024-04-15 16:13:10,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:10,183:INFO:Calculating mean and std
2024-04-15 16:13:10,184:INFO:Creating metrics dataframe
2024-04-15 16:13:10,188:INFO:Uploading results into container
2024-04-15 16:13:10,188:INFO:Uploading model into container now
2024-04-15 16:13:10,189:INFO:_master_model_container: 1
2024-04-15 16:13:10,189:INFO:_display_container: 2
2024-04-15 16:13:10,189:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:10,189:INFO:create_model() successfully completed......................................
2024-04-15 16:13:10,674:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:10,674:INFO:Creating metrics dataframe
2024-04-15 16:13:10,687:INFO:Initializing Decision Tree Classifier
2024-04-15 16:13:10,687:INFO:Total runtime is 0.011552608013153077 minutes
2024-04-15 16:13:10,691:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:10,692:INFO:Initializing create_model()
2024-04-15 16:13:10,692:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C596D3B040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:10,692:INFO:Checking exceptions
2024-04-15 16:13:10,692:INFO:Importing libraries
2024-04-15 16:13:10,692:INFO:Copying training dataset
2024-04-15 16:13:10,698:INFO:Defining folds
2024-04-15 16:13:10,698:INFO:Declaring metric variables
2024-04-15 16:13:10,703:INFO:Importing untrained model
2024-04-15 16:13:10,706:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:13:10,712:INFO:Starting cross validation
2024-04-15 16:13:10,714:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:10,869:INFO:Calculating mean and std
2024-04-15 16:13:10,870:INFO:Creating metrics dataframe
2024-04-15 16:13:10,875:INFO:Uploading results into container
2024-04-15 16:13:10,875:INFO:Uploading model into container now
2024-04-15 16:13:10,876:INFO:_master_model_container: 2
2024-04-15 16:13:10,876:INFO:_display_container: 2
2024-04-15 16:13:10,876:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4288, splitter='best')
2024-04-15 16:13:10,876:INFO:create_model() successfully completed......................................
2024-04-15 16:13:11,215:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:11,215:INFO:Creating metrics dataframe
2024-04-15 16:13:11,231:INFO:Initializing create_model()
2024-04-15 16:13:11,231:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4288, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:11,231:INFO:Checking exceptions
2024-04-15 16:13:11,233:INFO:Importing libraries
2024-04-15 16:13:11,233:INFO:Copying training dataset
2024-04-15 16:13:11,238:INFO:Defining folds
2024-04-15 16:13:11,238:INFO:Declaring metric variables
2024-04-15 16:13:11,238:INFO:Importing untrained model
2024-04-15 16:13:11,238:INFO:Declaring custom model
2024-04-15 16:13:11,238:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:13:11,239:INFO:Cross validation set to False
2024-04-15 16:13:11,240:INFO:Fitting Model
2024-04-15 16:13:11,297:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4288, splitter='best')
2024-04-15 16:13:11,297:INFO:create_model() successfully completed......................................
2024-04-15 16:13:11,696:INFO:Initializing create_model()
2024-04-15 16:13:11,697:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:11,697:INFO:Checking exceptions
2024-04-15 16:13:11,698:INFO:Importing libraries
2024-04-15 16:13:11,699:INFO:Copying training dataset
2024-04-15 16:13:11,704:INFO:Defining folds
2024-04-15 16:13:11,704:INFO:Declaring metric variables
2024-04-15 16:13:11,704:INFO:Importing untrained model
2024-04-15 16:13:11,704:INFO:Declaring custom model
2024-04-15 16:13:11,705:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:11,706:INFO:Cross validation set to False
2024-04-15 16:13:11,706:INFO:Fitting Model
2024-04-15 16:13:11,732:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:11,732:INFO:create_model() successfully completed......................................
2024-04-15 16:13:12,088:INFO:_master_model_container: 2
2024-04-15 16:13:12,089:INFO:_display_container: 2
2024-04-15 16:13:12,089:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4288, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:13:12,090:INFO:compare_models() successfully completed......................................
2024-04-15 16:13:13,075:INFO:Initializing predict_model()
2024-04-15 16:13:13,075:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4288, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C588509940>)
2024-04-15 16:13:13,075:INFO:Checking exceptions
2024-04-15 16:13:13,075:INFO:Preloading libraries
2024-04-15 16:13:14,557:INFO:Initializing predict_model()
2024-04-15 16:13:14,557:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E6748B0>)
2024-04-15 16:13:14,557:INFO:Checking exceptions
2024-04-15 16:13:14,557:INFO:Preloading libraries
2024-04-15 16:13:14,992:INFO:Initializing tune_model()
2024-04-15 16:13:14,992:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>)
2024-04-15 16:13:14,992:INFO:Checking exceptions
2024-04-15 16:13:15,005:INFO:Copying training dataset
2024-04-15 16:13:15,009:INFO:Checking base model
2024-04-15 16:13:15,009:INFO:Base model : Logistic Regression
2024-04-15 16:13:15,012:INFO:Declaring metric variables
2024-04-15 16:13:15,014:INFO:Defining Hyperparameters
2024-04-15 16:13:15,363:INFO:Tuning with n_jobs=-1
2024-04-15 16:13:15,363:INFO:Initializing RandomizedSearchCV
2024-04-15 16:13:15,653:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 2.077}
2024-04-15 16:13:15,653:INFO:Hyperparameter search completed
2024-04-15 16:13:15,654:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:15,654:INFO:Initializing create_model()
2024-04-15 16:13:15,654:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58E222C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 2.077})
2024-04-15 16:13:15,654:INFO:Checking exceptions
2024-04-15 16:13:15,655:INFO:Importing libraries
2024-04-15 16:13:15,655:INFO:Copying training dataset
2024-04-15 16:13:15,675:INFO:Defining folds
2024-04-15 16:13:15,676:INFO:Declaring metric variables
2024-04-15 16:13:15,680:INFO:Importing untrained model
2024-04-15 16:13:15,680:INFO:Declaring custom model
2024-04-15 16:13:15,684:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:15,693:INFO:Starting cross validation
2024-04-15 16:13:15,694:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:15,823:INFO:Calculating mean and std
2024-04-15 16:13:15,824:INFO:Creating metrics dataframe
2024-04-15 16:13:15,828:INFO:Finalizing model
2024-04-15 16:13:15,852:INFO:Uploading results into container
2024-04-15 16:13:15,853:INFO:Uploading model into container now
2024-04-15 16:13:15,853:INFO:_master_model_container: 3
2024-04-15 16:13:15,853:INFO:_display_container: 5
2024-04-15 16:13:15,854:INFO:LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:15,854:INFO:create_model() successfully completed......................................
2024-04-15 16:13:16,178:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:16,178:INFO:choose_better activated
2024-04-15 16:13:16,182:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:16,182:INFO:Initializing create_model()
2024-04-15 16:13:16,183:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:16,183:INFO:Checking exceptions
2024-04-15 16:13:16,184:INFO:Importing libraries
2024-04-15 16:13:16,184:INFO:Copying training dataset
2024-04-15 16:13:16,189:INFO:Defining folds
2024-04-15 16:13:16,189:INFO:Declaring metric variables
2024-04-15 16:13:16,189:INFO:Importing untrained model
2024-04-15 16:13:16,189:INFO:Declaring custom model
2024-04-15 16:13:16,189:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:16,189:INFO:Starting cross validation
2024-04-15 16:13:16,190:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:16,282:INFO:Calculating mean and std
2024-04-15 16:13:16,282:INFO:Creating metrics dataframe
2024-04-15 16:13:16,284:INFO:Finalizing model
2024-04-15 16:13:16,301:INFO:Uploading results into container
2024-04-15 16:13:16,301:INFO:Uploading model into container now
2024-04-15 16:13:16,302:INFO:_master_model_container: 4
2024-04-15 16:13:16,302:INFO:_display_container: 6
2024-04-15 16:13:16,302:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:16,302:INFO:create_model() successfully completed......................................
2024-04-15 16:13:16,623:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:16,624:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:13:16,624:INFO:LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:13:16,624:INFO:LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:13:16,624:INFO:choose_better completed
2024-04-15 16:13:16,632:INFO:_master_model_container: 4
2024-04-15 16:13:16,633:INFO:_display_container: 5
2024-04-15 16:13:16,633:INFO:LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:16,633:INFO:tune_model() successfully completed......................................
2024-04-15 16:13:16,949:INFO:Initializing predict_model()
2024-04-15 16:13:16,949:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597C93790>)
2024-04-15 16:13:16,949:INFO:Checking exceptions
2024-04-15 16:13:16,949:INFO:Preloading libraries
2024-04-15 16:13:17,349:INFO:Initializing finalize_model()
2024-04-15 16:13:17,350:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:13:17,350:INFO:Finalizing LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:17,353:INFO:Initializing create_model()
2024-04-15 16:13:17,353:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D3B640>, estimator=LogisticRegression(C=2.077, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4288, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:17,353:INFO:Checking exceptions
2024-04-15 16:13:17,354:INFO:Importing libraries
2024-04-15 16:13:17,355:INFO:Copying training dataset
2024-04-15 16:13:17,355:INFO:Defining folds
2024-04-15 16:13:17,355:INFO:Declaring metric variables
2024-04-15 16:13:17,355:INFO:Importing untrained model
2024-04-15 16:13:17,355:INFO:Declaring custom model
2024-04-15 16:13:17,356:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:17,356:INFO:Cross validation set to False
2024-04-15 16:13:17,356:INFO:Fitting Model
2024-04-15 16:13:17,382:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.077, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4288, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:13:17,382:INFO:create_model() successfully completed......................................
2024-04-15 16:13:17,697:INFO:_master_model_container: 4
2024-04-15 16:13:17,697:INFO:_display_container: 6
2024-04-15 16:13:17,701:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.077, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4288, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:13:17,701:INFO:finalize_model() successfully completed......................................
2024-04-15 16:13:18,024:INFO:Initializing save_model()
2024-04-15 16:13:18,025:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.077, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4288, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:13:18,025:INFO:Adding model into prep_pipe
2024-04-15 16:13:18,025:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:13:18,028:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:13:18,032:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=2.077, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4288, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:13:18,032:INFO:save_model() successfully completed......................................
2024-04-15 16:13:18,362:INFO:Initializing load_model()
2024-04-15 16:13:18,362:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:13:18,438:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:13:21,580:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3063234028.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:13:31,930:INFO:PyCaret ClassificationExperiment
2024-04-15 16:13:31,931:INFO:Logging name: clf-default-name
2024-04-15 16:13:31,931:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:13:31,931:INFO:version 3.2.0
2024-04-15 16:13:31,931:INFO:Initializing setup()
2024-04-15 16:13:31,931:INFO:self.USI: 1b9f
2024-04-15 16:13:31,931:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:13:31,931:INFO:Checking environment
2024-04-15 16:13:31,931:INFO:python_version: 3.8.0
2024-04-15 16:13:31,931:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:13:31,931:INFO:machine: AMD64
2024-04-15 16:13:31,931:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:13:31,937:INFO:Memory: svmem(total=34301427712, available=18368020480, percent=46.5, used=15933407232, free=18368020480)
2024-04-15 16:13:31,938:INFO:Physical Core: 6
2024-04-15 16:13:31,938:INFO:Logical Core: 12
2024-04-15 16:13:31,938:INFO:Checking libraries
2024-04-15 16:13:31,938:INFO:System:
2024-04-15 16:13:31,938:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:13:31,938:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:13:31,938:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:13:31,938:INFO:PyCaret required dependencies:
2024-04-15 16:13:31,938:INFO:                 pip: 19.2.3
2024-04-15 16:13:31,938:INFO:          setuptools: 41.2.0
2024-04-15 16:13:31,938:INFO:             pycaret: 3.2.0
2024-04-15 16:13:31,938:INFO:             IPython: 8.12.3
2024-04-15 16:13:31,938:INFO:          ipywidgets: 8.1.2
2024-04-15 16:13:31,938:INFO:                tqdm: 4.66.2
2024-04-15 16:13:31,938:INFO:               numpy: 1.24.4
2024-04-15 16:13:31,938:INFO:              pandas: 1.5.3
2024-04-15 16:13:31,938:INFO:              jinja2: 3.1.3
2024-04-15 16:13:31,938:INFO:               scipy: 1.10.1
2024-04-15 16:13:31,938:INFO:              joblib: 1.3.2
2024-04-15 16:13:31,938:INFO:             sklearn: 1.2.0
2024-04-15 16:13:31,938:INFO:                pyod: 1.1.3
2024-04-15 16:13:31,938:INFO:            imblearn: 0.12.2
2024-04-15 16:13:31,938:INFO:   category_encoders: 2.6.3
2024-04-15 16:13:31,938:INFO:            lightgbm: 4.3.0
2024-04-15 16:13:31,938:INFO:               numba: 0.58.1
2024-04-15 16:13:31,938:INFO:            requests: 2.31.0
2024-04-15 16:13:31,938:INFO:          matplotlib: 3.6.0
2024-04-15 16:13:31,938:INFO:          scikitplot: 0.3.7
2024-04-15 16:13:31,938:INFO:         yellowbrick: 1.5
2024-04-15 16:13:31,938:INFO:              plotly: 5.20.0
2024-04-15 16:13:31,938:INFO:    plotly-resampler: Not installed
2024-04-15 16:13:31,939:INFO:             kaleido: 0.2.1
2024-04-15 16:13:31,939:INFO:           schemdraw: 0.15
2024-04-15 16:13:31,939:INFO:         statsmodels: 0.14.1
2024-04-15 16:13:31,939:INFO:              sktime: 0.21.1
2024-04-15 16:13:31,939:INFO:               tbats: 1.1.3
2024-04-15 16:13:31,939:INFO:            pmdarima: 2.0.4
2024-04-15 16:13:31,939:INFO:              psutil: 5.9.8
2024-04-15 16:13:31,939:INFO:          markupsafe: 2.1.5
2024-04-15 16:13:31,939:INFO:             pickle5: Not installed
2024-04-15 16:13:31,939:INFO:         cloudpickle: 3.0.0
2024-04-15 16:13:31,939:INFO:         deprecation: 2.1.0
2024-04-15 16:13:31,939:INFO:              xxhash: 3.4.1
2024-04-15 16:13:31,939:INFO:           wurlitzer: Not installed
2024-04-15 16:13:31,939:INFO:PyCaret optional dependencies:
2024-04-15 16:13:31,939:INFO:                shap: Not installed
2024-04-15 16:13:31,939:INFO:           interpret: Not installed
2024-04-15 16:13:31,939:INFO:                umap: Not installed
2024-04-15 16:13:31,939:INFO:     ydata_profiling: Not installed
2024-04-15 16:13:31,939:INFO:  explainerdashboard: Not installed
2024-04-15 16:13:31,939:INFO:             autoviz: Not installed
2024-04-15 16:13:31,939:INFO:           fairlearn: Not installed
2024-04-15 16:13:31,939:INFO:          deepchecks: Not installed
2024-04-15 16:13:31,939:INFO:             xgboost: Not installed
2024-04-15 16:13:31,939:INFO:            catboost: Not installed
2024-04-15 16:13:31,939:INFO:              kmodes: Not installed
2024-04-15 16:13:31,939:INFO:             mlxtend: Not installed
2024-04-15 16:13:31,939:INFO:       statsforecast: Not installed
2024-04-15 16:13:31,939:INFO:        tune_sklearn: Not installed
2024-04-15 16:13:31,939:INFO:                 ray: Not installed
2024-04-15 16:13:31,939:INFO:            hyperopt: Not installed
2024-04-15 16:13:31,939:INFO:              optuna: Not installed
2024-04-15 16:13:31,939:INFO:               skopt: Not installed
2024-04-15 16:13:31,939:INFO:              mlflow: 2.11.3
2024-04-15 16:13:31,940:INFO:              gradio: Not installed
2024-04-15 16:13:31,940:INFO:             fastapi: Not installed
2024-04-15 16:13:31,940:INFO:             uvicorn: Not installed
2024-04-15 16:13:31,940:INFO:              m2cgen: Not installed
2024-04-15 16:13:31,940:INFO:           evidently: Not installed
2024-04-15 16:13:31,940:INFO:               fugue: Not installed
2024-04-15 16:13:31,940:INFO:           streamlit: 1.33.0
2024-04-15 16:13:31,940:INFO:             prophet: Not installed
2024-04-15 16:13:31,940:INFO:None
2024-04-15 16:13:31,940:INFO:Set up data.
2024-04-15 16:13:31,945:INFO:Set up folding strategy.
2024-04-15 16:13:31,945:INFO:Set up train/test split.
2024-04-15 16:13:31,945:INFO:Set up data.
2024-04-15 16:13:31,950:INFO:Set up index.
2024-04-15 16:13:31,951:INFO:Assigning column types.
2024-04-15 16:13:31,953:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:13:31,993:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:13:31,994:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:32,023:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,023:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,064:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:13:32,065:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:32,089:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,089:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,089:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:13:32,125:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:32,149:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,149:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,187:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:32,210:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,210:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,211:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:13:32,273:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,274:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,338:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,340:INFO:Preparing preprocessing pipeline...
2024-04-15 16:13:32,341:INFO:Set up simple imputation.
2024-04-15 16:13:32,341:INFO:Set up feature normalization.
2024-04-15 16:13:32,361:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:13:32,364:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:13:32,364:INFO:Creating final display dataframe.
2024-04-15 16:13:32,434:INFO:Setup _display_container:                     Description             Value
0                    Session id              4756
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              1b9f
2024-04-15 16:13:32,500:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,563:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,563:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:32,564:INFO:setup() successfully completed in 0.64s...............
2024-04-15 16:13:32,564:INFO:Initializing compare_models()
2024-04-15 16:13:32,564:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:13:32,564:INFO:Checking exceptions
2024-04-15 16:13:32,567:INFO:Preparing display monitor
2024-04-15 16:13:32,585:INFO:Initializing Logistic Regression
2024-04-15 16:13:32,586:INFO:Total runtime is 1.6705195109049478e-05 minutes
2024-04-15 16:13:32,588:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:32,589:INFO:Initializing create_model()
2024-04-15 16:13:32,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5983D89A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:32,589:INFO:Checking exceptions
2024-04-15 16:13:32,589:INFO:Importing libraries
2024-04-15 16:13:32,589:INFO:Copying training dataset
2024-04-15 16:13:32,596:INFO:Defining folds
2024-04-15 16:13:32,596:INFO:Declaring metric variables
2024-04-15 16:13:32,600:INFO:Importing untrained model
2024-04-15 16:13:32,604:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:32,611:INFO:Starting cross validation
2024-04-15 16:13:32,612:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:32,741:INFO:Calculating mean and std
2024-04-15 16:13:32,741:INFO:Creating metrics dataframe
2024-04-15 16:13:32,745:INFO:Uploading results into container
2024-04-15 16:13:32,746:INFO:Uploading model into container now
2024-04-15 16:13:32,746:INFO:_master_model_container: 1
2024-04-15 16:13:32,746:INFO:_display_container: 2
2024-04-15 16:13:32,747:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:32,747:INFO:create_model() successfully completed......................................
2024-04-15 16:13:33,137:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:33,137:INFO:Creating metrics dataframe
2024-04-15 16:13:33,145:INFO:Initializing Decision Tree Classifier
2024-04-15 16:13:33,145:INFO:Total runtime is 0.009335450331370036 minutes
2024-04-15 16:13:33,147:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:33,147:INFO:Initializing create_model()
2024-04-15 16:13:33,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5983D89A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:33,148:INFO:Checking exceptions
2024-04-15 16:13:33,148:INFO:Importing libraries
2024-04-15 16:13:33,148:INFO:Copying training dataset
2024-04-15 16:13:33,152:INFO:Defining folds
2024-04-15 16:13:33,153:INFO:Declaring metric variables
2024-04-15 16:13:33,156:INFO:Importing untrained model
2024-04-15 16:13:33,158:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:13:33,163:INFO:Starting cross validation
2024-04-15 16:13:33,164:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:33,295:INFO:Calculating mean and std
2024-04-15 16:13:33,296:INFO:Creating metrics dataframe
2024-04-15 16:13:33,298:INFO:Uploading results into container
2024-04-15 16:13:33,299:INFO:Uploading model into container now
2024-04-15 16:13:33,299:INFO:_master_model_container: 2
2024-04-15 16:13:33,299:INFO:_display_container: 2
2024-04-15 16:13:33,299:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4756, splitter='best')
2024-04-15 16:13:33,299:INFO:create_model() successfully completed......................................
2024-04-15 16:13:33,616:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:33,616:INFO:Creating metrics dataframe
2024-04-15 16:13:33,631:INFO:Initializing create_model()
2024-04-15 16:13:33,632:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4756, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:33,632:INFO:Checking exceptions
2024-04-15 16:13:33,633:INFO:Importing libraries
2024-04-15 16:13:33,633:INFO:Copying training dataset
2024-04-15 16:13:33,637:INFO:Defining folds
2024-04-15 16:13:33,638:INFO:Declaring metric variables
2024-04-15 16:13:33,638:INFO:Importing untrained model
2024-04-15 16:13:33,638:INFO:Declaring custom model
2024-04-15 16:13:33,638:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:13:33,639:INFO:Cross validation set to False
2024-04-15 16:13:33,639:INFO:Fitting Model
2024-04-15 16:13:33,692:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4756, splitter='best')
2024-04-15 16:13:33,693:INFO:create_model() successfully completed......................................
2024-04-15 16:13:34,007:INFO:Initializing create_model()
2024-04-15 16:13:34,007:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:34,008:INFO:Checking exceptions
2024-04-15 16:13:34,010:INFO:Importing libraries
2024-04-15 16:13:34,010:INFO:Copying training dataset
2024-04-15 16:13:34,013:INFO:Defining folds
2024-04-15 16:13:34,013:INFO:Declaring metric variables
2024-04-15 16:13:34,014:INFO:Importing untrained model
2024-04-15 16:13:34,014:INFO:Declaring custom model
2024-04-15 16:13:34,014:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:34,015:INFO:Cross validation set to False
2024-04-15 16:13:34,015:INFO:Fitting Model
2024-04-15 16:13:34,032:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:34,032:INFO:create_model() successfully completed......................................
2024-04-15 16:13:34,397:INFO:_master_model_container: 2
2024-04-15 16:13:34,397:INFO:_display_container: 2
2024-04-15 16:13:34,397:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4756, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:13:34,398:INFO:compare_models() successfully completed......................................
2024-04-15 16:13:35,359:INFO:Initializing predict_model()
2024-04-15 16:13:35,359:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4756, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596D9F430>)
2024-04-15 16:13:35,359:INFO:Checking exceptions
2024-04-15 16:13:35,360:INFO:Preloading libraries
2024-04-15 16:13:36,330:INFO:Initializing predict_model()
2024-04-15 16:13:36,330:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597EEDDC0>)
2024-04-15 16:13:36,330:INFO:Checking exceptions
2024-04-15 16:13:36,330:INFO:Preloading libraries
2024-04-15 16:13:36,723:INFO:Initializing tune_model()
2024-04-15 16:13:36,723:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>)
2024-04-15 16:13:36,724:INFO:Checking exceptions
2024-04-15 16:13:36,736:INFO:Copying training dataset
2024-04-15 16:13:36,741:INFO:Checking base model
2024-04-15 16:13:36,741:INFO:Base model : Logistic Regression
2024-04-15 16:13:36,744:INFO:Declaring metric variables
2024-04-15 16:13:36,747:INFO:Defining Hyperparameters
2024-04-15 16:13:37,081:INFO:Tuning with n_jobs=-1
2024-04-15 16:13:37,081:INFO:Initializing RandomizedSearchCV
2024-04-15 16:13:37,422:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 1.145}
2024-04-15 16:13:37,422:INFO:Hyperparameter search completed
2024-04-15 16:13:37,422:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:37,424:INFO:Initializing create_model()
2024-04-15 16:13:37,424:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58DEFDFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 1.145})
2024-04-15 16:13:37,424:INFO:Checking exceptions
2024-04-15 16:13:37,424:INFO:Importing libraries
2024-04-15 16:13:37,424:INFO:Copying training dataset
2024-04-15 16:13:37,433:INFO:Defining folds
2024-04-15 16:13:37,433:INFO:Declaring metric variables
2024-04-15 16:13:37,438:INFO:Importing untrained model
2024-04-15 16:13:37,438:INFO:Declaring custom model
2024-04-15 16:13:37,442:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:37,447:INFO:Starting cross validation
2024-04-15 16:13:37,448:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:37,561:INFO:Calculating mean and std
2024-04-15 16:13:37,562:INFO:Creating metrics dataframe
2024-04-15 16:13:37,566:INFO:Finalizing model
2024-04-15 16:13:37,590:INFO:Uploading results into container
2024-04-15 16:13:37,591:INFO:Uploading model into container now
2024-04-15 16:13:37,591:INFO:_master_model_container: 3
2024-04-15 16:13:37,591:INFO:_display_container: 5
2024-04-15 16:13:37,591:INFO:LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:37,592:INFO:create_model() successfully completed......................................
2024-04-15 16:13:37,919:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:37,919:INFO:choose_better activated
2024-04-15 16:13:37,923:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:37,924:INFO:Initializing create_model()
2024-04-15 16:13:37,924:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:37,924:INFO:Checking exceptions
2024-04-15 16:13:37,925:INFO:Importing libraries
2024-04-15 16:13:37,925:INFO:Copying training dataset
2024-04-15 16:13:37,929:INFO:Defining folds
2024-04-15 16:13:37,929:INFO:Declaring metric variables
2024-04-15 16:13:37,929:INFO:Importing untrained model
2024-04-15 16:13:37,930:INFO:Declaring custom model
2024-04-15 16:13:37,930:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:37,930:INFO:Starting cross validation
2024-04-15 16:13:37,931:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:38,019:INFO:Calculating mean and std
2024-04-15 16:13:38,020:INFO:Creating metrics dataframe
2024-04-15 16:13:38,021:INFO:Finalizing model
2024-04-15 16:13:38,041:INFO:Uploading results into container
2024-04-15 16:13:38,041:INFO:Uploading model into container now
2024-04-15 16:13:38,042:INFO:_master_model_container: 4
2024-04-15 16:13:38,042:INFO:_display_container: 6
2024-04-15 16:13:38,042:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:38,042:INFO:create_model() successfully completed......................................
2024-04-15 16:13:38,366:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:38,366:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:13:38,367:INFO:LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:13:38,367:INFO:LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:13:38,367:INFO:choose_better completed
2024-04-15 16:13:38,375:INFO:_master_model_container: 4
2024-04-15 16:13:38,375:INFO:_display_container: 5
2024-04-15 16:13:38,375:INFO:LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:38,375:INFO:tune_model() successfully completed......................................
2024-04-15 16:13:38,696:INFO:Initializing predict_model()
2024-04-15 16:13:38,696:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C59036BF70>)
2024-04-15 16:13:38,696:INFO:Checking exceptions
2024-04-15 16:13:38,696:INFO:Preloading libraries
2024-04-15 16:13:39,109:INFO:Initializing finalize_model()
2024-04-15 16:13:39,109:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:13:39,110:INFO:Finalizing LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:39,112:INFO:Initializing create_model()
2024-04-15 16:13:39,112:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58BC16070>, estimator=LogisticRegression(C=1.145, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4756, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:39,112:INFO:Checking exceptions
2024-04-15 16:13:39,113:INFO:Importing libraries
2024-04-15 16:13:39,113:INFO:Copying training dataset
2024-04-15 16:13:39,114:INFO:Defining folds
2024-04-15 16:13:39,114:INFO:Declaring metric variables
2024-04-15 16:13:39,114:INFO:Importing untrained model
2024-04-15 16:13:39,114:INFO:Declaring custom model
2024-04-15 16:13:39,114:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:39,115:INFO:Cross validation set to False
2024-04-15 16:13:39,115:INFO:Fitting Model
2024-04-15 16:13:39,140:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.145, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4756, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:13:39,140:INFO:create_model() successfully completed......................................
2024-04-15 16:13:39,543:INFO:_master_model_container: 4
2024-04-15 16:13:39,543:INFO:_display_container: 6
2024-04-15 16:13:39,547:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.145, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4756, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:13:39,547:INFO:finalize_model() successfully completed......................................
2024-04-15 16:13:39,878:INFO:Initializing save_model()
2024-04-15 16:13:39,878:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.145, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4756, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:13:39,878:INFO:Adding model into prep_pipe
2024-04-15 16:13:39,878:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:13:39,881:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:13:39,885:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.145, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=4756, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:13:39,885:INFO:save_model() successfully completed......................................
2024-04-15 16:13:40,227:INFO:Initializing load_model()
2024-04-15 16:13:40,228:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:13:40,335:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:13:43,515:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1041493373.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:13:57,885:INFO:PyCaret ClassificationExperiment
2024-04-15 16:13:57,886:INFO:Logging name: clf-default-name
2024-04-15 16:13:57,886:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:13:57,886:INFO:version 3.2.0
2024-04-15 16:13:57,886:INFO:Initializing setup()
2024-04-15 16:13:57,886:INFO:self.USI: 4395
2024-04-15 16:13:57,886:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:13:57,886:INFO:Checking environment
2024-04-15 16:13:57,886:INFO:python_version: 3.8.0
2024-04-15 16:13:57,886:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:13:57,886:INFO:machine: AMD64
2024-04-15 16:13:57,886:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:13:57,894:INFO:Memory: svmem(total=34301427712, available=18312019968, percent=46.6, used=15989407744, free=18312019968)
2024-04-15 16:13:57,894:INFO:Physical Core: 6
2024-04-15 16:13:57,895:INFO:Logical Core: 12
2024-04-15 16:13:57,895:INFO:Checking libraries
2024-04-15 16:13:57,895:INFO:System:
2024-04-15 16:13:57,895:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:13:57,895:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:13:57,895:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:13:57,895:INFO:PyCaret required dependencies:
2024-04-15 16:13:57,895:INFO:                 pip: 19.2.3
2024-04-15 16:13:57,895:INFO:          setuptools: 41.2.0
2024-04-15 16:13:57,895:INFO:             pycaret: 3.2.0
2024-04-15 16:13:57,895:INFO:             IPython: 8.12.3
2024-04-15 16:13:57,895:INFO:          ipywidgets: 8.1.2
2024-04-15 16:13:57,895:INFO:                tqdm: 4.66.2
2024-04-15 16:13:57,895:INFO:               numpy: 1.24.4
2024-04-15 16:13:57,895:INFO:              pandas: 1.5.3
2024-04-15 16:13:57,895:INFO:              jinja2: 3.1.3
2024-04-15 16:13:57,895:INFO:               scipy: 1.10.1
2024-04-15 16:13:57,895:INFO:              joblib: 1.3.2
2024-04-15 16:13:57,895:INFO:             sklearn: 1.2.0
2024-04-15 16:13:57,895:INFO:                pyod: 1.1.3
2024-04-15 16:13:57,895:INFO:            imblearn: 0.12.2
2024-04-15 16:13:57,895:INFO:   category_encoders: 2.6.3
2024-04-15 16:13:57,895:INFO:            lightgbm: 4.3.0
2024-04-15 16:13:57,895:INFO:               numba: 0.58.1
2024-04-15 16:13:57,895:INFO:            requests: 2.31.0
2024-04-15 16:13:57,895:INFO:          matplotlib: 3.6.0
2024-04-15 16:13:57,895:INFO:          scikitplot: 0.3.7
2024-04-15 16:13:57,895:INFO:         yellowbrick: 1.5
2024-04-15 16:13:57,895:INFO:              plotly: 5.20.0
2024-04-15 16:13:57,896:INFO:    plotly-resampler: Not installed
2024-04-15 16:13:57,896:INFO:             kaleido: 0.2.1
2024-04-15 16:13:57,896:INFO:           schemdraw: 0.15
2024-04-15 16:13:57,896:INFO:         statsmodels: 0.14.1
2024-04-15 16:13:57,896:INFO:              sktime: 0.21.1
2024-04-15 16:13:57,896:INFO:               tbats: 1.1.3
2024-04-15 16:13:57,896:INFO:            pmdarima: 2.0.4
2024-04-15 16:13:57,896:INFO:              psutil: 5.9.8
2024-04-15 16:13:57,896:INFO:          markupsafe: 2.1.5
2024-04-15 16:13:57,896:INFO:             pickle5: Not installed
2024-04-15 16:13:57,896:INFO:         cloudpickle: 3.0.0
2024-04-15 16:13:57,896:INFO:         deprecation: 2.1.0
2024-04-15 16:13:57,896:INFO:              xxhash: 3.4.1
2024-04-15 16:13:57,896:INFO:           wurlitzer: Not installed
2024-04-15 16:13:57,896:INFO:PyCaret optional dependencies:
2024-04-15 16:13:57,896:INFO:                shap: Not installed
2024-04-15 16:13:57,896:INFO:           interpret: Not installed
2024-04-15 16:13:57,896:INFO:                umap: Not installed
2024-04-15 16:13:57,896:INFO:     ydata_profiling: Not installed
2024-04-15 16:13:57,896:INFO:  explainerdashboard: Not installed
2024-04-15 16:13:57,896:INFO:             autoviz: Not installed
2024-04-15 16:13:57,897:INFO:           fairlearn: Not installed
2024-04-15 16:13:57,897:INFO:          deepchecks: Not installed
2024-04-15 16:13:57,897:INFO:             xgboost: Not installed
2024-04-15 16:13:57,897:INFO:            catboost: Not installed
2024-04-15 16:13:57,897:INFO:              kmodes: Not installed
2024-04-15 16:13:57,897:INFO:             mlxtend: Not installed
2024-04-15 16:13:57,897:INFO:       statsforecast: Not installed
2024-04-15 16:13:57,897:INFO:        tune_sklearn: Not installed
2024-04-15 16:13:57,897:INFO:                 ray: Not installed
2024-04-15 16:13:57,897:INFO:            hyperopt: Not installed
2024-04-15 16:13:57,897:INFO:              optuna: Not installed
2024-04-15 16:13:57,897:INFO:               skopt: Not installed
2024-04-15 16:13:57,897:INFO:              mlflow: 2.11.3
2024-04-15 16:13:57,897:INFO:              gradio: Not installed
2024-04-15 16:13:57,897:INFO:             fastapi: Not installed
2024-04-15 16:13:57,897:INFO:             uvicorn: Not installed
2024-04-15 16:13:57,897:INFO:              m2cgen: Not installed
2024-04-15 16:13:57,897:INFO:           evidently: Not installed
2024-04-15 16:13:57,897:INFO:               fugue: Not installed
2024-04-15 16:13:57,897:INFO:           streamlit: 1.33.0
2024-04-15 16:13:57,897:INFO:             prophet: Not installed
2024-04-15 16:13:57,897:INFO:None
2024-04-15 16:13:57,898:INFO:Set up data.
2024-04-15 16:13:57,903:INFO:Set up folding strategy.
2024-04-15 16:13:57,903:INFO:Set up train/test split.
2024-04-15 16:13:57,903:INFO:Set up data.
2024-04-15 16:13:57,908:INFO:Set up index.
2024-04-15 16:13:57,908:INFO:Assigning column types.
2024-04-15 16:13:57,911:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:13:57,952:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:13:57,953:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:57,981:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:57,981:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,022:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:13:58,024:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:58,048:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,049:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,049:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:13:58,085:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:58,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,152:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:13:58,175:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,175:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,175:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:13:58,238:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,303:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,303:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,305:INFO:Preparing preprocessing pipeline...
2024-04-15 16:13:58,306:INFO:Set up simple imputation.
2024-04-15 16:13:58,306:INFO:Set up feature normalization.
2024-04-15 16:13:58,328:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:13:58,332:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:13:58,332:INFO:Creating final display dataframe.
2024-04-15 16:13:58,397:INFO:Setup _display_container:                     Description             Value
0                    Session id              2491
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              4395
2024-04-15 16:13:58,472:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,472:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,536:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,536:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:13:58,537:INFO:setup() successfully completed in 0.65s...............
2024-04-15 16:13:58,537:INFO:Initializing compare_models()
2024-04-15 16:13:58,537:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:13:58,537:INFO:Checking exceptions
2024-04-15 16:13:58,541:INFO:Preparing display monitor
2024-04-15 16:13:58,558:INFO:Initializing Logistic Regression
2024-04-15 16:13:58,559:INFO:Total runtime is 1.6673405965169272e-05 minutes
2024-04-15 16:13:58,561:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:58,561:INFO:Initializing create_model()
2024-04-15 16:13:58,561:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597D93BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:58,562:INFO:Checking exceptions
2024-04-15 16:13:58,562:INFO:Importing libraries
2024-04-15 16:13:58,562:INFO:Copying training dataset
2024-04-15 16:13:58,567:INFO:Defining folds
2024-04-15 16:13:58,568:INFO:Declaring metric variables
2024-04-15 16:13:58,571:INFO:Importing untrained model
2024-04-15 16:13:58,574:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:58,580:INFO:Starting cross validation
2024-04-15 16:13:58,582:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:58,688:INFO:Calculating mean and std
2024-04-15 16:13:58,689:INFO:Creating metrics dataframe
2024-04-15 16:13:58,692:INFO:Uploading results into container
2024-04-15 16:13:58,692:INFO:Uploading model into container now
2024-04-15 16:13:58,693:INFO:_master_model_container: 1
2024-04-15 16:13:58,693:INFO:_display_container: 2
2024-04-15 16:13:58,693:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:58,693:INFO:create_model() successfully completed......................................
2024-04-15 16:13:59,040:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:59,040:INFO:Creating metrics dataframe
2024-04-15 16:13:59,047:INFO:Initializing Decision Tree Classifier
2024-04-15 16:13:59,047:INFO:Total runtime is 0.008151837189992269 minutes
2024-04-15 16:13:59,050:INFO:SubProcess create_model() called ==================================
2024-04-15 16:13:59,050:INFO:Initializing create_model()
2024-04-15 16:13:59,050:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597D93BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:59,050:INFO:Checking exceptions
2024-04-15 16:13:59,050:INFO:Importing libraries
2024-04-15 16:13:59,050:INFO:Copying training dataset
2024-04-15 16:13:59,055:INFO:Defining folds
2024-04-15 16:13:59,055:INFO:Declaring metric variables
2024-04-15 16:13:59,059:INFO:Importing untrained model
2024-04-15 16:13:59,061:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:13:59,066:INFO:Starting cross validation
2024-04-15 16:13:59,067:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:13:59,208:INFO:Calculating mean and std
2024-04-15 16:13:59,208:INFO:Creating metrics dataframe
2024-04-15 16:13:59,212:INFO:Uploading results into container
2024-04-15 16:13:59,212:INFO:Uploading model into container now
2024-04-15 16:13:59,213:INFO:_master_model_container: 2
2024-04-15 16:13:59,213:INFO:_display_container: 2
2024-04-15 16:13:59,213:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2491, splitter='best')
2024-04-15 16:13:59,213:INFO:create_model() successfully completed......................................
2024-04-15 16:13:59,556:INFO:SubProcess create_model() end ==================================
2024-04-15 16:13:59,556:INFO:Creating metrics dataframe
2024-04-15 16:13:59,572:INFO:Initializing create_model()
2024-04-15 16:13:59,572:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2491, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:59,572:INFO:Checking exceptions
2024-04-15 16:13:59,574:INFO:Importing libraries
2024-04-15 16:13:59,574:INFO:Copying training dataset
2024-04-15 16:13:59,579:INFO:Defining folds
2024-04-15 16:13:59,579:INFO:Declaring metric variables
2024-04-15 16:13:59,580:INFO:Importing untrained model
2024-04-15 16:13:59,580:INFO:Declaring custom model
2024-04-15 16:13:59,580:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:13:59,581:INFO:Cross validation set to False
2024-04-15 16:13:59,581:INFO:Fitting Model
2024-04-15 16:13:59,636:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2491, splitter='best')
2024-04-15 16:13:59,636:INFO:create_model() successfully completed......................................
2024-04-15 16:13:59,954:INFO:Initializing create_model()
2024-04-15 16:13:59,954:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:13:59,954:INFO:Checking exceptions
2024-04-15 16:13:59,956:INFO:Importing libraries
2024-04-15 16:13:59,957:INFO:Copying training dataset
2024-04-15 16:13:59,962:INFO:Defining folds
2024-04-15 16:13:59,962:INFO:Declaring metric variables
2024-04-15 16:13:59,962:INFO:Importing untrained model
2024-04-15 16:13:59,962:INFO:Declaring custom model
2024-04-15 16:13:59,963:INFO:Logistic Regression Imported successfully
2024-04-15 16:13:59,964:INFO:Cross validation set to False
2024-04-15 16:13:59,964:INFO:Fitting Model
2024-04-15 16:13:59,981:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:13:59,981:INFO:create_model() successfully completed......................................
2024-04-15 16:14:00,346:INFO:_master_model_container: 2
2024-04-15 16:14:00,346:INFO:_display_container: 2
2024-04-15 16:14:00,347:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2491, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:14:00,347:INFO:compare_models() successfully completed......................................
2024-04-15 16:14:01,257:INFO:Initializing predict_model()
2024-04-15 16:14:01,257:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=2491, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C59048D310>)
2024-04-15 16:14:01,257:INFO:Checking exceptions
2024-04-15 16:14:01,257:INFO:Preloading libraries
2024-04-15 16:14:02,356:INFO:Initializing predict_model()
2024-04-15 16:14:02,356:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597BFC5E0>)
2024-04-15 16:14:02,357:INFO:Checking exceptions
2024-04-15 16:14:02,357:INFO:Preloading libraries
2024-04-15 16:14:02,770:INFO:Initializing tune_model()
2024-04-15 16:14:02,770:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>)
2024-04-15 16:14:02,770:INFO:Checking exceptions
2024-04-15 16:14:02,784:INFO:Copying training dataset
2024-04-15 16:14:02,789:INFO:Checking base model
2024-04-15 16:14:02,789:INFO:Base model : Logistic Regression
2024-04-15 16:14:02,793:INFO:Declaring metric variables
2024-04-15 16:14:02,797:INFO:Defining Hyperparameters
2024-04-15 16:14:03,130:INFO:Tuning with n_jobs=-1
2024-04-15 16:14:03,130:INFO:Initializing RandomizedSearchCV
2024-04-15 16:14:03,390:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.817}
2024-04-15 16:14:03,390:INFO:Hyperparameter search completed
2024-04-15 16:14:03,390:INFO:SubProcess create_model() called ==================================
2024-04-15 16:14:03,391:INFO:Initializing create_model()
2024-04-15 16:14:03,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C591FF8AC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.817})
2024-04-15 16:14:03,391:INFO:Checking exceptions
2024-04-15 16:14:03,391:INFO:Importing libraries
2024-04-15 16:14:03,391:INFO:Copying training dataset
2024-04-15 16:14:03,396:INFO:Defining folds
2024-04-15 16:14:03,396:INFO:Declaring metric variables
2024-04-15 16:14:03,400:INFO:Importing untrained model
2024-04-15 16:14:03,400:INFO:Declaring custom model
2024-04-15 16:14:03,404:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:03,409:INFO:Starting cross validation
2024-04-15 16:14:03,410:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:14:03,517:INFO:Calculating mean and std
2024-04-15 16:14:03,518:INFO:Creating metrics dataframe
2024-04-15 16:14:03,522:INFO:Finalizing model
2024-04-15 16:14:03,546:INFO:Uploading results into container
2024-04-15 16:14:03,546:INFO:Uploading model into container now
2024-04-15 16:14:03,547:INFO:_master_model_container: 3
2024-04-15 16:14:03,547:INFO:_display_container: 5
2024-04-15 16:14:03,547:INFO:LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:03,548:INFO:create_model() successfully completed......................................
2024-04-15 16:14:03,861:INFO:SubProcess create_model() end ==================================
2024-04-15 16:14:03,861:INFO:choose_better activated
2024-04-15 16:14:03,864:INFO:SubProcess create_model() called ==================================
2024-04-15 16:14:03,865:INFO:Initializing create_model()
2024-04-15 16:14:03,865:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:03,865:INFO:Checking exceptions
2024-04-15 16:14:03,867:INFO:Importing libraries
2024-04-15 16:14:03,867:INFO:Copying training dataset
2024-04-15 16:14:03,871:INFO:Defining folds
2024-04-15 16:14:03,871:INFO:Declaring metric variables
2024-04-15 16:14:03,871:INFO:Importing untrained model
2024-04-15 16:14:03,871:INFO:Declaring custom model
2024-04-15 16:14:03,871:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:03,872:INFO:Starting cross validation
2024-04-15 16:14:03,872:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:14:03,963:INFO:Calculating mean and std
2024-04-15 16:14:03,964:INFO:Creating metrics dataframe
2024-04-15 16:14:03,966:INFO:Finalizing model
2024-04-15 16:14:03,983:INFO:Uploading results into container
2024-04-15 16:14:03,983:INFO:Uploading model into container now
2024-04-15 16:14:03,984:INFO:_master_model_container: 4
2024-04-15 16:14:03,984:INFO:_display_container: 6
2024-04-15 16:14:03,984:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:03,984:INFO:create_model() successfully completed......................................
2024-04-15 16:14:04,298:INFO:SubProcess create_model() end ==================================
2024-04-15 16:14:04,299:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:14:04,299:INFO:LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:14:04,300:INFO:LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:14:04,300:INFO:choose_better completed
2024-04-15 16:14:04,308:INFO:_master_model_container: 4
2024-04-15 16:14:04,308:INFO:_display_container: 5
2024-04-15 16:14:04,309:INFO:LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:04,309:INFO:tune_model() successfully completed......................................
2024-04-15 16:14:04,627:INFO:Initializing predict_model()
2024-04-15 16:14:04,627:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597C93820>)
2024-04-15 16:14:04,627:INFO:Checking exceptions
2024-04-15 16:14:04,627:INFO:Preloading libraries
2024-04-15 16:14:05,044:INFO:Initializing finalize_model()
2024-04-15 16:14:05,044:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:14:05,044:INFO:Finalizing LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:05,047:INFO:Initializing create_model()
2024-04-15 16:14:05,047:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59828DC70>, estimator=LogisticRegression(C=0.817, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2491, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:05,047:INFO:Checking exceptions
2024-04-15 16:14:05,049:INFO:Importing libraries
2024-04-15 16:14:05,049:INFO:Copying training dataset
2024-04-15 16:14:05,049:INFO:Defining folds
2024-04-15 16:14:05,049:INFO:Declaring metric variables
2024-04-15 16:14:05,049:INFO:Importing untrained model
2024-04-15 16:14:05,049:INFO:Declaring custom model
2024-04-15 16:14:05,050:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:05,051:INFO:Cross validation set to False
2024-04-15 16:14:05,051:INFO:Fitting Model
2024-04-15 16:14:05,078:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=0.817, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=2491, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:14:05,078:INFO:create_model() successfully completed......................................
2024-04-15 16:14:05,449:INFO:_master_model_container: 4
2024-04-15 16:14:05,449:INFO:_display_container: 6
2024-04-15 16:14:05,453:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=0.817, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=2491, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:14:05,453:INFO:finalize_model() successfully completed......................................
2024-04-15 16:14:05,916:INFO:Initializing save_model()
2024-04-15 16:14:05,916:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=0.817, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=2491, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:14:05,917:INFO:Adding model into prep_pipe
2024-04-15 16:14:05,917:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:14:05,920:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:14:05,925:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=0.817, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=2491, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:14:05,925:INFO:save_model() successfully completed......................................
2024-04-15 16:14:06,313:INFO:Initializing load_model()
2024-04-15 16:14:06,313:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:14:06,384:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:14:09,390:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1784328058.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:14:37,302:INFO:PyCaret ClassificationExperiment
2024-04-15 16:14:37,302:INFO:Logging name: clf-default-name
2024-04-15 16:14:37,302:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:14:37,303:INFO:version 3.2.0
2024-04-15 16:14:37,303:INFO:Initializing setup()
2024-04-15 16:14:37,303:INFO:self.USI: f5e3
2024-04-15 16:14:37,303:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:14:37,303:INFO:Checking environment
2024-04-15 16:14:37,303:INFO:python_version: 3.8.0
2024-04-15 16:14:37,303:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:14:37,303:INFO:machine: AMD64
2024-04-15 16:14:37,303:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:14:37,312:INFO:Memory: svmem(total=34301427712, available=18298400768, percent=46.7, used=16003026944, free=18298400768)
2024-04-15 16:14:37,313:INFO:Physical Core: 6
2024-04-15 16:14:37,313:INFO:Logical Core: 12
2024-04-15 16:14:37,313:INFO:Checking libraries
2024-04-15 16:14:37,313:INFO:System:
2024-04-15 16:14:37,313:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:14:37,313:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:14:37,313:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:14:37,313:INFO:PyCaret required dependencies:
2024-04-15 16:14:37,313:INFO:                 pip: 19.2.3
2024-04-15 16:14:37,313:INFO:          setuptools: 41.2.0
2024-04-15 16:14:37,313:INFO:             pycaret: 3.2.0
2024-04-15 16:14:37,313:INFO:             IPython: 8.12.3
2024-04-15 16:14:37,313:INFO:          ipywidgets: 8.1.2
2024-04-15 16:14:37,314:INFO:                tqdm: 4.66.2
2024-04-15 16:14:37,314:INFO:               numpy: 1.24.4
2024-04-15 16:14:37,314:INFO:              pandas: 1.5.3
2024-04-15 16:14:37,314:INFO:              jinja2: 3.1.3
2024-04-15 16:14:37,314:INFO:               scipy: 1.10.1
2024-04-15 16:14:37,314:INFO:              joblib: 1.3.2
2024-04-15 16:14:37,314:INFO:             sklearn: 1.2.0
2024-04-15 16:14:37,314:INFO:                pyod: 1.1.3
2024-04-15 16:14:37,314:INFO:            imblearn: 0.12.2
2024-04-15 16:14:37,314:INFO:   category_encoders: 2.6.3
2024-04-15 16:14:37,314:INFO:            lightgbm: 4.3.0
2024-04-15 16:14:37,314:INFO:               numba: 0.58.1
2024-04-15 16:14:37,314:INFO:            requests: 2.31.0
2024-04-15 16:14:37,314:INFO:          matplotlib: 3.6.0
2024-04-15 16:14:37,314:INFO:          scikitplot: 0.3.7
2024-04-15 16:14:37,314:INFO:         yellowbrick: 1.5
2024-04-15 16:14:37,314:INFO:              plotly: 5.20.0
2024-04-15 16:14:37,314:INFO:    plotly-resampler: Not installed
2024-04-15 16:14:37,314:INFO:             kaleido: 0.2.1
2024-04-15 16:14:37,314:INFO:           schemdraw: 0.15
2024-04-15 16:14:37,314:INFO:         statsmodels: 0.14.1
2024-04-15 16:14:37,314:INFO:              sktime: 0.21.1
2024-04-15 16:14:37,314:INFO:               tbats: 1.1.3
2024-04-15 16:14:37,314:INFO:            pmdarima: 2.0.4
2024-04-15 16:14:37,314:INFO:              psutil: 5.9.8
2024-04-15 16:14:37,314:INFO:          markupsafe: 2.1.5
2024-04-15 16:14:37,314:INFO:             pickle5: Not installed
2024-04-15 16:14:37,314:INFO:         cloudpickle: 3.0.0
2024-04-15 16:14:37,314:INFO:         deprecation: 2.1.0
2024-04-15 16:14:37,314:INFO:              xxhash: 3.4.1
2024-04-15 16:14:37,314:INFO:           wurlitzer: Not installed
2024-04-15 16:14:37,314:INFO:PyCaret optional dependencies:
2024-04-15 16:14:37,314:INFO:                shap: Not installed
2024-04-15 16:14:37,314:INFO:           interpret: Not installed
2024-04-15 16:14:37,314:INFO:                umap: Not installed
2024-04-15 16:14:37,315:INFO:     ydata_profiling: Not installed
2024-04-15 16:14:37,315:INFO:  explainerdashboard: Not installed
2024-04-15 16:14:37,315:INFO:             autoviz: Not installed
2024-04-15 16:14:37,315:INFO:           fairlearn: Not installed
2024-04-15 16:14:37,315:INFO:          deepchecks: Not installed
2024-04-15 16:14:37,315:INFO:             xgboost: Not installed
2024-04-15 16:14:37,315:INFO:            catboost: Not installed
2024-04-15 16:14:37,315:INFO:              kmodes: Not installed
2024-04-15 16:14:37,315:INFO:             mlxtend: Not installed
2024-04-15 16:14:37,315:INFO:       statsforecast: Not installed
2024-04-15 16:14:37,315:INFO:        tune_sklearn: Not installed
2024-04-15 16:14:37,315:INFO:                 ray: Not installed
2024-04-15 16:14:37,315:INFO:            hyperopt: Not installed
2024-04-15 16:14:37,315:INFO:              optuna: Not installed
2024-04-15 16:14:37,315:INFO:               skopt: Not installed
2024-04-15 16:14:37,315:INFO:              mlflow: 2.11.3
2024-04-15 16:14:37,315:INFO:              gradio: Not installed
2024-04-15 16:14:37,315:INFO:             fastapi: Not installed
2024-04-15 16:14:37,315:INFO:             uvicorn: Not installed
2024-04-15 16:14:37,315:INFO:              m2cgen: Not installed
2024-04-15 16:14:37,315:INFO:           evidently: Not installed
2024-04-15 16:14:37,315:INFO:               fugue: Not installed
2024-04-15 16:14:37,315:INFO:           streamlit: 1.33.0
2024-04-15 16:14:37,315:INFO:             prophet: Not installed
2024-04-15 16:14:37,315:INFO:None
2024-04-15 16:14:37,315:INFO:Set up data.
2024-04-15 16:14:37,322:INFO:Set up folding strategy.
2024-04-15 16:14:37,322:INFO:Set up train/test split.
2024-04-15 16:14:37,323:INFO:Set up data.
2024-04-15 16:14:37,328:INFO:Set up index.
2024-04-15 16:14:37,329:INFO:Assigning column types.
2024-04-15 16:14:37,332:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:14:37,379:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:14:37,380:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:14:37,406:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,406:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,443:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:14:37,444:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:14:37,466:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,467:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,467:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:14:37,508:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:14:37,533:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,534:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,573:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:14:37,596:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,596:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,597:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:14:37,660:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,660:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,722:INFO:Preparing preprocessing pipeline...
2024-04-15 16:14:37,723:INFO:Set up simple imputation.
2024-04-15 16:14:37,723:INFO:Set up feature normalization.
2024-04-15 16:14:37,741:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:14:37,744:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:14:37,744:INFO:Creating final display dataframe.
2024-04-15 16:14:37,810:INFO:Setup _display_container:                     Description             Value
0                    Session id              7215
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              f5e3
2024-04-15 16:14:37,898:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,898:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,967:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,967:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:14:37,968:INFO:setup() successfully completed in 0.67s...............
2024-04-15 16:14:37,968:INFO:Initializing compare_models()
2024-04-15 16:14:37,968:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:14:37,968:INFO:Checking exceptions
2024-04-15 16:14:37,973:INFO:Preparing display monitor
2024-04-15 16:14:37,989:INFO:Initializing Logistic Regression
2024-04-15 16:14:37,990:INFO:Total runtime is 1.668532689412435e-05 minutes
2024-04-15 16:14:37,992:INFO:SubProcess create_model() called ==================================
2024-04-15 16:14:37,993:INFO:Initializing create_model()
2024-04-15 16:14:37,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C599652250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:37,993:INFO:Checking exceptions
2024-04-15 16:14:37,993:INFO:Importing libraries
2024-04-15 16:14:37,993:INFO:Copying training dataset
2024-04-15 16:14:37,998:INFO:Defining folds
2024-04-15 16:14:37,998:INFO:Declaring metric variables
2024-04-15 16:14:38,003:INFO:Importing untrained model
2024-04-15 16:14:38,005:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:38,011:INFO:Starting cross validation
2024-04-15 16:14:38,012:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:14:38,125:INFO:Calculating mean and std
2024-04-15 16:14:38,126:INFO:Creating metrics dataframe
2024-04-15 16:14:38,131:INFO:Uploading results into container
2024-04-15 16:14:38,131:INFO:Uploading model into container now
2024-04-15 16:14:38,132:INFO:_master_model_container: 1
2024-04-15 16:14:38,132:INFO:_display_container: 2
2024-04-15 16:14:38,132:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:38,132:INFO:create_model() successfully completed......................................
2024-04-15 16:14:38,565:INFO:SubProcess create_model() end ==================================
2024-04-15 16:14:38,566:INFO:Creating metrics dataframe
2024-04-15 16:14:38,573:INFO:Initializing Decision Tree Classifier
2024-04-15 16:14:38,573:INFO:Total runtime is 0.009735536575317382 minutes
2024-04-15 16:14:38,576:INFO:SubProcess create_model() called ==================================
2024-04-15 16:14:38,576:INFO:Initializing create_model()
2024-04-15 16:14:38,576:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C599652250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:38,576:INFO:Checking exceptions
2024-04-15 16:14:38,576:INFO:Importing libraries
2024-04-15 16:14:38,576:INFO:Copying training dataset
2024-04-15 16:14:38,580:INFO:Defining folds
2024-04-15 16:14:38,581:INFO:Declaring metric variables
2024-04-15 16:14:38,584:INFO:Importing untrained model
2024-04-15 16:14:38,586:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:14:38,591:INFO:Starting cross validation
2024-04-15 16:14:38,592:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:14:38,728:INFO:Calculating mean and std
2024-04-15 16:14:38,728:INFO:Creating metrics dataframe
2024-04-15 16:14:38,731:INFO:Uploading results into container
2024-04-15 16:14:38,731:INFO:Uploading model into container now
2024-04-15 16:14:38,732:INFO:_master_model_container: 2
2024-04-15 16:14:38,732:INFO:_display_container: 2
2024-04-15 16:14:38,732:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7215, splitter='best')
2024-04-15 16:14:38,732:INFO:create_model() successfully completed......................................
2024-04-15 16:14:39,052:INFO:SubProcess create_model() end ==================================
2024-04-15 16:14:39,053:INFO:Creating metrics dataframe
2024-04-15 16:14:39,067:INFO:Initializing create_model()
2024-04-15 16:14:39,067:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7215, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:39,068:INFO:Checking exceptions
2024-04-15 16:14:39,069:INFO:Importing libraries
2024-04-15 16:14:39,069:INFO:Copying training dataset
2024-04-15 16:14:39,074:INFO:Defining folds
2024-04-15 16:14:39,074:INFO:Declaring metric variables
2024-04-15 16:14:39,074:INFO:Importing untrained model
2024-04-15 16:14:39,074:INFO:Declaring custom model
2024-04-15 16:14:39,075:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:14:39,075:INFO:Cross validation set to False
2024-04-15 16:14:39,075:INFO:Fitting Model
2024-04-15 16:14:39,134:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7215, splitter='best')
2024-04-15 16:14:39,134:INFO:create_model() successfully completed......................................
2024-04-15 16:14:39,452:INFO:Initializing create_model()
2024-04-15 16:14:39,452:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:39,453:INFO:Checking exceptions
2024-04-15 16:14:39,454:INFO:Importing libraries
2024-04-15 16:14:39,454:INFO:Copying training dataset
2024-04-15 16:14:39,458:INFO:Defining folds
2024-04-15 16:14:39,458:INFO:Declaring metric variables
2024-04-15 16:14:39,459:INFO:Importing untrained model
2024-04-15 16:14:39,459:INFO:Declaring custom model
2024-04-15 16:14:39,459:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:39,459:INFO:Cross validation set to False
2024-04-15 16:14:39,460:INFO:Fitting Model
2024-04-15 16:14:39,477:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:39,477:INFO:create_model() successfully completed......................................
2024-04-15 16:14:39,806:INFO:_master_model_container: 2
2024-04-15 16:14:39,806:INFO:_display_container: 2
2024-04-15 16:14:39,807:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7215, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:14:39,807:INFO:compare_models() successfully completed......................................
2024-04-15 16:14:40,805:INFO:Initializing predict_model()
2024-04-15 16:14:40,805:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7215, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591E77AF0>)
2024-04-15 16:14:40,805:INFO:Checking exceptions
2024-04-15 16:14:40,805:INFO:Preloading libraries
2024-04-15 16:14:42,030:INFO:Initializing predict_model()
2024-04-15 16:14:42,031:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591E77940>)
2024-04-15 16:14:42,031:INFO:Checking exceptions
2024-04-15 16:14:42,031:INFO:Preloading libraries
2024-04-15 16:14:42,472:INFO:Initializing tune_model()
2024-04-15 16:14:42,472:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>)
2024-04-15 16:14:42,472:INFO:Checking exceptions
2024-04-15 16:14:42,485:INFO:Copying training dataset
2024-04-15 16:14:42,490:INFO:Checking base model
2024-04-15 16:14:42,490:INFO:Base model : Logistic Regression
2024-04-15 16:14:42,493:INFO:Declaring metric variables
2024-04-15 16:14:42,495:INFO:Defining Hyperparameters
2024-04-15 16:14:42,828:INFO:Tuning with n_jobs=-1
2024-04-15 16:14:42,829:INFO:Initializing RandomizedSearchCV
2024-04-15 16:14:43,144:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 6.846}
2024-04-15 16:14:43,144:INFO:Hyperparameter search completed
2024-04-15 16:14:43,144:INFO:SubProcess create_model() called ==================================
2024-04-15 16:14:43,144:INFO:Initializing create_model()
2024-04-15 16:14:43,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58DEFDFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 6.846})
2024-04-15 16:14:43,144:INFO:Checking exceptions
2024-04-15 16:14:43,144:INFO:Importing libraries
2024-04-15 16:14:43,145:INFO:Copying training dataset
2024-04-15 16:14:43,150:INFO:Defining folds
2024-04-15 16:14:43,150:INFO:Declaring metric variables
2024-04-15 16:14:43,154:INFO:Importing untrained model
2024-04-15 16:14:43,154:INFO:Declaring custom model
2024-04-15 16:14:43,158:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:43,163:INFO:Starting cross validation
2024-04-15 16:14:43,163:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:14:43,267:INFO:Calculating mean and std
2024-04-15 16:14:43,267:INFO:Creating metrics dataframe
2024-04-15 16:14:43,272:INFO:Finalizing model
2024-04-15 16:14:43,296:INFO:Uploading results into container
2024-04-15 16:14:43,297:INFO:Uploading model into container now
2024-04-15 16:14:43,298:INFO:_master_model_container: 3
2024-04-15 16:14:43,298:INFO:_display_container: 5
2024-04-15 16:14:43,298:INFO:LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:43,298:INFO:create_model() successfully completed......................................
2024-04-15 16:14:43,642:INFO:SubProcess create_model() end ==================================
2024-04-15 16:14:43,642:INFO:choose_better activated
2024-04-15 16:14:43,646:INFO:SubProcess create_model() called ==================================
2024-04-15 16:14:43,647:INFO:Initializing create_model()
2024-04-15 16:14:43,647:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:43,647:INFO:Checking exceptions
2024-04-15 16:14:43,648:INFO:Importing libraries
2024-04-15 16:14:43,649:INFO:Copying training dataset
2024-04-15 16:14:43,653:INFO:Defining folds
2024-04-15 16:14:43,653:INFO:Declaring metric variables
2024-04-15 16:14:43,653:INFO:Importing untrained model
2024-04-15 16:14:43,653:INFO:Declaring custom model
2024-04-15 16:14:43,653:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:43,653:INFO:Starting cross validation
2024-04-15 16:14:43,654:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:14:43,760:INFO:Calculating mean and std
2024-04-15 16:14:43,761:INFO:Creating metrics dataframe
2024-04-15 16:14:43,763:INFO:Finalizing model
2024-04-15 16:14:43,781:INFO:Uploading results into container
2024-04-15 16:14:43,782:INFO:Uploading model into container now
2024-04-15 16:14:43,782:INFO:_master_model_container: 4
2024-04-15 16:14:43,782:INFO:_display_container: 6
2024-04-15 16:14:43,783:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:43,783:INFO:create_model() successfully completed......................................
2024-04-15 16:14:44,116:INFO:SubProcess create_model() end ==================================
2024-04-15 16:14:44,116:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:14:44,117:INFO:LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:14:44,117:INFO:LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:14:44,117:INFO:choose_better completed
2024-04-15 16:14:44,125:INFO:_master_model_container: 4
2024-04-15 16:14:44,125:INFO:_display_container: 5
2024-04-15 16:14:44,126:INFO:LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:44,126:INFO:tune_model() successfully completed......................................
2024-04-15 16:14:44,483:INFO:Initializing predict_model()
2024-04-15 16:14:44,483:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58559F8B0>)
2024-04-15 16:14:44,483:INFO:Checking exceptions
2024-04-15 16:14:44,483:INFO:Preloading libraries
2024-04-15 16:14:44,919:INFO:Initializing finalize_model()
2024-04-15 16:14:44,919:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:14:44,920:INFO:Finalizing LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:14:44,922:INFO:Initializing create_model()
2024-04-15 16:14:44,923:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CDFB80>, estimator=LogisticRegression(C=6.846, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7215, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:14:44,923:INFO:Checking exceptions
2024-04-15 16:14:44,924:INFO:Importing libraries
2024-04-15 16:14:44,924:INFO:Copying training dataset
2024-04-15 16:14:44,924:INFO:Defining folds
2024-04-15 16:14:44,924:INFO:Declaring metric variables
2024-04-15 16:14:44,924:INFO:Importing untrained model
2024-04-15 16:14:44,924:INFO:Declaring custom model
2024-04-15 16:14:44,925:INFO:Logistic Regression Imported successfully
2024-04-15 16:14:44,926:INFO:Cross validation set to False
2024-04-15 16:14:44,926:INFO:Fitting Model
2024-04-15 16:14:44,951:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.846, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=7215, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:14:44,951:INFO:create_model() successfully completed......................................
2024-04-15 16:14:45,289:INFO:_master_model_container: 4
2024-04-15 16:14:45,289:INFO:_display_container: 6
2024-04-15 16:14:45,293:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.846, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=7215, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:14:45,293:INFO:finalize_model() successfully completed......................................
2024-04-15 16:14:45,672:INFO:Initializing save_model()
2024-04-15 16:14:45,672:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.846, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=7215, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:14:45,673:INFO:Adding model into prep_pipe
2024-04-15 16:14:45,673:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:14:45,676:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:14:45,681:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=6.846, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=7215, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:14:45,681:INFO:save_model() successfully completed......................................
2024-04-15 16:14:46,040:INFO:Initializing load_model()
2024-04-15 16:14:46,040:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:14:46,111:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:14:49,426:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\850259990.py:67: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:18:33,575:INFO:PyCaret ClassificationExperiment
2024-04-15 16:18:33,575:INFO:Logging name: clf-default-name
2024-04-15 16:18:33,575:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:18:33,575:INFO:version 3.2.0
2024-04-15 16:18:33,575:INFO:Initializing setup()
2024-04-15 16:18:33,575:INFO:self.USI: bf1d
2024-04-15 16:18:33,576:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:18:33,576:INFO:Checking environment
2024-04-15 16:18:33,576:INFO:python_version: 3.8.0
2024-04-15 16:18:33,576:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:18:33,576:INFO:machine: AMD64
2024-04-15 16:18:33,576:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:18:33,583:INFO:Memory: svmem(total=34301427712, available=18163523584, percent=47.0, used=16137904128, free=18163523584)
2024-04-15 16:18:33,583:INFO:Physical Core: 6
2024-04-15 16:18:33,583:INFO:Logical Core: 12
2024-04-15 16:18:33,583:INFO:Checking libraries
2024-04-15 16:18:33,583:INFO:System:
2024-04-15 16:18:33,584:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:18:33,584:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:18:33,584:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:18:33,584:INFO:PyCaret required dependencies:
2024-04-15 16:18:33,584:INFO:                 pip: 19.2.3
2024-04-15 16:18:33,584:INFO:          setuptools: 41.2.0
2024-04-15 16:18:33,584:INFO:             pycaret: 3.2.0
2024-04-15 16:18:33,584:INFO:             IPython: 8.12.3
2024-04-15 16:18:33,584:INFO:          ipywidgets: 8.1.2
2024-04-15 16:18:33,584:INFO:                tqdm: 4.66.2
2024-04-15 16:18:33,584:INFO:               numpy: 1.24.4
2024-04-15 16:18:33,584:INFO:              pandas: 1.5.3
2024-04-15 16:18:33,584:INFO:              jinja2: 3.1.3
2024-04-15 16:18:33,584:INFO:               scipy: 1.10.1
2024-04-15 16:18:33,584:INFO:              joblib: 1.3.2
2024-04-15 16:18:33,584:INFO:             sklearn: 1.2.0
2024-04-15 16:18:33,584:INFO:                pyod: 1.1.3
2024-04-15 16:18:33,584:INFO:            imblearn: 0.12.2
2024-04-15 16:18:33,584:INFO:   category_encoders: 2.6.3
2024-04-15 16:18:33,584:INFO:            lightgbm: 4.3.0
2024-04-15 16:18:33,584:INFO:               numba: 0.58.1
2024-04-15 16:18:33,584:INFO:            requests: 2.31.0
2024-04-15 16:18:33,585:INFO:          matplotlib: 3.6.0
2024-04-15 16:18:33,585:INFO:          scikitplot: 0.3.7
2024-04-15 16:18:33,585:INFO:         yellowbrick: 1.5
2024-04-15 16:18:33,585:INFO:              plotly: 5.20.0
2024-04-15 16:18:33,585:INFO:    plotly-resampler: Not installed
2024-04-15 16:18:33,585:INFO:             kaleido: 0.2.1
2024-04-15 16:18:33,585:INFO:           schemdraw: 0.15
2024-04-15 16:18:33,585:INFO:         statsmodels: 0.14.1
2024-04-15 16:18:33,585:INFO:              sktime: 0.21.1
2024-04-15 16:18:33,585:INFO:               tbats: 1.1.3
2024-04-15 16:18:33,585:INFO:            pmdarima: 2.0.4
2024-04-15 16:18:33,585:INFO:              psutil: 5.9.8
2024-04-15 16:18:33,585:INFO:          markupsafe: 2.1.5
2024-04-15 16:18:33,585:INFO:             pickle5: Not installed
2024-04-15 16:18:33,585:INFO:         cloudpickle: 3.0.0
2024-04-15 16:18:33,585:INFO:         deprecation: 2.1.0
2024-04-15 16:18:33,585:INFO:              xxhash: 3.4.1
2024-04-15 16:18:33,585:INFO:           wurlitzer: Not installed
2024-04-15 16:18:33,585:INFO:PyCaret optional dependencies:
2024-04-15 16:18:33,585:INFO:                shap: Not installed
2024-04-15 16:18:33,586:INFO:           interpret: Not installed
2024-04-15 16:18:33,586:INFO:                umap: Not installed
2024-04-15 16:18:33,586:INFO:     ydata_profiling: Not installed
2024-04-15 16:18:33,586:INFO:  explainerdashboard: Not installed
2024-04-15 16:18:33,586:INFO:             autoviz: Not installed
2024-04-15 16:18:33,586:INFO:           fairlearn: Not installed
2024-04-15 16:18:33,586:INFO:          deepchecks: Not installed
2024-04-15 16:18:33,586:INFO:             xgboost: Not installed
2024-04-15 16:18:33,586:INFO:            catboost: Not installed
2024-04-15 16:18:33,586:INFO:              kmodes: Not installed
2024-04-15 16:18:33,586:INFO:             mlxtend: Not installed
2024-04-15 16:18:33,586:INFO:       statsforecast: Not installed
2024-04-15 16:18:33,586:INFO:        tune_sklearn: Not installed
2024-04-15 16:18:33,586:INFO:                 ray: Not installed
2024-04-15 16:18:33,586:INFO:            hyperopt: Not installed
2024-04-15 16:18:33,586:INFO:              optuna: Not installed
2024-04-15 16:18:33,586:INFO:               skopt: Not installed
2024-04-15 16:18:33,586:INFO:              mlflow: 2.11.3
2024-04-15 16:18:33,586:INFO:              gradio: Not installed
2024-04-15 16:18:33,586:INFO:             fastapi: Not installed
2024-04-15 16:18:33,586:INFO:             uvicorn: Not installed
2024-04-15 16:18:33,586:INFO:              m2cgen: Not installed
2024-04-15 16:18:33,587:INFO:           evidently: Not installed
2024-04-15 16:18:33,587:INFO:               fugue: Not installed
2024-04-15 16:18:33,587:INFO:           streamlit: 1.33.0
2024-04-15 16:18:33,587:INFO:             prophet: Not installed
2024-04-15 16:18:33,587:INFO:None
2024-04-15 16:18:33,587:INFO:Set up data.
2024-04-15 16:18:33,592:INFO:Set up folding strategy.
2024-04-15 16:18:33,593:INFO:Set up train/test split.
2024-04-15 16:18:33,593:INFO:Set up data.
2024-04-15 16:18:33,597:INFO:Set up index.
2024-04-15 16:18:33,597:INFO:Assigning column types.
2024-04-15 16:18:33,600:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:18:33,636:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:18:33,637:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:18:33,660:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,660:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,698:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:18:33,699:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:18:33,723:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,723:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,723:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:18:33,759:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:18:33,783:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,784:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,822:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:18:33,844:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,845:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:18:33,905:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,905:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:33,969:INFO:Preparing preprocessing pipeline...
2024-04-15 16:18:33,971:INFO:Set up simple imputation.
2024-04-15 16:18:33,971:INFO:Set up feature normalization.
2024-04-15 16:18:33,988:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:18:33,991:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:18:33,991:INFO:Creating final display dataframe.
2024-04-15 16:18:34,055:INFO:Setup _display_container:                     Description             Value
0                    Session id              8291
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              bf1d
2024-04-15 16:18:34,129:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:34,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:34,195:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:34,195:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:18:34,196:INFO:setup() successfully completed in 0.62s...............
2024-04-15 16:18:34,197:INFO:Initializing compare_models()
2024-04-15 16:18:34,197:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:18:34,197:INFO:Checking exceptions
2024-04-15 16:18:34,201:INFO:Preparing display monitor
2024-04-15 16:18:34,220:INFO:Initializing Logistic Regression
2024-04-15 16:18:34,220:INFO:Total runtime is 0.0 minutes
2024-04-15 16:18:34,222:INFO:SubProcess create_model() called ==================================
2024-04-15 16:18:34,222:INFO:Initializing create_model()
2024-04-15 16:18:34,223:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5856A2070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:18:34,223:INFO:Checking exceptions
2024-04-15 16:18:34,223:INFO:Importing libraries
2024-04-15 16:18:34,223:INFO:Copying training dataset
2024-04-15 16:18:34,229:INFO:Defining folds
2024-04-15 16:18:34,230:INFO:Declaring metric variables
2024-04-15 16:18:34,234:INFO:Importing untrained model
2024-04-15 16:18:34,237:INFO:Logistic Regression Imported successfully
2024-04-15 16:18:34,243:INFO:Starting cross validation
2024-04-15 16:18:34,244:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:18:34,399:INFO:Calculating mean and std
2024-04-15 16:18:34,400:INFO:Creating metrics dataframe
2024-04-15 16:18:34,406:INFO:Uploading results into container
2024-04-15 16:18:34,408:INFO:Uploading model into container now
2024-04-15 16:18:34,409:INFO:_master_model_container: 1
2024-04-15 16:18:34,409:INFO:_display_container: 2
2024-04-15 16:18:34,409:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:18:34,409:INFO:create_model() successfully completed......................................
2024-04-15 16:18:34,784:INFO:SubProcess create_model() end ==================================
2024-04-15 16:18:34,784:INFO:Creating metrics dataframe
2024-04-15 16:18:34,792:INFO:Initializing Decision Tree Classifier
2024-04-15 16:18:34,792:INFO:Total runtime is 0.009518814086914063 minutes
2024-04-15 16:18:34,794:INFO:SubProcess create_model() called ==================================
2024-04-15 16:18:34,794:INFO:Initializing create_model()
2024-04-15 16:18:34,794:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5856A2070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:18:34,795:INFO:Checking exceptions
2024-04-15 16:18:34,795:INFO:Importing libraries
2024-04-15 16:18:34,795:INFO:Copying training dataset
2024-04-15 16:18:34,801:INFO:Defining folds
2024-04-15 16:18:34,801:INFO:Declaring metric variables
2024-04-15 16:18:34,804:INFO:Importing untrained model
2024-04-15 16:18:34,807:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:18:34,812:INFO:Starting cross validation
2024-04-15 16:18:34,813:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:18:34,955:INFO:Calculating mean and std
2024-04-15 16:18:34,956:INFO:Creating metrics dataframe
2024-04-15 16:18:34,960:INFO:Uploading results into container
2024-04-15 16:18:34,961:INFO:Uploading model into container now
2024-04-15 16:18:34,961:INFO:_master_model_container: 2
2024-04-15 16:18:34,961:INFO:_display_container: 2
2024-04-15 16:18:34,961:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8291, splitter='best')
2024-04-15 16:18:34,961:INFO:create_model() successfully completed......................................
2024-04-15 16:18:35,290:INFO:SubProcess create_model() end ==================================
2024-04-15 16:18:35,290:INFO:Creating metrics dataframe
2024-04-15 16:18:35,305:INFO:Initializing create_model()
2024-04-15 16:18:35,305:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8291, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:18:35,306:INFO:Checking exceptions
2024-04-15 16:18:35,307:INFO:Importing libraries
2024-04-15 16:18:35,307:INFO:Copying training dataset
2024-04-15 16:18:35,312:INFO:Defining folds
2024-04-15 16:18:35,312:INFO:Declaring metric variables
2024-04-15 16:18:35,312:INFO:Importing untrained model
2024-04-15 16:18:35,312:INFO:Declaring custom model
2024-04-15 16:18:35,313:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:18:35,313:INFO:Cross validation set to False
2024-04-15 16:18:35,313:INFO:Fitting Model
2024-04-15 16:18:35,378:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8291, splitter='best')
2024-04-15 16:18:35,379:INFO:create_model() successfully completed......................................
2024-04-15 16:18:35,727:INFO:Initializing create_model()
2024-04-15 16:18:35,727:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:18:35,727:INFO:Checking exceptions
2024-04-15 16:18:35,729:INFO:Importing libraries
2024-04-15 16:18:35,729:INFO:Copying training dataset
2024-04-15 16:18:35,733:INFO:Defining folds
2024-04-15 16:18:35,733:INFO:Declaring metric variables
2024-04-15 16:18:35,733:INFO:Importing untrained model
2024-04-15 16:18:35,733:INFO:Declaring custom model
2024-04-15 16:18:35,734:INFO:Logistic Regression Imported successfully
2024-04-15 16:18:35,734:INFO:Cross validation set to False
2024-04-15 16:18:35,734:INFO:Fitting Model
2024-04-15 16:18:35,751:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:18:35,751:INFO:create_model() successfully completed......................................
2024-04-15 16:18:36,095:INFO:_master_model_container: 2
2024-04-15 16:18:36,096:INFO:_display_container: 2
2024-04-15 16:18:36,096:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8291, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:18:36,096:INFO:compare_models() successfully completed......................................
2024-04-15 16:18:37,094:INFO:Initializing predict_model()
2024-04-15 16:18:37,094:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8291, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590614700>)
2024-04-15 16:18:37,095:INFO:Checking exceptions
2024-04-15 16:18:37,095:INFO:Preloading libraries
2024-04-15 16:18:38,385:INFO:Initializing predict_model()
2024-04-15 16:18:38,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597C5EEE0>)
2024-04-15 16:18:38,386:INFO:Checking exceptions
2024-04-15 16:18:38,386:INFO:Preloading libraries
2024-04-15 16:18:38,826:INFO:Initializing tune_model()
2024-04-15 16:18:38,826:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=4, custom_grid=None, optimize=f1, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>)
2024-04-15 16:18:38,826:INFO:Checking exceptions
2024-04-15 16:18:38,840:INFO:Copying training dataset
2024-04-15 16:18:38,843:INFO:Checking base model
2024-04-15 16:18:38,844:INFO:Base model : Logistic Regression
2024-04-15 16:18:38,847:INFO:Declaring metric variables
2024-04-15 16:18:38,849:INFO:Defining Hyperparameters
2024-04-15 16:18:39,272:INFO:Tuning with n_jobs=-1
2024-04-15 16:18:39,272:INFO:Initializing RandomizedSearchCV
2024-04-15 16:18:39,526:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 9.482}
2024-04-15 16:18:39,526:INFO:Hyperparameter search completed
2024-04-15 16:18:39,526:INFO:SubProcess create_model() called ==================================
2024-04-15 16:18:39,527:INFO:Initializing create_model()
2024-04-15 16:18:39,527:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5856A2070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 9.482})
2024-04-15 16:18:39,527:INFO:Checking exceptions
2024-04-15 16:18:39,527:INFO:Importing libraries
2024-04-15 16:18:39,527:INFO:Copying training dataset
2024-04-15 16:18:39,531:INFO:Defining folds
2024-04-15 16:18:39,532:INFO:Declaring metric variables
2024-04-15 16:18:39,534:INFO:Importing untrained model
2024-04-15 16:18:39,535:INFO:Declaring custom model
2024-04-15 16:18:39,537:INFO:Logistic Regression Imported successfully
2024-04-15 16:18:39,542:INFO:Starting cross validation
2024-04-15 16:18:39,543:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:18:39,651:INFO:Calculating mean and std
2024-04-15 16:18:39,651:INFO:Creating metrics dataframe
2024-04-15 16:18:39,656:INFO:Finalizing model
2024-04-15 16:18:39,680:INFO:Uploading results into container
2024-04-15 16:18:39,681:INFO:Uploading model into container now
2024-04-15 16:18:39,682:INFO:_master_model_container: 3
2024-04-15 16:18:39,682:INFO:_display_container: 5
2024-04-15 16:18:39,683:INFO:LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:18:39,683:INFO:create_model() successfully completed......................................
2024-04-15 16:18:40,020:INFO:SubProcess create_model() end ==================================
2024-04-15 16:18:40,020:INFO:choose_better activated
2024-04-15 16:18:40,023:INFO:SubProcess create_model() called ==================================
2024-04-15 16:18:40,024:INFO:Initializing create_model()
2024-04-15 16:18:40,024:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:18:40,024:INFO:Checking exceptions
2024-04-15 16:18:40,026:INFO:Importing libraries
2024-04-15 16:18:40,026:INFO:Copying training dataset
2024-04-15 16:18:40,033:INFO:Defining folds
2024-04-15 16:18:40,033:INFO:Declaring metric variables
2024-04-15 16:18:40,033:INFO:Importing untrained model
2024-04-15 16:18:40,033:INFO:Declaring custom model
2024-04-15 16:18:40,034:INFO:Logistic Regression Imported successfully
2024-04-15 16:18:40,034:INFO:Starting cross validation
2024-04-15 16:18:40,035:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:18:40,146:INFO:Calculating mean and std
2024-04-15 16:18:40,147:INFO:Creating metrics dataframe
2024-04-15 16:18:40,149:INFO:Finalizing model
2024-04-15 16:18:40,182:INFO:Uploading results into container
2024-04-15 16:18:40,182:INFO:Uploading model into container now
2024-04-15 16:18:40,183:INFO:_master_model_container: 4
2024-04-15 16:18:40,183:INFO:_display_container: 6
2024-04-15 16:18:40,184:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:18:40,184:INFO:create_model() successfully completed......................................
2024-04-15 16:18:40,675:INFO:SubProcess create_model() end ==================================
2024-04-15 16:18:40,676:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5221
2024-04-15 16:18:40,677:INFO:LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for F1 is 0.5476
2024-04-15 16:18:40,678:INFO:LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-04-15 16:18:40,678:INFO:choose_better completed
2024-04-15 16:18:40,688:INFO:_master_model_container: 4
2024-04-15 16:18:40,688:INFO:_display_container: 5
2024-04-15 16:18:40,689:INFO:LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:18:40,689:INFO:tune_model() successfully completed......................................
2024-04-15 16:18:41,070:INFO:Initializing predict_model()
2024-04-15 16:18:41,070:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58559F8B0>)
2024-04-15 16:18:41,070:INFO:Checking exceptions
2024-04-15 16:18:41,070:INFO:Preloading libraries
2024-04-15 16:18:41,480:INFO:Initializing finalize_model()
2024-04-15 16:18:41,480:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-04-15 16:18:41,480:INFO:Finalizing LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:18:41,484:INFO:Initializing create_model()
2024-04-15 16:18:41,484:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C598284BB0>, estimator=LogisticRegression(C=9.482, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8291, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:18:41,484:INFO:Checking exceptions
2024-04-15 16:18:41,485:INFO:Importing libraries
2024-04-15 16:18:41,485:INFO:Copying training dataset
2024-04-15 16:18:41,485:INFO:Defining folds
2024-04-15 16:18:41,485:INFO:Declaring metric variables
2024-04-15 16:18:41,486:INFO:Importing untrained model
2024-04-15 16:18:41,486:INFO:Declaring custom model
2024-04-15 16:18:41,486:INFO:Logistic Regression Imported successfully
2024-04-15 16:18:41,487:INFO:Cross validation set to False
2024-04-15 16:18:41,487:INFO:Fitting Model
2024-04-15 16:18:41,515:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=9.482, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=8291, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:18:41,515:INFO:create_model() successfully completed......................................
2024-04-15 16:18:41,852:INFO:_master_model_container: 4
2024-04-15 16:18:41,852:INFO:_display_container: 6
2024-04-15 16:18:41,855:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=9.482, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=8291, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:18:41,855:INFO:finalize_model() successfully completed......................................
2024-04-15 16:18:42,310:INFO:Initializing save_model()
2024-04-15 16:18:42,310:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=9.482, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=8291, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False), model_name=./model_kobe, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-04-15 16:18:42,310:INFO:Adding model into prep_pipe
2024-04-15 16:18:42,310:WARNING:Only Model saved as it was a pipeline.
2024-04-15 16:18:42,313:INFO:./model_kobe.pkl saved in current working directory
2024-04-15 16:18:42,318:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imp...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=9.482, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2',
                                    random_state=8291, solver='lbfgs',
                                    tol=0.0001, verbose=0, warm_start=False))],
         verbose=False)
2024-04-15 16:18:42,318:INFO:save_model() successfully completed......................................
2024-04-15 16:18:42,641:INFO:Initializing load_model()
2024-04-15 16:18:42,641:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 16:18:42,713:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 16:18:46,127:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\2693121346.py:71: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 16:46:22,683:INFO:PyCaret ClassificationExperiment
2024-04-15 16:46:22,683:INFO:Logging name: clf-default-name
2024-04-15 16:46:22,683:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:46:22,684:INFO:version 3.2.0
2024-04-15 16:46:22,684:INFO:Initializing setup()
2024-04-15 16:46:22,684:INFO:self.USI: 1b91
2024-04-15 16:46:22,684:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:46:22,684:INFO:Checking environment
2024-04-15 16:46:22,684:INFO:python_version: 3.8.0
2024-04-15 16:46:22,684:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:46:22,684:INFO:machine: AMD64
2024-04-15 16:46:22,684:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:46:22,692:INFO:Memory: svmem(total=34301427712, available=19372482560, percent=43.5, used=14928945152, free=19372482560)
2024-04-15 16:46:22,692:INFO:Physical Core: 6
2024-04-15 16:46:22,692:INFO:Logical Core: 12
2024-04-15 16:46:22,692:INFO:Checking libraries
2024-04-15 16:46:22,692:INFO:System:
2024-04-15 16:46:22,692:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:46:22,692:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:46:22,692:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:46:22,692:INFO:PyCaret required dependencies:
2024-04-15 16:46:22,692:INFO:                 pip: 19.2.3
2024-04-15 16:46:22,692:INFO:          setuptools: 41.2.0
2024-04-15 16:46:22,692:INFO:             pycaret: 3.2.0
2024-04-15 16:46:22,693:INFO:             IPython: 8.12.3
2024-04-15 16:46:22,693:INFO:          ipywidgets: 8.1.2
2024-04-15 16:46:22,693:INFO:                tqdm: 4.66.2
2024-04-15 16:46:22,693:INFO:               numpy: 1.24.4
2024-04-15 16:46:22,693:INFO:              pandas: 1.5.3
2024-04-15 16:46:22,693:INFO:              jinja2: 3.1.3
2024-04-15 16:46:22,693:INFO:               scipy: 1.10.1
2024-04-15 16:46:22,693:INFO:              joblib: 1.3.2
2024-04-15 16:46:22,693:INFO:             sklearn: 1.2.0
2024-04-15 16:46:22,693:INFO:                pyod: 1.1.3
2024-04-15 16:46:22,693:INFO:            imblearn: 0.12.2
2024-04-15 16:46:22,693:INFO:   category_encoders: 2.6.3
2024-04-15 16:46:22,693:INFO:            lightgbm: 4.3.0
2024-04-15 16:46:22,693:INFO:               numba: 0.58.1
2024-04-15 16:46:22,693:INFO:            requests: 2.31.0
2024-04-15 16:46:22,693:INFO:          matplotlib: 3.6.0
2024-04-15 16:46:22,693:INFO:          scikitplot: 0.3.7
2024-04-15 16:46:22,693:INFO:         yellowbrick: 1.5
2024-04-15 16:46:22,693:INFO:              plotly: 5.20.0
2024-04-15 16:46:22,693:INFO:    plotly-resampler: Not installed
2024-04-15 16:46:22,693:INFO:             kaleido: 0.2.1
2024-04-15 16:46:22,693:INFO:           schemdraw: 0.15
2024-04-15 16:46:22,693:INFO:         statsmodels: 0.14.1
2024-04-15 16:46:22,693:INFO:              sktime: 0.21.1
2024-04-15 16:46:22,694:INFO:               tbats: 1.1.3
2024-04-15 16:46:22,694:INFO:            pmdarima: 2.0.4
2024-04-15 16:46:22,694:INFO:              psutil: 5.9.8
2024-04-15 16:46:22,694:INFO:          markupsafe: 2.1.5
2024-04-15 16:46:22,694:INFO:             pickle5: Not installed
2024-04-15 16:46:22,694:INFO:         cloudpickle: 3.0.0
2024-04-15 16:46:22,694:INFO:         deprecation: 2.1.0
2024-04-15 16:46:22,694:INFO:              xxhash: 3.4.1
2024-04-15 16:46:22,694:INFO:           wurlitzer: Not installed
2024-04-15 16:46:22,694:INFO:PyCaret optional dependencies:
2024-04-15 16:46:22,694:INFO:                shap: Not installed
2024-04-15 16:46:22,694:INFO:           interpret: Not installed
2024-04-15 16:46:22,694:INFO:                umap: Not installed
2024-04-15 16:46:22,694:INFO:     ydata_profiling: Not installed
2024-04-15 16:46:22,694:INFO:  explainerdashboard: Not installed
2024-04-15 16:46:22,694:INFO:             autoviz: Not installed
2024-04-15 16:46:22,694:INFO:           fairlearn: Not installed
2024-04-15 16:46:22,694:INFO:          deepchecks: Not installed
2024-04-15 16:46:22,694:INFO:             xgboost: Not installed
2024-04-15 16:46:22,694:INFO:            catboost: Not installed
2024-04-15 16:46:22,694:INFO:              kmodes: Not installed
2024-04-15 16:46:22,694:INFO:             mlxtend: Not installed
2024-04-15 16:46:22,694:INFO:       statsforecast: Not installed
2024-04-15 16:46:22,694:INFO:        tune_sklearn: Not installed
2024-04-15 16:46:22,694:INFO:                 ray: Not installed
2024-04-15 16:46:22,694:INFO:            hyperopt: Not installed
2024-04-15 16:46:22,694:INFO:              optuna: Not installed
2024-04-15 16:46:22,695:INFO:               skopt: Not installed
2024-04-15 16:46:22,695:INFO:              mlflow: 2.11.3
2024-04-15 16:46:22,695:INFO:              gradio: Not installed
2024-04-15 16:46:22,695:INFO:             fastapi: Not installed
2024-04-15 16:46:22,695:INFO:             uvicorn: Not installed
2024-04-15 16:46:22,695:INFO:              m2cgen: Not installed
2024-04-15 16:46:22,695:INFO:           evidently: Not installed
2024-04-15 16:46:22,695:INFO:               fugue: Not installed
2024-04-15 16:46:22,695:INFO:           streamlit: 1.33.0
2024-04-15 16:46:22,695:INFO:             prophet: Not installed
2024-04-15 16:46:22,695:INFO:None
2024-04-15 16:46:22,695:INFO:Set up data.
2024-04-15 16:46:22,702:INFO:Set up folding strategy.
2024-04-15 16:46:22,702:INFO:Set up train/test split.
2024-04-15 16:46:22,702:INFO:Set up data.
2024-04-15 16:46:22,706:INFO:Set up index.
2024-04-15 16:46:22,707:INFO:Assigning column types.
2024-04-15 16:46:22,710:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:46:22,746:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:46:22,747:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:46:22,775:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,775:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,813:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:46:22,814:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:46:22,837:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,837:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,837:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:46:22,875:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:46:22,900:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,900:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,940:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:46:22,964:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,964:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:22,964:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:46:23,026:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,027:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,087:INFO:Preparing preprocessing pipeline...
2024-04-15 16:46:23,088:INFO:Set up simple imputation.
2024-04-15 16:46:23,088:INFO:Set up feature normalization.
2024-04-15 16:46:23,108:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:46:23,111:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:46:23,111:INFO:Creating final display dataframe.
2024-04-15 16:46:23,182:INFO:Setup _display_container:                     Description             Value
0                    Session id              4212
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              1b91
2024-04-15 16:46:23,253:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,254:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:46:23,317:INFO:setup() successfully completed in 0.64s...............
2024-04-15 16:46:23,317:INFO:Initializing compare_models()
2024-04-15 16:46:23,317:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:46:23,317:INFO:Checking exceptions
2024-04-15 16:46:23,321:INFO:Preparing display monitor
2024-04-15 16:46:23,337:INFO:Initializing Logistic Regression
2024-04-15 16:46:23,337:INFO:Total runtime is 0.0 minutes
2024-04-15 16:46:23,340:INFO:SubProcess create_model() called ==================================
2024-04-15 16:46:23,340:INFO:Initializing create_model()
2024-04-15 16:46:23,340:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5869F9670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:46:23,340:INFO:Checking exceptions
2024-04-15 16:46:23,340:INFO:Importing libraries
2024-04-15 16:46:23,340:INFO:Copying training dataset
2024-04-15 16:46:23,346:INFO:Defining folds
2024-04-15 16:46:23,346:INFO:Declaring metric variables
2024-04-15 16:46:23,349:INFO:Importing untrained model
2024-04-15 16:46:23,352:INFO:Logistic Regression Imported successfully
2024-04-15 16:46:23,358:INFO:Starting cross validation
2024-04-15 16:46:23,359:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:46:27,661:INFO:Calculating mean and std
2024-04-15 16:46:27,663:INFO:Creating metrics dataframe
2024-04-15 16:46:27,667:INFO:Uploading results into container
2024-04-15 16:46:27,667:INFO:Uploading model into container now
2024-04-15 16:46:27,668:INFO:_master_model_container: 1
2024-04-15 16:46:27,668:INFO:_display_container: 2
2024-04-15 16:46:27,668:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4212, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:46:27,668:INFO:create_model() successfully completed......................................
2024-04-15 16:46:27,996:INFO:SubProcess create_model() end ==================================
2024-04-15 16:46:27,996:INFO:Creating metrics dataframe
2024-04-15 16:46:28,006:INFO:Initializing Decision Tree Classifier
2024-04-15 16:46:28,006:INFO:Total runtime is 0.07781345049540202 minutes
2024-04-15 16:46:28,009:INFO:SubProcess create_model() called ==================================
2024-04-15 16:46:28,009:INFO:Initializing create_model()
2024-04-15 16:46:28,009:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5869F9670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:46:28,009:INFO:Checking exceptions
2024-04-15 16:46:28,009:INFO:Importing libraries
2024-04-15 16:46:28,009:INFO:Copying training dataset
2024-04-15 16:46:28,016:INFO:Defining folds
2024-04-15 16:46:28,016:INFO:Declaring metric variables
2024-04-15 16:46:28,020:INFO:Importing untrained model
2024-04-15 16:46:28,023:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:46:28,029:INFO:Starting cross validation
2024-04-15 16:46:28,030:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:46:29,973:INFO:Calculating mean and std
2024-04-15 16:46:29,975:INFO:Creating metrics dataframe
2024-04-15 16:46:29,980:INFO:Uploading results into container
2024-04-15 16:46:29,981:INFO:Uploading model into container now
2024-04-15 16:46:29,982:INFO:_master_model_container: 2
2024-04-15 16:46:29,982:INFO:_display_container: 2
2024-04-15 16:46:29,983:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4212, splitter='best')
2024-04-15 16:46:29,983:INFO:create_model() successfully completed......................................
2024-04-15 16:46:30,316:INFO:SubProcess create_model() end ==================================
2024-04-15 16:46:30,316:INFO:Creating metrics dataframe
2024-04-15 16:46:30,334:INFO:Initializing create_model()
2024-04-15 16:46:30,334:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4212, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:46:30,334:INFO:Checking exceptions
2024-04-15 16:46:30,335:INFO:Importing libraries
2024-04-15 16:46:30,336:INFO:Copying training dataset
2024-04-15 16:46:30,341:INFO:Defining folds
2024-04-15 16:46:30,341:INFO:Declaring metric variables
2024-04-15 16:46:30,341:INFO:Importing untrained model
2024-04-15 16:46:30,341:INFO:Declaring custom model
2024-04-15 16:46:30,341:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:46:30,342:INFO:Cross validation set to False
2024-04-15 16:46:30,342:INFO:Fitting Model
2024-04-15 16:46:30,396:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4212, splitter='best')
2024-04-15 16:46:30,396:INFO:create_model() successfully completed......................................
2024-04-15 16:46:30,733:INFO:Initializing create_model()
2024-04-15 16:46:30,733:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4212, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:46:30,733:INFO:Checking exceptions
2024-04-15 16:46:30,735:INFO:Importing libraries
2024-04-15 16:46:30,735:INFO:Copying training dataset
2024-04-15 16:46:30,740:INFO:Defining folds
2024-04-15 16:46:30,740:INFO:Declaring metric variables
2024-04-15 16:46:30,740:INFO:Importing untrained model
2024-04-15 16:46:30,740:INFO:Declaring custom model
2024-04-15 16:46:30,740:INFO:Logistic Regression Imported successfully
2024-04-15 16:46:30,741:INFO:Cross validation set to False
2024-04-15 16:46:30,741:INFO:Fitting Model
2024-04-15 16:46:30,762:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4212, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:46:30,762:INFO:create_model() successfully completed......................................
2024-04-15 16:46:31,096:INFO:_master_model_container: 2
2024-04-15 16:46:31,096:INFO:_display_container: 2
2024-04-15 16:46:31,096:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4212, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4212, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:46:31,096:INFO:compare_models() successfully completed......................................
2024-04-15 16:46:32,046:INFO:Initializing predict_model()
2024-04-15 16:46:32,047:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4212, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C586AD5310>)
2024-04-15 16:46:32,047:INFO:Checking exceptions
2024-04-15 16:46:32,047:INFO:Preloading libraries
2024-04-15 16:46:32,458:INFO:Initializing predict_model()
2024-04-15 16:46:32,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58C245250>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=4212, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5867B1A60>)
2024-04-15 16:46:32,458:INFO:Checking exceptions
2024-04-15 16:46:32,458:INFO:Preloading libraries
2024-04-15 16:55:29,154:INFO:PyCaret ClassificationExperiment
2024-04-15 16:55:29,154:INFO:Logging name: clf-default-name
2024-04-15 16:55:29,154:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:55:29,154:INFO:version 3.2.0
2024-04-15 16:55:29,154:INFO:Initializing setup()
2024-04-15 16:55:29,154:INFO:self.USI: aa94
2024-04-15 16:55:29,154:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:55:29,154:INFO:Checking environment
2024-04-15 16:55:29,154:INFO:python_version: 3.8.0
2024-04-15 16:55:29,154:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:55:29,154:INFO:machine: AMD64
2024-04-15 16:55:29,154:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 16:55:29,163:INFO:Memory: svmem(total=34301427712, available=19279048704, percent=43.8, used=15022379008, free=19279048704)
2024-04-15 16:55:29,163:INFO:Physical Core: 6
2024-04-15 16:55:29,163:INFO:Logical Core: 12
2024-04-15 16:55:29,163:INFO:Checking libraries
2024-04-15 16:55:29,163:INFO:System:
2024-04-15 16:55:29,163:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 16:55:29,163:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 16:55:29,163:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 16:55:29,163:INFO:PyCaret required dependencies:
2024-04-15 16:55:29,163:INFO:                 pip: 19.2.3
2024-04-15 16:55:29,163:INFO:          setuptools: 41.2.0
2024-04-15 16:55:29,163:INFO:             pycaret: 3.2.0
2024-04-15 16:55:29,163:INFO:             IPython: 8.12.3
2024-04-15 16:55:29,163:INFO:          ipywidgets: 8.1.2
2024-04-15 16:55:29,163:INFO:                tqdm: 4.66.2
2024-04-15 16:55:29,163:INFO:               numpy: 1.24.4
2024-04-15 16:55:29,164:INFO:              pandas: 1.5.3
2024-04-15 16:55:29,164:INFO:              jinja2: 3.1.3
2024-04-15 16:55:29,164:INFO:               scipy: 1.10.1
2024-04-15 16:55:29,164:INFO:              joblib: 1.3.2
2024-04-15 16:55:29,164:INFO:             sklearn: 1.2.0
2024-04-15 16:55:29,164:INFO:                pyod: 1.1.3
2024-04-15 16:55:29,164:INFO:            imblearn: 0.12.2
2024-04-15 16:55:29,164:INFO:   category_encoders: 2.6.3
2024-04-15 16:55:29,164:INFO:            lightgbm: 4.3.0
2024-04-15 16:55:29,164:INFO:               numba: 0.58.1
2024-04-15 16:55:29,164:INFO:            requests: 2.31.0
2024-04-15 16:55:29,164:INFO:          matplotlib: 3.6.0
2024-04-15 16:55:29,164:INFO:          scikitplot: 0.3.7
2024-04-15 16:55:29,164:INFO:         yellowbrick: 1.5
2024-04-15 16:55:29,164:INFO:              plotly: 5.20.0
2024-04-15 16:55:29,164:INFO:    plotly-resampler: Not installed
2024-04-15 16:55:29,164:INFO:             kaleido: 0.2.1
2024-04-15 16:55:29,164:INFO:           schemdraw: 0.15
2024-04-15 16:55:29,164:INFO:         statsmodels: 0.14.1
2024-04-15 16:55:29,164:INFO:              sktime: 0.21.1
2024-04-15 16:55:29,164:INFO:               tbats: 1.1.3
2024-04-15 16:55:29,164:INFO:            pmdarima: 2.0.4
2024-04-15 16:55:29,164:INFO:              psutil: 5.9.8
2024-04-15 16:55:29,164:INFO:          markupsafe: 2.1.5
2024-04-15 16:55:29,164:INFO:             pickle5: Not installed
2024-04-15 16:55:29,164:INFO:         cloudpickle: 3.0.0
2024-04-15 16:55:29,164:INFO:         deprecation: 2.1.0
2024-04-15 16:55:29,164:INFO:              xxhash: 3.4.1
2024-04-15 16:55:29,164:INFO:           wurlitzer: Not installed
2024-04-15 16:55:29,164:INFO:PyCaret optional dependencies:
2024-04-15 16:55:29,164:INFO:                shap: Not installed
2024-04-15 16:55:29,165:INFO:           interpret: Not installed
2024-04-15 16:55:29,165:INFO:                umap: Not installed
2024-04-15 16:55:29,165:INFO:     ydata_profiling: Not installed
2024-04-15 16:55:29,165:INFO:  explainerdashboard: Not installed
2024-04-15 16:55:29,165:INFO:             autoviz: Not installed
2024-04-15 16:55:29,165:INFO:           fairlearn: Not installed
2024-04-15 16:55:29,165:INFO:          deepchecks: Not installed
2024-04-15 16:55:29,165:INFO:             xgboost: Not installed
2024-04-15 16:55:29,165:INFO:            catboost: Not installed
2024-04-15 16:55:29,165:INFO:              kmodes: Not installed
2024-04-15 16:55:29,165:INFO:             mlxtend: Not installed
2024-04-15 16:55:29,165:INFO:       statsforecast: Not installed
2024-04-15 16:55:29,165:INFO:        tune_sklearn: Not installed
2024-04-15 16:55:29,165:INFO:                 ray: Not installed
2024-04-15 16:55:29,165:INFO:            hyperopt: Not installed
2024-04-15 16:55:29,165:INFO:              optuna: Not installed
2024-04-15 16:55:29,165:INFO:               skopt: Not installed
2024-04-15 16:55:29,165:INFO:              mlflow: 2.11.3
2024-04-15 16:55:29,165:INFO:              gradio: Not installed
2024-04-15 16:55:29,165:INFO:             fastapi: Not installed
2024-04-15 16:55:29,165:INFO:             uvicorn: Not installed
2024-04-15 16:55:29,165:INFO:              m2cgen: Not installed
2024-04-15 16:55:29,165:INFO:           evidently: Not installed
2024-04-15 16:55:29,165:INFO:               fugue: Not installed
2024-04-15 16:55:29,165:INFO:           streamlit: 1.33.0
2024-04-15 16:55:29,165:INFO:             prophet: Not installed
2024-04-15 16:55:29,165:INFO:None
2024-04-15 16:55:29,165:INFO:Set up data.
2024-04-15 16:55:29,171:INFO:Set up folding strategy.
2024-04-15 16:55:29,172:INFO:Set up train/test split.
2024-04-15 16:55:29,172:INFO:Set up data.
2024-04-15 16:55:29,176:INFO:Set up index.
2024-04-15 16:55:29,176:INFO:Assigning column types.
2024-04-15 16:55:29,179:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 16:55:29,219:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:55:29,220:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:55:29,255:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,308:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 16:55:29,309:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:55:29,339:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,340:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,340:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 16:55:29,393:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:55:29,433:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,434:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,482:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 16:55:29,508:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,508:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,509:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 16:55:29,594:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,595:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,663:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,664:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,666:INFO:Preparing preprocessing pipeline...
2024-04-15 16:55:29,667:INFO:Set up simple imputation.
2024-04-15 16:55:29,667:INFO:Set up feature normalization.
2024-04-15 16:55:29,695:INFO:Finished creating preprocessing pipeline.
2024-04-15 16:55:29,699:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 16:55:29,699:INFO:Creating final display dataframe.
2024-04-15 16:55:29,793:INFO:Setup _display_container:                     Description             Value
0                    Session id              3030
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              aa94
2024-04-15 16:55:29,898:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,898:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,978:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 16:55:29,979:INFO:setup() successfully completed in 0.83s...............
2024-04-15 16:55:29,981:INFO:Initializing compare_models()
2024-04-15 16:55:29,981:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 16:55:29,981:INFO:Checking exceptions
2024-04-15 16:55:29,987:INFO:Preparing display monitor
2024-04-15 16:55:30,011:INFO:Initializing Logistic Regression
2024-04-15 16:55:30,011:INFO:Total runtime is 0.0 minutes
2024-04-15 16:55:30,014:INFO:SubProcess create_model() called ==================================
2024-04-15 16:55:30,014:INFO:Initializing create_model()
2024-04-15 16:55:30,014:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5983950A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:55:30,014:INFO:Checking exceptions
2024-04-15 16:55:30,014:INFO:Importing libraries
2024-04-15 16:55:30,014:INFO:Copying training dataset
2024-04-15 16:55:30,023:INFO:Defining folds
2024-04-15 16:55:30,024:INFO:Declaring metric variables
2024-04-15 16:55:30,028:INFO:Importing untrained model
2024-04-15 16:55:30,031:INFO:Logistic Regression Imported successfully
2024-04-15 16:55:30,037:INFO:Starting cross validation
2024-04-15 16:55:30,039:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:55:30,734:INFO:Calculating mean and std
2024-04-15 16:55:30,735:INFO:Creating metrics dataframe
2024-04-15 16:55:30,740:INFO:Uploading results into container
2024-04-15 16:55:30,741:INFO:Uploading model into container now
2024-04-15 16:55:30,741:INFO:_master_model_container: 1
2024-04-15 16:55:30,741:INFO:_display_container: 2
2024-04-15 16:55:30,742:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3030, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:55:30,742:INFO:create_model() successfully completed......................................
2024-04-15 16:55:31,251:INFO:SubProcess create_model() end ==================================
2024-04-15 16:55:31,251:INFO:Creating metrics dataframe
2024-04-15 16:55:31,259:INFO:Initializing Decision Tree Classifier
2024-04-15 16:55:31,259:INFO:Total runtime is 0.020788025856018067 minutes
2024-04-15 16:55:31,262:INFO:SubProcess create_model() called ==================================
2024-04-15 16:55:31,263:INFO:Initializing create_model()
2024-04-15 16:55:31,263:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C5983950A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:55:31,263:INFO:Checking exceptions
2024-04-15 16:55:31,263:INFO:Importing libraries
2024-04-15 16:55:31,263:INFO:Copying training dataset
2024-04-15 16:55:31,268:INFO:Defining folds
2024-04-15 16:55:31,268:INFO:Declaring metric variables
2024-04-15 16:55:31,271:INFO:Importing untrained model
2024-04-15 16:55:31,274:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:55:31,279:INFO:Starting cross validation
2024-04-15 16:55:31,280:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 16:55:34,694:INFO:Calculating mean and std
2024-04-15 16:55:34,696:INFO:Creating metrics dataframe
2024-04-15 16:55:34,701:INFO:Uploading results into container
2024-04-15 16:55:34,702:INFO:Uploading model into container now
2024-04-15 16:55:34,702:INFO:_master_model_container: 2
2024-04-15 16:55:34,702:INFO:_display_container: 2
2024-04-15 16:55:34,703:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3030, splitter='best')
2024-04-15 16:55:34,703:INFO:create_model() successfully completed......................................
2024-04-15 16:55:35,063:INFO:SubProcess create_model() end ==================================
2024-04-15 16:55:35,063:INFO:Creating metrics dataframe
2024-04-15 16:55:35,077:INFO:Initializing create_model()
2024-04-15 16:55:35,077:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3030, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:55:35,078:INFO:Checking exceptions
2024-04-15 16:55:35,079:INFO:Importing libraries
2024-04-15 16:55:35,080:INFO:Copying training dataset
2024-04-15 16:55:35,084:INFO:Defining folds
2024-04-15 16:55:35,084:INFO:Declaring metric variables
2024-04-15 16:55:35,084:INFO:Importing untrained model
2024-04-15 16:55:35,084:INFO:Declaring custom model
2024-04-15 16:55:35,084:INFO:Decision Tree Classifier Imported successfully
2024-04-15 16:55:35,085:INFO:Cross validation set to False
2024-04-15 16:55:35,085:INFO:Fitting Model
2024-04-15 16:55:35,142:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3030, splitter='best')
2024-04-15 16:55:35,142:INFO:create_model() successfully completed......................................
2024-04-15 16:55:35,461:INFO:Initializing create_model()
2024-04-15 16:55:35,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3030, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 16:55:35,462:INFO:Checking exceptions
2024-04-15 16:55:35,463:INFO:Importing libraries
2024-04-15 16:55:35,464:INFO:Copying training dataset
2024-04-15 16:55:35,468:INFO:Defining folds
2024-04-15 16:55:35,468:INFO:Declaring metric variables
2024-04-15 16:55:35,469:INFO:Importing untrained model
2024-04-15 16:55:35,469:INFO:Declaring custom model
2024-04-15 16:55:35,469:INFO:Logistic Regression Imported successfully
2024-04-15 16:55:35,470:INFO:Cross validation set to False
2024-04-15 16:55:35,470:INFO:Fitting Model
2024-04-15 16:55:35,490:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3030, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 16:55:35,491:INFO:create_model() successfully completed......................................
2024-04-15 16:55:35,836:INFO:_master_model_container: 2
2024-04-15 16:55:35,836:INFO:_display_container: 2
2024-04-15 16:55:35,837:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3030, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3030, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 16:55:35,837:INFO:compare_models() successfully completed......................................
2024-04-15 16:55:37,772:INFO:Initializing predict_model()
2024-04-15 16:55:37,772:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C591E09BE0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3030, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597CC9430>)
2024-04-15 16:55:37,772:INFO:Checking exceptions
2024-04-15 16:55:37,772:INFO:Preloading libraries
2024-04-15 16:59:59,992:INFO:PyCaret ClassificationExperiment
2024-04-15 16:59:59,992:INFO:Logging name: clf-default-name
2024-04-15 16:59:59,992:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 16:59:59,992:INFO:version 3.2.0
2024-04-15 16:59:59,992:INFO:Initializing setup()
2024-04-15 16:59:59,992:INFO:self.USI: 2966
2024-04-15 16:59:59,992:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 16:59:59,992:INFO:Checking environment
2024-04-15 16:59:59,992:INFO:python_version: 3.8.0
2024-04-15 16:59:59,992:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 16:59:59,992:INFO:machine: AMD64
2024-04-15 16:59:59,993:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:00:00,001:INFO:Memory: svmem(total=34301427712, available=18163286016, percent=47.0, used=16138141696, free=18163286016)
2024-04-15 17:00:00,001:INFO:Physical Core: 6
2024-04-15 17:00:00,001:INFO:Logical Core: 12
2024-04-15 17:00:00,001:INFO:Checking libraries
2024-04-15 17:00:00,001:INFO:System:
2024-04-15 17:00:00,001:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:00:00,002:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:00:00,002:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:00:00,002:INFO:PyCaret required dependencies:
2024-04-15 17:00:00,002:INFO:                 pip: 19.2.3
2024-04-15 17:00:00,002:INFO:          setuptools: 41.2.0
2024-04-15 17:00:00,002:INFO:             pycaret: 3.2.0
2024-04-15 17:00:00,002:INFO:             IPython: 8.12.3
2024-04-15 17:00:00,002:INFO:          ipywidgets: 8.1.2
2024-04-15 17:00:00,002:INFO:                tqdm: 4.66.2
2024-04-15 17:00:00,002:INFO:               numpy: 1.24.4
2024-04-15 17:00:00,002:INFO:              pandas: 1.5.3
2024-04-15 17:00:00,002:INFO:              jinja2: 3.1.3
2024-04-15 17:00:00,002:INFO:               scipy: 1.10.1
2024-04-15 17:00:00,002:INFO:              joblib: 1.3.2
2024-04-15 17:00:00,002:INFO:             sklearn: 1.2.0
2024-04-15 17:00:00,002:INFO:                pyod: 1.1.3
2024-04-15 17:00:00,002:INFO:            imblearn: 0.12.2
2024-04-15 17:00:00,002:INFO:   category_encoders: 2.6.3
2024-04-15 17:00:00,002:INFO:            lightgbm: 4.3.0
2024-04-15 17:00:00,002:INFO:               numba: 0.58.1
2024-04-15 17:00:00,002:INFO:            requests: 2.31.0
2024-04-15 17:00:00,003:INFO:          matplotlib: 3.6.0
2024-04-15 17:00:00,003:INFO:          scikitplot: 0.3.7
2024-04-15 17:00:00,003:INFO:         yellowbrick: 1.5
2024-04-15 17:00:00,003:INFO:              plotly: 5.20.0
2024-04-15 17:00:00,003:INFO:    plotly-resampler: Not installed
2024-04-15 17:00:00,003:INFO:             kaleido: 0.2.1
2024-04-15 17:00:00,003:INFO:           schemdraw: 0.15
2024-04-15 17:00:00,003:INFO:         statsmodels: 0.14.1
2024-04-15 17:00:00,003:INFO:              sktime: 0.21.1
2024-04-15 17:00:00,003:INFO:               tbats: 1.1.3
2024-04-15 17:00:00,003:INFO:            pmdarima: 2.0.4
2024-04-15 17:00:00,003:INFO:              psutil: 5.9.8
2024-04-15 17:00:00,003:INFO:          markupsafe: 2.1.5
2024-04-15 17:00:00,003:INFO:             pickle5: Not installed
2024-04-15 17:00:00,003:INFO:         cloudpickle: 3.0.0
2024-04-15 17:00:00,003:INFO:         deprecation: 2.1.0
2024-04-15 17:00:00,003:INFO:              xxhash: 3.4.1
2024-04-15 17:00:00,003:INFO:           wurlitzer: Not installed
2024-04-15 17:00:00,003:INFO:PyCaret optional dependencies:
2024-04-15 17:00:00,003:INFO:                shap: Not installed
2024-04-15 17:00:00,003:INFO:           interpret: Not installed
2024-04-15 17:00:00,003:INFO:                umap: Not installed
2024-04-15 17:00:00,004:INFO:     ydata_profiling: Not installed
2024-04-15 17:00:00,004:INFO:  explainerdashboard: Not installed
2024-04-15 17:00:00,004:INFO:             autoviz: Not installed
2024-04-15 17:00:00,004:INFO:           fairlearn: Not installed
2024-04-15 17:00:00,004:INFO:          deepchecks: Not installed
2024-04-15 17:00:00,004:INFO:             xgboost: Not installed
2024-04-15 17:00:00,004:INFO:            catboost: Not installed
2024-04-15 17:00:00,004:INFO:              kmodes: Not installed
2024-04-15 17:00:00,004:INFO:             mlxtend: Not installed
2024-04-15 17:00:00,004:INFO:       statsforecast: Not installed
2024-04-15 17:00:00,004:INFO:        tune_sklearn: Not installed
2024-04-15 17:00:00,004:INFO:                 ray: Not installed
2024-04-15 17:00:00,004:INFO:            hyperopt: Not installed
2024-04-15 17:00:00,004:INFO:              optuna: Not installed
2024-04-15 17:00:00,004:INFO:               skopt: Not installed
2024-04-15 17:00:00,004:INFO:              mlflow: 2.11.3
2024-04-15 17:00:00,004:INFO:              gradio: Not installed
2024-04-15 17:00:00,004:INFO:             fastapi: Not installed
2024-04-15 17:00:00,004:INFO:             uvicorn: Not installed
2024-04-15 17:00:00,004:INFO:              m2cgen: Not installed
2024-04-15 17:00:00,004:INFO:           evidently: Not installed
2024-04-15 17:00:00,004:INFO:               fugue: Not installed
2024-04-15 17:00:00,004:INFO:           streamlit: 1.33.0
2024-04-15 17:00:00,004:INFO:             prophet: Not installed
2024-04-15 17:00:00,004:INFO:None
2024-04-15 17:00:00,004:INFO:Set up data.
2024-04-15 17:00:00,010:INFO:Set up folding strategy.
2024-04-15 17:00:00,010:INFO:Set up train/test split.
2024-04-15 17:00:00,011:INFO:Set up data.
2024-04-15 17:00:00,016:INFO:Set up index.
2024-04-15 17:00:00,016:INFO:Assigning column types.
2024-04-15 17:00:00,020:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:00:00,067:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:00:00,069:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:00:00,096:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,138:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:00:00,139:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:00:00,171:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,172:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,172:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:00:00,213:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:00:00,237:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,237:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,273:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:00:00,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,301:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:00:00,370:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,370:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,435:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,435:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,436:INFO:Preparing preprocessing pipeline...
2024-04-15 17:00:00,437:INFO:Set up simple imputation.
2024-04-15 17:00:00,438:INFO:Set up feature normalization.
2024-04-15 17:00:00,457:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:00:00,462:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:00:00,462:INFO:Creating final display dataframe.
2024-04-15 17:00:00,548:INFO:Setup _display_container:                     Description             Value
0                    Session id              8025
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              2966
2024-04-15 17:00:00,629:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,629:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,695:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,695:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:00:00,695:INFO:setup() successfully completed in 0.7s...............
2024-04-15 17:00:00,696:INFO:Initializing compare_models()
2024-04-15 17:00:00,696:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:00:00,697:INFO:Checking exceptions
2024-04-15 17:00:00,701:INFO:Preparing display monitor
2024-04-15 17:00:00,719:INFO:Initializing Logistic Regression
2024-04-15 17:00:00,719:INFO:Total runtime is 0.0 minutes
2024-04-15 17:00:00,721:INFO:SubProcess create_model() called ==================================
2024-04-15 17:00:00,721:INFO:Initializing create_model()
2024-04-15 17:00:00,722:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58BC95E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:00:00,722:INFO:Checking exceptions
2024-04-15 17:00:00,722:INFO:Importing libraries
2024-04-15 17:00:00,722:INFO:Copying training dataset
2024-04-15 17:00:00,728:INFO:Defining folds
2024-04-15 17:00:00,728:INFO:Declaring metric variables
2024-04-15 17:00:00,731:INFO:Importing untrained model
2024-04-15 17:00:00,735:INFO:Logistic Regression Imported successfully
2024-04-15 17:00:00,741:INFO:Starting cross validation
2024-04-15 17:00:00,742:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:00:00,860:INFO:Calculating mean and std
2024-04-15 17:00:00,861:INFO:Creating metrics dataframe
2024-04-15 17:00:00,865:INFO:Uploading results into container
2024-04-15 17:00:00,865:INFO:Uploading model into container now
2024-04-15 17:00:00,865:INFO:_master_model_container: 1
2024-04-15 17:00:00,865:INFO:_display_container: 2
2024-04-15 17:00:00,866:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8025, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:00:00,866:INFO:create_model() successfully completed......................................
2024-04-15 17:00:01,219:INFO:SubProcess create_model() end ==================================
2024-04-15 17:00:01,220:INFO:Creating metrics dataframe
2024-04-15 17:00:01,227:INFO:Initializing Decision Tree Classifier
2024-04-15 17:00:01,227:INFO:Total runtime is 0.008468715349833171 minutes
2024-04-15 17:00:01,230:INFO:SubProcess create_model() called ==================================
2024-04-15 17:00:01,230:INFO:Initializing create_model()
2024-04-15 17:00:01,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58BC95E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:00:01,230:INFO:Checking exceptions
2024-04-15 17:00:01,230:INFO:Importing libraries
2024-04-15 17:00:01,230:INFO:Copying training dataset
2024-04-15 17:00:01,236:INFO:Defining folds
2024-04-15 17:00:01,236:INFO:Declaring metric variables
2024-04-15 17:00:01,239:INFO:Importing untrained model
2024-04-15 17:00:01,242:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:00:01,247:INFO:Starting cross validation
2024-04-15 17:00:01,248:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:00:02,209:INFO:Calculating mean and std
2024-04-15 17:00:02,211:INFO:Creating metrics dataframe
2024-04-15 17:00:02,214:INFO:Uploading results into container
2024-04-15 17:00:02,215:INFO:Uploading model into container now
2024-04-15 17:00:02,215:INFO:_master_model_container: 2
2024-04-15 17:00:02,215:INFO:_display_container: 2
2024-04-15 17:00:02,216:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8025, splitter='best')
2024-04-15 17:00:02,216:INFO:create_model() successfully completed......................................
2024-04-15 17:00:02,550:INFO:SubProcess create_model() end ==================================
2024-04-15 17:00:02,550:INFO:Creating metrics dataframe
2024-04-15 17:00:02,566:INFO:Initializing create_model()
2024-04-15 17:00:02,566:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8025, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:00:02,566:INFO:Checking exceptions
2024-04-15 17:00:02,568:INFO:Importing libraries
2024-04-15 17:00:02,568:INFO:Copying training dataset
2024-04-15 17:00:02,572:INFO:Defining folds
2024-04-15 17:00:02,573:INFO:Declaring metric variables
2024-04-15 17:00:02,573:INFO:Importing untrained model
2024-04-15 17:00:02,573:INFO:Declaring custom model
2024-04-15 17:00:02,573:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:00:02,574:INFO:Cross validation set to False
2024-04-15 17:00:02,574:INFO:Fitting Model
2024-04-15 17:00:02,628:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8025, splitter='best')
2024-04-15 17:00:02,629:INFO:create_model() successfully completed......................................
2024-04-15 17:00:02,948:INFO:Initializing create_model()
2024-04-15 17:00:02,948:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8025, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:00:02,948:INFO:Checking exceptions
2024-04-15 17:00:02,950:INFO:Importing libraries
2024-04-15 17:00:02,950:INFO:Copying training dataset
2024-04-15 17:00:02,955:INFO:Defining folds
2024-04-15 17:00:02,955:INFO:Declaring metric variables
2024-04-15 17:00:02,955:INFO:Importing untrained model
2024-04-15 17:00:02,955:INFO:Declaring custom model
2024-04-15 17:00:02,956:INFO:Logistic Regression Imported successfully
2024-04-15 17:00:02,956:INFO:Cross validation set to False
2024-04-15 17:00:02,956:INFO:Fitting Model
2024-04-15 17:00:02,973:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8025, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:00:02,973:INFO:create_model() successfully completed......................................
2024-04-15 17:00:03,296:INFO:_master_model_container: 2
2024-04-15 17:00:03,296:INFO:_display_container: 2
2024-04-15 17:00:03,297:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8025, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8025, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:00:03,297:INFO:compare_models() successfully completed......................................
2024-04-15 17:00:03,298:INFO:Initializing plot_model()
2024-04-15 17:00:03,298:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8025, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, system=True)
2024-04-15 17:00:03,298:INFO:Checking exceptions
2024-04-15 17:00:03,304:INFO:Preloading libraries
2024-04-15 17:00:03,305:INFO:Copying training dataset
2024-04-15 17:00:03,305:INFO:Plot type: parameter
2024-04-15 17:00:03,308:INFO:Visual Rendered Successfully
2024-04-15 17:00:03,641:INFO:plot_model() successfully completed......................................
2024-04-15 17:00:03,670:INFO:Initializing predict_model()
2024-04-15 17:00:03,670:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8025, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597EEDB80>)
2024-04-15 17:00:03,670:INFO:Checking exceptions
2024-04-15 17:00:03,670:INFO:Preloading libraries
2024-04-15 17:00:04,191:INFO:Initializing plot_model()
2024-04-15 17:00:04,191:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8025, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, system=True)
2024-04-15 17:00:04,191:INFO:Checking exceptions
2024-04-15 17:00:04,195:INFO:Preloading libraries
2024-04-15 17:00:04,195:INFO:Copying training dataset
2024-04-15 17:00:04,195:INFO:Plot type: parameter
2024-04-15 17:00:04,199:INFO:Visual Rendered Successfully
2024-04-15 17:00:04,545:INFO:plot_model() successfully completed......................................
2024-04-15 17:00:04,568:INFO:Initializing predict_model()
2024-04-15 17:00:04,568:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C59047E760>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8025, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590614430>)
2024-04-15 17:00:04,568:INFO:Checking exceptions
2024-04-15 17:00:04,568:INFO:Preloading libraries
2024-04-15 17:00:05,114:INFO:Initializing load_model()
2024-04-15 17:00:05,114:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:01:54,208:INFO:PyCaret ClassificationExperiment
2024-04-15 17:01:54,208:INFO:Logging name: clf-default-name
2024-04-15 17:01:54,208:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 17:01:54,208:INFO:version 3.2.0
2024-04-15 17:01:54,208:INFO:Initializing setup()
2024-04-15 17:01:54,208:INFO:self.USI: 59e1
2024-04-15 17:01:54,209:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 17:01:54,209:INFO:Checking environment
2024-04-15 17:01:54,209:INFO:python_version: 3.8.0
2024-04-15 17:01:54,209:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 17:01:54,209:INFO:machine: AMD64
2024-04-15 17:01:54,209:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:01:54,217:INFO:Memory: svmem(total=34301427712, available=18015862784, percent=47.5, used=16285564928, free=18015862784)
2024-04-15 17:01:54,217:INFO:Physical Core: 6
2024-04-15 17:01:54,217:INFO:Logical Core: 12
2024-04-15 17:01:54,217:INFO:Checking libraries
2024-04-15 17:01:54,217:INFO:System:
2024-04-15 17:01:54,217:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:01:54,217:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:01:54,217:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:01:54,217:INFO:PyCaret required dependencies:
2024-04-15 17:01:54,217:INFO:                 pip: 19.2.3
2024-04-15 17:01:54,217:INFO:          setuptools: 41.2.0
2024-04-15 17:01:54,217:INFO:             pycaret: 3.2.0
2024-04-15 17:01:54,217:INFO:             IPython: 8.12.3
2024-04-15 17:01:54,217:INFO:          ipywidgets: 8.1.2
2024-04-15 17:01:54,218:INFO:                tqdm: 4.66.2
2024-04-15 17:01:54,218:INFO:               numpy: 1.24.4
2024-04-15 17:01:54,218:INFO:              pandas: 1.5.3
2024-04-15 17:01:54,218:INFO:              jinja2: 3.1.3
2024-04-15 17:01:54,218:INFO:               scipy: 1.10.1
2024-04-15 17:01:54,218:INFO:              joblib: 1.3.2
2024-04-15 17:01:54,218:INFO:             sklearn: 1.2.0
2024-04-15 17:01:54,218:INFO:                pyod: 1.1.3
2024-04-15 17:01:54,218:INFO:            imblearn: 0.12.2
2024-04-15 17:01:54,218:INFO:   category_encoders: 2.6.3
2024-04-15 17:01:54,218:INFO:            lightgbm: 4.3.0
2024-04-15 17:01:54,218:INFO:               numba: 0.58.1
2024-04-15 17:01:54,218:INFO:            requests: 2.31.0
2024-04-15 17:01:54,218:INFO:          matplotlib: 3.6.0
2024-04-15 17:01:54,218:INFO:          scikitplot: 0.3.7
2024-04-15 17:01:54,218:INFO:         yellowbrick: 1.5
2024-04-15 17:01:54,218:INFO:              plotly: 5.20.0
2024-04-15 17:01:54,218:INFO:    plotly-resampler: Not installed
2024-04-15 17:01:54,218:INFO:             kaleido: 0.2.1
2024-04-15 17:01:54,218:INFO:           schemdraw: 0.15
2024-04-15 17:01:54,218:INFO:         statsmodels: 0.14.1
2024-04-15 17:01:54,218:INFO:              sktime: 0.21.1
2024-04-15 17:01:54,218:INFO:               tbats: 1.1.3
2024-04-15 17:01:54,218:INFO:            pmdarima: 2.0.4
2024-04-15 17:01:54,219:INFO:              psutil: 5.9.8
2024-04-15 17:01:54,219:INFO:          markupsafe: 2.1.5
2024-04-15 17:01:54,219:INFO:             pickle5: Not installed
2024-04-15 17:01:54,219:INFO:         cloudpickle: 3.0.0
2024-04-15 17:01:54,219:INFO:         deprecation: 2.1.0
2024-04-15 17:01:54,219:INFO:              xxhash: 3.4.1
2024-04-15 17:01:54,219:INFO:           wurlitzer: Not installed
2024-04-15 17:01:54,219:INFO:PyCaret optional dependencies:
2024-04-15 17:01:54,219:INFO:                shap: Not installed
2024-04-15 17:01:54,219:INFO:           interpret: Not installed
2024-04-15 17:01:54,219:INFO:                umap: Not installed
2024-04-15 17:01:54,219:INFO:     ydata_profiling: Not installed
2024-04-15 17:01:54,219:INFO:  explainerdashboard: Not installed
2024-04-15 17:01:54,219:INFO:             autoviz: Not installed
2024-04-15 17:01:54,219:INFO:           fairlearn: Not installed
2024-04-15 17:01:54,219:INFO:          deepchecks: Not installed
2024-04-15 17:01:54,219:INFO:             xgboost: Not installed
2024-04-15 17:01:54,219:INFO:            catboost: Not installed
2024-04-15 17:01:54,219:INFO:              kmodes: Not installed
2024-04-15 17:01:54,219:INFO:             mlxtend: Not installed
2024-04-15 17:01:54,219:INFO:       statsforecast: Not installed
2024-04-15 17:01:54,219:INFO:        tune_sklearn: Not installed
2024-04-15 17:01:54,219:INFO:                 ray: Not installed
2024-04-15 17:01:54,219:INFO:            hyperopt: Not installed
2024-04-15 17:01:54,219:INFO:              optuna: Not installed
2024-04-15 17:01:54,219:INFO:               skopt: Not installed
2024-04-15 17:01:54,219:INFO:              mlflow: 2.11.3
2024-04-15 17:01:54,219:INFO:              gradio: Not installed
2024-04-15 17:01:54,220:INFO:             fastapi: Not installed
2024-04-15 17:01:54,220:INFO:             uvicorn: Not installed
2024-04-15 17:01:54,220:INFO:              m2cgen: Not installed
2024-04-15 17:01:54,220:INFO:           evidently: Not installed
2024-04-15 17:01:54,220:INFO:               fugue: Not installed
2024-04-15 17:01:54,220:INFO:           streamlit: 1.33.0
2024-04-15 17:01:54,220:INFO:             prophet: Not installed
2024-04-15 17:01:54,220:INFO:None
2024-04-15 17:01:54,220:INFO:Set up data.
2024-04-15 17:01:54,224:INFO:Set up folding strategy.
2024-04-15 17:01:54,225:INFO:Set up train/test split.
2024-04-15 17:01:54,225:INFO:Set up data.
2024-04-15 17:01:54,228:INFO:Set up index.
2024-04-15 17:01:54,228:INFO:Assigning column types.
2024-04-15 17:01:54,231:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:01:54,271:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:01:54,272:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:01:54,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,296:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,333:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:01:54,334:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:01:54,358:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,359:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,359:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:01:54,397:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:01:54,421:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,421:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,460:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:01:54,485:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,486:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:01:54,554:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,554:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,615:INFO:Preparing preprocessing pipeline...
2024-04-15 17:01:54,616:INFO:Set up simple imputation.
2024-04-15 17:01:54,616:INFO:Set up feature normalization.
2024-04-15 17:01:54,634:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:01:54,637:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:01:54,637:INFO:Creating final display dataframe.
2024-04-15 17:01:54,705:INFO:Setup _display_container:                     Description             Value
0                    Session id              1384
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              59e1
2024-04-15 17:01:54,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,773:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,838:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,838:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:01:54,838:INFO:setup() successfully completed in 0.63s...............
2024-04-15 17:01:54,839:INFO:Initializing compare_models()
2024-04-15 17:01:54,839:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:01:54,839:INFO:Checking exceptions
2024-04-15 17:01:54,843:INFO:Preparing display monitor
2024-04-15 17:01:54,860:INFO:Initializing Logistic Regression
2024-04-15 17:01:54,861:INFO:Total runtime is 1.666545867919922e-05 minutes
2024-04-15 17:01:54,863:INFO:SubProcess create_model() called ==================================
2024-04-15 17:01:54,864:INFO:Initializing create_model()
2024-04-15 17:01:54,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597C9E220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:01:54,864:INFO:Checking exceptions
2024-04-15 17:01:54,864:INFO:Importing libraries
2024-04-15 17:01:54,864:INFO:Copying training dataset
2024-04-15 17:01:54,870:INFO:Defining folds
2024-04-15 17:01:54,870:INFO:Declaring metric variables
2024-04-15 17:01:54,874:INFO:Importing untrained model
2024-04-15 17:01:54,878:INFO:Logistic Regression Imported successfully
2024-04-15 17:01:54,883:INFO:Starting cross validation
2024-04-15 17:01:54,885:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:01:54,988:INFO:Calculating mean and std
2024-04-15 17:01:54,989:INFO:Creating metrics dataframe
2024-04-15 17:01:54,992:INFO:Uploading results into container
2024-04-15 17:01:54,992:INFO:Uploading model into container now
2024-04-15 17:01:54,993:INFO:_master_model_container: 1
2024-04-15 17:01:54,993:INFO:_display_container: 2
2024-04-15 17:01:54,993:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1384, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:01:54,993:INFO:create_model() successfully completed......................................
2024-04-15 17:01:55,339:INFO:SubProcess create_model() end ==================================
2024-04-15 17:01:55,339:INFO:Creating metrics dataframe
2024-04-15 17:01:55,348:INFO:Initializing Decision Tree Classifier
2024-04-15 17:01:55,348:INFO:Total runtime is 0.008135175704956055 minutes
2024-04-15 17:01:55,351:INFO:SubProcess create_model() called ==================================
2024-04-15 17:01:55,351:INFO:Initializing create_model()
2024-04-15 17:01:55,351:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597C9E220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:01:55,352:INFO:Checking exceptions
2024-04-15 17:01:55,352:INFO:Importing libraries
2024-04-15 17:01:55,352:INFO:Copying training dataset
2024-04-15 17:01:55,357:INFO:Defining folds
2024-04-15 17:01:55,357:INFO:Declaring metric variables
2024-04-15 17:01:55,360:INFO:Importing untrained model
2024-04-15 17:01:55,363:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:01:55,368:INFO:Starting cross validation
2024-04-15 17:01:55,369:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:01:55,519:INFO:Calculating mean and std
2024-04-15 17:01:55,520:INFO:Creating metrics dataframe
2024-04-15 17:01:55,523:INFO:Uploading results into container
2024-04-15 17:01:55,523:INFO:Uploading model into container now
2024-04-15 17:01:55,524:INFO:_master_model_container: 2
2024-04-15 17:01:55,524:INFO:_display_container: 2
2024-04-15 17:01:55,524:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1384, splitter='best')
2024-04-15 17:01:55,524:INFO:create_model() successfully completed......................................
2024-04-15 17:01:55,859:INFO:SubProcess create_model() end ==================================
2024-04-15 17:01:55,859:INFO:Creating metrics dataframe
2024-04-15 17:01:55,873:INFO:Initializing create_model()
2024-04-15 17:01:55,873:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1384, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:01:55,874:INFO:Checking exceptions
2024-04-15 17:01:55,875:INFO:Importing libraries
2024-04-15 17:01:55,875:INFO:Copying training dataset
2024-04-15 17:01:55,880:INFO:Defining folds
2024-04-15 17:01:55,880:INFO:Declaring metric variables
2024-04-15 17:01:55,880:INFO:Importing untrained model
2024-04-15 17:01:55,880:INFO:Declaring custom model
2024-04-15 17:01:55,880:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:01:55,881:INFO:Cross validation set to False
2024-04-15 17:01:55,881:INFO:Fitting Model
2024-04-15 17:01:55,937:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1384, splitter='best')
2024-04-15 17:01:55,937:INFO:create_model() successfully completed......................................
2024-04-15 17:01:56,252:INFO:Initializing create_model()
2024-04-15 17:01:56,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1384, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:01:56,252:INFO:Checking exceptions
2024-04-15 17:01:56,254:INFO:Importing libraries
2024-04-15 17:01:56,254:INFO:Copying training dataset
2024-04-15 17:01:56,259:INFO:Defining folds
2024-04-15 17:01:56,259:INFO:Declaring metric variables
2024-04-15 17:01:56,259:INFO:Importing untrained model
2024-04-15 17:01:56,259:INFO:Declaring custom model
2024-04-15 17:01:56,259:INFO:Logistic Regression Imported successfully
2024-04-15 17:01:56,260:INFO:Cross validation set to False
2024-04-15 17:01:56,260:INFO:Fitting Model
2024-04-15 17:01:56,276:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1384, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:01:56,276:INFO:create_model() successfully completed......................................
2024-04-15 17:01:56,607:INFO:_master_model_container: 2
2024-04-15 17:01:56,607:INFO:_display_container: 2
2024-04-15 17:01:56,607:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1384, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1384, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:01:56,608:INFO:compare_models() successfully completed......................................
2024-04-15 17:01:56,609:INFO:Initializing plot_model()
2024-04-15 17:01:56,609:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1384, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, system=True)
2024-04-15 17:01:56,609:INFO:Checking exceptions
2024-04-15 17:01:56,613:INFO:Preloading libraries
2024-04-15 17:01:56,614:INFO:Copying training dataset
2024-04-15 17:01:56,614:INFO:Plot type: parameter
2024-04-15 17:01:56,617:INFO:Visual Rendered Successfully
2024-04-15 17:01:56,938:INFO:plot_model() successfully completed......................................
2024-04-15 17:01:56,983:INFO:Initializing predict_model()
2024-04-15 17:01:56,984:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1384, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E560B80>)
2024-04-15 17:01:56,984:INFO:Checking exceptions
2024-04-15 17:01:56,984:INFO:Preloading libraries
2024-04-15 17:01:57,524:INFO:Initializing plot_model()
2024-04-15 17:01:57,524:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1384, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, system=True)
2024-04-15 17:01:57,524:INFO:Checking exceptions
2024-04-15 17:01:57,529:INFO:Preloading libraries
2024-04-15 17:01:57,529:INFO:Copying training dataset
2024-04-15 17:01:57,529:INFO:Plot type: parameter
2024-04-15 17:01:57,532:INFO:Visual Rendered Successfully
2024-04-15 17:01:57,848:INFO:plot_model() successfully completed......................................
2024-04-15 17:01:57,866:INFO:Initializing predict_model()
2024-04-15 17:01:57,867:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C586AB1F40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1384, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590583820>)
2024-04-15 17:01:57,867:INFO:Checking exceptions
2024-04-15 17:01:57,867:INFO:Preloading libraries
2024-04-15 17:01:58,367:INFO:Initializing load_model()
2024-04-15 17:01:58,367:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:01:58,429:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 17:02:01,464:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3246980847.py:84: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 17:05:25,942:INFO:PyCaret ClassificationExperiment
2024-04-15 17:05:25,943:INFO:Logging name: clf-default-name
2024-04-15 17:05:25,943:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 17:05:25,943:INFO:version 3.2.0
2024-04-15 17:05:25,943:INFO:Initializing setup()
2024-04-15 17:05:25,943:INFO:self.USI: bf58
2024-04-15 17:05:25,943:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 17:05:25,943:INFO:Checking environment
2024-04-15 17:05:25,943:INFO:python_version: 3.8.0
2024-04-15 17:05:25,943:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 17:05:25,943:INFO:machine: AMD64
2024-04-15 17:05:25,943:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:05:25,952:INFO:Memory: svmem(total=34301427712, available=17983987712, percent=47.6, used=16317440000, free=17983987712)
2024-04-15 17:05:25,952:INFO:Physical Core: 6
2024-04-15 17:05:25,952:INFO:Logical Core: 12
2024-04-15 17:05:25,952:INFO:Checking libraries
2024-04-15 17:05:25,952:INFO:System:
2024-04-15 17:05:25,952:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:05:25,952:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:05:25,952:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:05:25,952:INFO:PyCaret required dependencies:
2024-04-15 17:05:25,952:INFO:                 pip: 19.2.3
2024-04-15 17:05:25,952:INFO:          setuptools: 41.2.0
2024-04-15 17:05:25,952:INFO:             pycaret: 3.2.0
2024-04-15 17:05:25,952:INFO:             IPython: 8.12.3
2024-04-15 17:05:25,952:INFO:          ipywidgets: 8.1.2
2024-04-15 17:05:25,952:INFO:                tqdm: 4.66.2
2024-04-15 17:05:25,952:INFO:               numpy: 1.24.4
2024-04-15 17:05:25,953:INFO:              pandas: 1.5.3
2024-04-15 17:05:25,953:INFO:              jinja2: 3.1.3
2024-04-15 17:05:25,953:INFO:               scipy: 1.10.1
2024-04-15 17:05:25,953:INFO:              joblib: 1.3.2
2024-04-15 17:05:25,953:INFO:             sklearn: 1.2.0
2024-04-15 17:05:25,953:INFO:                pyod: 1.1.3
2024-04-15 17:05:25,953:INFO:            imblearn: 0.12.2
2024-04-15 17:05:25,953:INFO:   category_encoders: 2.6.3
2024-04-15 17:05:25,953:INFO:            lightgbm: 4.3.0
2024-04-15 17:05:25,953:INFO:               numba: 0.58.1
2024-04-15 17:05:25,953:INFO:            requests: 2.31.0
2024-04-15 17:05:25,953:INFO:          matplotlib: 3.6.0
2024-04-15 17:05:25,953:INFO:          scikitplot: 0.3.7
2024-04-15 17:05:25,953:INFO:         yellowbrick: 1.5
2024-04-15 17:05:25,953:INFO:              plotly: 5.20.0
2024-04-15 17:05:25,953:INFO:    plotly-resampler: Not installed
2024-04-15 17:05:25,953:INFO:             kaleido: 0.2.1
2024-04-15 17:05:25,953:INFO:           schemdraw: 0.15
2024-04-15 17:05:25,953:INFO:         statsmodels: 0.14.1
2024-04-15 17:05:25,953:INFO:              sktime: 0.21.1
2024-04-15 17:05:25,953:INFO:               tbats: 1.1.3
2024-04-15 17:05:25,953:INFO:            pmdarima: 2.0.4
2024-04-15 17:05:25,953:INFO:              psutil: 5.9.8
2024-04-15 17:05:25,953:INFO:          markupsafe: 2.1.5
2024-04-15 17:05:25,953:INFO:             pickle5: Not installed
2024-04-15 17:05:25,953:INFO:         cloudpickle: 3.0.0
2024-04-15 17:05:25,954:INFO:         deprecation: 2.1.0
2024-04-15 17:05:25,954:INFO:              xxhash: 3.4.1
2024-04-15 17:05:25,954:INFO:           wurlitzer: Not installed
2024-04-15 17:05:25,954:INFO:PyCaret optional dependencies:
2024-04-15 17:05:25,954:INFO:                shap: Not installed
2024-04-15 17:05:25,954:INFO:           interpret: Not installed
2024-04-15 17:05:25,954:INFO:                umap: Not installed
2024-04-15 17:05:25,954:INFO:     ydata_profiling: Not installed
2024-04-15 17:05:25,954:INFO:  explainerdashboard: Not installed
2024-04-15 17:05:25,954:INFO:             autoviz: Not installed
2024-04-15 17:05:25,954:INFO:           fairlearn: Not installed
2024-04-15 17:05:25,954:INFO:          deepchecks: Not installed
2024-04-15 17:05:25,954:INFO:             xgboost: Not installed
2024-04-15 17:05:25,954:INFO:            catboost: Not installed
2024-04-15 17:05:25,954:INFO:              kmodes: Not installed
2024-04-15 17:05:25,954:INFO:             mlxtend: Not installed
2024-04-15 17:05:25,954:INFO:       statsforecast: Not installed
2024-04-15 17:05:25,954:INFO:        tune_sklearn: Not installed
2024-04-15 17:05:25,954:INFO:                 ray: Not installed
2024-04-15 17:05:25,954:INFO:            hyperopt: Not installed
2024-04-15 17:05:25,954:INFO:              optuna: Not installed
2024-04-15 17:05:25,954:INFO:               skopt: Not installed
2024-04-15 17:05:25,954:INFO:              mlflow: 2.11.3
2024-04-15 17:05:25,954:INFO:              gradio: Not installed
2024-04-15 17:05:25,954:INFO:             fastapi: Not installed
2024-04-15 17:05:25,954:INFO:             uvicorn: Not installed
2024-04-15 17:05:25,954:INFO:              m2cgen: Not installed
2024-04-15 17:05:25,954:INFO:           evidently: Not installed
2024-04-15 17:05:25,954:INFO:               fugue: Not installed
2024-04-15 17:05:25,954:INFO:           streamlit: 1.33.0
2024-04-15 17:05:25,955:INFO:             prophet: Not installed
2024-04-15 17:05:25,955:INFO:None
2024-04-15 17:05:25,955:INFO:Set up data.
2024-04-15 17:05:25,962:INFO:Set up folding strategy.
2024-04-15 17:05:25,962:INFO:Set up train/test split.
2024-04-15 17:05:25,962:INFO:Set up data.
2024-04-15 17:05:25,967:INFO:Set up index.
2024-04-15 17:05:25,968:INFO:Assigning column types.
2024-04-15 17:05:25,971:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:05:26,018:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:05:26,019:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:05:26,047:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,047:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,089:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:05:26,091:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:05:26,115:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,115:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,115:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:05:26,156:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:05:26,179:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,220:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:05:26,243:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,244:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,244:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:05:26,309:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,310:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,371:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,372:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,373:INFO:Preparing preprocessing pipeline...
2024-04-15 17:05:26,374:INFO:Set up simple imputation.
2024-04-15 17:05:26,374:INFO:Set up feature normalization.
2024-04-15 17:05:26,391:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:05:26,394:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:05:26,395:INFO:Creating final display dataframe.
2024-04-15 17:05:26,460:INFO:Setup _display_container:                     Description             Value
0                    Session id              8147
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              bf58
2024-04-15 17:05:26,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,588:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,588:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:05:26,589:INFO:setup() successfully completed in 0.65s...............
2024-04-15 17:05:26,589:INFO:Initializing compare_models()
2024-04-15 17:05:26,589:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:05:26,589:INFO:Checking exceptions
2024-04-15 17:05:26,592:INFO:Preparing display monitor
2024-04-15 17:05:26,611:INFO:Initializing Logistic Regression
2024-04-15 17:05:26,611:INFO:Total runtime is 0.0 minutes
2024-04-15 17:05:26,614:INFO:SubProcess create_model() called ==================================
2024-04-15 17:05:26,614:INFO:Initializing create_model()
2024-04-15 17:05:26,614:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58896A4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:05:26,615:INFO:Checking exceptions
2024-04-15 17:05:26,615:INFO:Importing libraries
2024-04-15 17:05:26,615:INFO:Copying training dataset
2024-04-15 17:05:26,621:INFO:Defining folds
2024-04-15 17:05:26,621:INFO:Declaring metric variables
2024-04-15 17:05:26,625:INFO:Importing untrained model
2024-04-15 17:05:26,629:INFO:Logistic Regression Imported successfully
2024-04-15 17:05:26,635:INFO:Starting cross validation
2024-04-15 17:05:26,636:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:05:26,742:INFO:Calculating mean and std
2024-04-15 17:05:26,742:INFO:Creating metrics dataframe
2024-04-15 17:05:26,745:INFO:Uploading results into container
2024-04-15 17:05:26,745:INFO:Uploading model into container now
2024-04-15 17:05:26,746:INFO:_master_model_container: 1
2024-04-15 17:05:26,746:INFO:_display_container: 2
2024-04-15 17:05:26,746:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8147, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:05:26,746:INFO:create_model() successfully completed......................................
2024-04-15 17:05:27,141:INFO:SubProcess create_model() end ==================================
2024-04-15 17:05:27,141:INFO:Creating metrics dataframe
2024-04-15 17:05:27,151:INFO:Initializing Decision Tree Classifier
2024-04-15 17:05:27,151:INFO:Total runtime is 0.009000702699025472 minutes
2024-04-15 17:05:27,154:INFO:SubProcess create_model() called ==================================
2024-04-15 17:05:27,155:INFO:Initializing create_model()
2024-04-15 17:05:27,155:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C58896A4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:05:27,155:INFO:Checking exceptions
2024-04-15 17:05:27,155:INFO:Importing libraries
2024-04-15 17:05:27,155:INFO:Copying training dataset
2024-04-15 17:05:27,160:INFO:Defining folds
2024-04-15 17:05:27,160:INFO:Declaring metric variables
2024-04-15 17:05:27,163:INFO:Importing untrained model
2024-04-15 17:05:27,166:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:05:27,172:INFO:Starting cross validation
2024-04-15 17:05:27,173:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:05:27,334:INFO:Calculating mean and std
2024-04-15 17:05:27,335:INFO:Creating metrics dataframe
2024-04-15 17:05:27,338:INFO:Uploading results into container
2024-04-15 17:05:27,339:INFO:Uploading model into container now
2024-04-15 17:05:27,339:INFO:_master_model_container: 2
2024-04-15 17:05:27,339:INFO:_display_container: 2
2024-04-15 17:05:27,340:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8147, splitter='best')
2024-04-15 17:05:27,340:INFO:create_model() successfully completed......................................
2024-04-15 17:05:27,685:INFO:SubProcess create_model() end ==================================
2024-04-15 17:05:27,685:INFO:Creating metrics dataframe
2024-04-15 17:05:27,700:INFO:Initializing create_model()
2024-04-15 17:05:27,700:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8147, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:05:27,701:INFO:Checking exceptions
2024-04-15 17:05:27,702:INFO:Importing libraries
2024-04-15 17:05:27,703:INFO:Copying training dataset
2024-04-15 17:05:27,709:INFO:Defining folds
2024-04-15 17:05:27,709:INFO:Declaring metric variables
2024-04-15 17:05:27,709:INFO:Importing untrained model
2024-04-15 17:05:27,709:INFO:Declaring custom model
2024-04-15 17:05:27,710:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:05:27,710:INFO:Cross validation set to False
2024-04-15 17:05:27,710:INFO:Fitting Model
2024-04-15 17:05:27,769:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8147, splitter='best')
2024-04-15 17:05:27,770:INFO:create_model() successfully completed......................................
2024-04-15 17:05:28,092:INFO:Initializing create_model()
2024-04-15 17:05:28,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8147, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:05:28,092:INFO:Checking exceptions
2024-04-15 17:05:28,094:INFO:Importing libraries
2024-04-15 17:05:28,094:INFO:Copying training dataset
2024-04-15 17:05:28,098:INFO:Defining folds
2024-04-15 17:05:28,098:INFO:Declaring metric variables
2024-04-15 17:05:28,098:INFO:Importing untrained model
2024-04-15 17:05:28,099:INFO:Declaring custom model
2024-04-15 17:05:28,099:INFO:Logistic Regression Imported successfully
2024-04-15 17:05:28,100:INFO:Cross validation set to False
2024-04-15 17:05:28,100:INFO:Fitting Model
2024-04-15 17:05:28,116:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8147, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:05:28,116:INFO:create_model() successfully completed......................................
2024-04-15 17:05:28,454:INFO:_master_model_container: 2
2024-04-15 17:05:28,454:INFO:_display_container: 2
2024-04-15 17:05:28,455:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8147, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8147, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:05:28,455:INFO:compare_models() successfully completed......................................
2024-04-15 17:05:28,456:INFO:Initializing plot_model()
2024-04-15 17:05:28,456:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8147, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, system=True)
2024-04-15 17:05:28,456:INFO:Checking exceptions
2024-04-15 17:05:28,461:INFO:Preloading libraries
2024-04-15 17:05:28,462:INFO:Copying training dataset
2024-04-15 17:05:28,462:INFO:Plot type: parameter
2024-04-15 17:05:28,465:INFO:Visual Rendered Successfully
2024-04-15 17:05:28,791:INFO:plot_model() successfully completed......................................
2024-04-15 17:05:28,815:INFO:Initializing predict_model()
2024-04-15 17:05:28,815:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8147, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591EE70D0>)
2024-04-15 17:05:28,816:INFO:Checking exceptions
2024-04-15 17:05:28,816:INFO:Preloading libraries
2024-04-15 17:05:29,323:INFO:Initializing plot_model()
2024-04-15 17:05:29,323:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8147, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, system=True)
2024-04-15 17:05:29,323:INFO:Checking exceptions
2024-04-15 17:05:29,327:INFO:Preloading libraries
2024-04-15 17:05:29,327:INFO:Copying training dataset
2024-04-15 17:05:29,327:INFO:Plot type: parameter
2024-04-15 17:05:29,331:INFO:Visual Rendered Successfully
2024-04-15 17:05:29,650:INFO:plot_model() successfully completed......................................
2024-04-15 17:05:29,672:INFO:Initializing predict_model()
2024-04-15 17:05:29,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597D93CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8147, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591EE7CA0>)
2024-04-15 17:05:29,672:INFO:Checking exceptions
2024-04-15 17:05:29,672:INFO:Preloading libraries
2024-04-15 17:05:30,180:INFO:Initializing load_model()
2024-04-15 17:05:30,180:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:05:30,244:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 17:07:13,945:INFO:PyCaret ClassificationExperiment
2024-04-15 17:07:13,945:INFO:Logging name: clf-default-name
2024-04-15 17:07:13,945:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 17:07:13,945:INFO:version 3.2.0
2024-04-15 17:07:13,946:INFO:Initializing setup()
2024-04-15 17:07:13,946:INFO:self.USI: 3b0f
2024-04-15 17:07:13,946:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 17:07:13,946:INFO:Checking environment
2024-04-15 17:07:13,946:INFO:python_version: 3.8.0
2024-04-15 17:07:13,946:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 17:07:13,946:INFO:machine: AMD64
2024-04-15 17:07:13,946:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:07:13,955:INFO:Memory: svmem(total=34301427712, available=18031243264, percent=47.4, used=16270184448, free=18031243264)
2024-04-15 17:07:13,955:INFO:Physical Core: 6
2024-04-15 17:07:13,955:INFO:Logical Core: 12
2024-04-15 17:07:13,955:INFO:Checking libraries
2024-04-15 17:07:13,955:INFO:System:
2024-04-15 17:07:13,955:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:07:13,955:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:07:13,955:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:07:13,955:INFO:PyCaret required dependencies:
2024-04-15 17:07:13,955:INFO:                 pip: 19.2.3
2024-04-15 17:07:13,955:INFO:          setuptools: 41.2.0
2024-04-15 17:07:13,955:INFO:             pycaret: 3.2.0
2024-04-15 17:07:13,955:INFO:             IPython: 8.12.3
2024-04-15 17:07:13,955:INFO:          ipywidgets: 8.1.2
2024-04-15 17:07:13,955:INFO:                tqdm: 4.66.2
2024-04-15 17:07:13,956:INFO:               numpy: 1.24.4
2024-04-15 17:07:13,956:INFO:              pandas: 1.5.3
2024-04-15 17:07:13,956:INFO:              jinja2: 3.1.3
2024-04-15 17:07:13,956:INFO:               scipy: 1.10.1
2024-04-15 17:07:13,956:INFO:              joblib: 1.3.2
2024-04-15 17:07:13,956:INFO:             sklearn: 1.2.0
2024-04-15 17:07:13,956:INFO:                pyod: 1.1.3
2024-04-15 17:07:13,956:INFO:            imblearn: 0.12.2
2024-04-15 17:07:13,956:INFO:   category_encoders: 2.6.3
2024-04-15 17:07:13,956:INFO:            lightgbm: 4.3.0
2024-04-15 17:07:13,956:INFO:               numba: 0.58.1
2024-04-15 17:07:13,956:INFO:            requests: 2.31.0
2024-04-15 17:07:13,956:INFO:          matplotlib: 3.6.0
2024-04-15 17:07:13,956:INFO:          scikitplot: 0.3.7
2024-04-15 17:07:13,956:INFO:         yellowbrick: 1.5
2024-04-15 17:07:13,956:INFO:              plotly: 5.20.0
2024-04-15 17:07:13,956:INFO:    plotly-resampler: Not installed
2024-04-15 17:07:13,956:INFO:             kaleido: 0.2.1
2024-04-15 17:07:13,956:INFO:           schemdraw: 0.15
2024-04-15 17:07:13,956:INFO:         statsmodels: 0.14.1
2024-04-15 17:07:13,956:INFO:              sktime: 0.21.1
2024-04-15 17:07:13,956:INFO:               tbats: 1.1.3
2024-04-15 17:07:13,956:INFO:            pmdarima: 2.0.4
2024-04-15 17:07:13,956:INFO:              psutil: 5.9.8
2024-04-15 17:07:13,956:INFO:          markupsafe: 2.1.5
2024-04-15 17:07:13,956:INFO:             pickle5: Not installed
2024-04-15 17:07:13,956:INFO:         cloudpickle: 3.0.0
2024-04-15 17:07:13,956:INFO:         deprecation: 2.1.0
2024-04-15 17:07:13,956:INFO:              xxhash: 3.4.1
2024-04-15 17:07:13,956:INFO:           wurlitzer: Not installed
2024-04-15 17:07:13,956:INFO:PyCaret optional dependencies:
2024-04-15 17:07:13,957:INFO:                shap: Not installed
2024-04-15 17:07:13,957:INFO:           interpret: Not installed
2024-04-15 17:07:13,957:INFO:                umap: Not installed
2024-04-15 17:07:13,957:INFO:     ydata_profiling: Not installed
2024-04-15 17:07:13,957:INFO:  explainerdashboard: Not installed
2024-04-15 17:07:13,957:INFO:             autoviz: Not installed
2024-04-15 17:07:13,957:INFO:           fairlearn: Not installed
2024-04-15 17:07:13,957:INFO:          deepchecks: Not installed
2024-04-15 17:07:13,957:INFO:             xgboost: Not installed
2024-04-15 17:07:13,957:INFO:            catboost: Not installed
2024-04-15 17:07:13,957:INFO:              kmodes: Not installed
2024-04-15 17:07:13,957:INFO:             mlxtend: Not installed
2024-04-15 17:07:13,957:INFO:       statsforecast: Not installed
2024-04-15 17:07:13,957:INFO:        tune_sklearn: Not installed
2024-04-15 17:07:13,957:INFO:                 ray: Not installed
2024-04-15 17:07:13,957:INFO:            hyperopt: Not installed
2024-04-15 17:07:13,957:INFO:              optuna: Not installed
2024-04-15 17:07:13,957:INFO:               skopt: Not installed
2024-04-15 17:07:13,957:INFO:              mlflow: 2.11.3
2024-04-15 17:07:13,957:INFO:              gradio: Not installed
2024-04-15 17:07:13,957:INFO:             fastapi: Not installed
2024-04-15 17:07:13,957:INFO:             uvicorn: Not installed
2024-04-15 17:07:13,957:INFO:              m2cgen: Not installed
2024-04-15 17:07:13,957:INFO:           evidently: Not installed
2024-04-15 17:07:13,957:INFO:               fugue: Not installed
2024-04-15 17:07:13,957:INFO:           streamlit: 1.33.0
2024-04-15 17:07:13,957:INFO:             prophet: Not installed
2024-04-15 17:07:13,957:INFO:None
2024-04-15 17:07:13,957:INFO:Set up data.
2024-04-15 17:07:13,964:INFO:Set up folding strategy.
2024-04-15 17:07:13,964:INFO:Set up train/test split.
2024-04-15 17:07:13,964:INFO:Set up data.
2024-04-15 17:07:13,969:INFO:Set up index.
2024-04-15 17:07:13,969:INFO:Assigning column types.
2024-04-15 17:07:13,972:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:07:14,016:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:07:14,018:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:07:14,048:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,048:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,088:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:07:14,089:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:07:14,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,112:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:07:14,150:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:07:14,174:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,175:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,214:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:07:14,239:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,239:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:07:14,299:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,299:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,364:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,366:INFO:Preparing preprocessing pipeline...
2024-04-15 17:07:14,367:INFO:Set up simple imputation.
2024-04-15 17:07:14,367:INFO:Set up feature normalization.
2024-04-15 17:07:14,385:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:07:14,388:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:07:14,388:INFO:Creating final display dataframe.
2024-04-15 17:07:14,453:INFO:Setup _display_container:                     Description             Value
0                    Session id              1632
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              3b0f
2024-04-15 17:07:14,522:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,523:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,587:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:07:14,588:INFO:setup() successfully completed in 0.64s...............
2024-04-15 17:07:14,588:INFO:Initializing compare_models()
2024-04-15 17:07:14,588:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:07:14,588:INFO:Checking exceptions
2024-04-15 17:07:14,592:INFO:Preparing display monitor
2024-04-15 17:07:14,608:INFO:Initializing Logistic Regression
2024-04-15 17:07:14,608:INFO:Total runtime is 0.0 minutes
2024-04-15 17:07:14,611:INFO:SubProcess create_model() called ==================================
2024-04-15 17:07:14,611:INFO:Initializing create_model()
2024-04-15 17:07:14,612:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597C7A370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:07:14,612:INFO:Checking exceptions
2024-04-15 17:07:14,612:INFO:Importing libraries
2024-04-15 17:07:14,612:INFO:Copying training dataset
2024-04-15 17:07:14,617:INFO:Defining folds
2024-04-15 17:07:14,617:INFO:Declaring metric variables
2024-04-15 17:07:14,621:INFO:Importing untrained model
2024-04-15 17:07:14,624:INFO:Logistic Regression Imported successfully
2024-04-15 17:07:14,630:INFO:Starting cross validation
2024-04-15 17:07:14,631:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:07:14,737:INFO:Calculating mean and std
2024-04-15 17:07:14,738:INFO:Creating metrics dataframe
2024-04-15 17:07:14,740:INFO:Uploading results into container
2024-04-15 17:07:14,741:INFO:Uploading model into container now
2024-04-15 17:07:14,741:INFO:_master_model_container: 1
2024-04-15 17:07:14,741:INFO:_display_container: 2
2024-04-15 17:07:14,741:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:07:14,741:INFO:create_model() successfully completed......................................
2024-04-15 17:07:15,101:INFO:SubProcess create_model() end ==================================
2024-04-15 17:07:15,101:INFO:Creating metrics dataframe
2024-04-15 17:07:15,109:INFO:Initializing Decision Tree Classifier
2024-04-15 17:07:15,109:INFO:Total runtime is 0.008351985613505046 minutes
2024-04-15 17:07:15,112:INFO:SubProcess create_model() called ==================================
2024-04-15 17:07:15,112:INFO:Initializing create_model()
2024-04-15 17:07:15,113:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C597C7A370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:07:15,113:INFO:Checking exceptions
2024-04-15 17:07:15,113:INFO:Importing libraries
2024-04-15 17:07:15,113:INFO:Copying training dataset
2024-04-15 17:07:15,117:INFO:Defining folds
2024-04-15 17:07:15,117:INFO:Declaring metric variables
2024-04-15 17:07:15,120:INFO:Importing untrained model
2024-04-15 17:07:15,123:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:07:15,129:INFO:Starting cross validation
2024-04-15 17:07:15,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:07:15,335:INFO:Calculating mean and std
2024-04-15 17:07:15,336:INFO:Creating metrics dataframe
2024-04-15 17:07:15,341:INFO:Uploading results into container
2024-04-15 17:07:15,342:INFO:Uploading model into container now
2024-04-15 17:07:15,342:INFO:_master_model_container: 2
2024-04-15 17:07:15,342:INFO:_display_container: 2
2024-04-15 17:07:15,342:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1632, splitter='best')
2024-04-15 17:07:15,342:INFO:create_model() successfully completed......................................
2024-04-15 17:07:15,723:INFO:SubProcess create_model() end ==================================
2024-04-15 17:07:15,724:INFO:Creating metrics dataframe
2024-04-15 17:07:15,736:INFO:Initializing create_model()
2024-04-15 17:07:15,737:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1632, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:07:15,737:INFO:Checking exceptions
2024-04-15 17:07:15,738:INFO:Importing libraries
2024-04-15 17:07:15,738:INFO:Copying training dataset
2024-04-15 17:07:15,742:INFO:Defining folds
2024-04-15 17:07:15,743:INFO:Declaring metric variables
2024-04-15 17:07:15,743:INFO:Importing untrained model
2024-04-15 17:07:15,743:INFO:Declaring custom model
2024-04-15 17:07:15,743:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:07:15,744:INFO:Cross validation set to False
2024-04-15 17:07:15,744:INFO:Fitting Model
2024-04-15 17:07:15,798:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1632, splitter='best')
2024-04-15 17:07:15,799:INFO:create_model() successfully completed......................................
2024-04-15 17:07:16,132:INFO:Initializing create_model()
2024-04-15 17:07:16,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:07:16,132:INFO:Checking exceptions
2024-04-15 17:07:16,134:INFO:Importing libraries
2024-04-15 17:07:16,134:INFO:Copying training dataset
2024-04-15 17:07:16,139:INFO:Defining folds
2024-04-15 17:07:16,139:INFO:Declaring metric variables
2024-04-15 17:07:16,140:INFO:Importing untrained model
2024-04-15 17:07:16,140:INFO:Declaring custom model
2024-04-15 17:07:16,140:INFO:Logistic Regression Imported successfully
2024-04-15 17:07:16,141:INFO:Cross validation set to False
2024-04-15 17:07:16,141:INFO:Fitting Model
2024-04-15 17:07:16,157:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:07:16,157:INFO:create_model() successfully completed......................................
2024-04-15 17:07:16,499:INFO:_master_model_container: 2
2024-04-15 17:07:16,499:INFO:_display_container: 2
2024-04-15 17:07:16,499:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1632, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:07:16,499:INFO:compare_models() successfully completed......................................
2024-04-15 17:07:16,501:INFO:Initializing plot_model()
2024-04-15 17:07:16,501:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1632, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, system=True)
2024-04-15 17:07:16,501:INFO:Checking exceptions
2024-04-15 17:07:16,505:INFO:Preloading libraries
2024-04-15 17:07:16,506:INFO:Copying training dataset
2024-04-15 17:07:16,506:INFO:Plot type: parameter
2024-04-15 17:07:16,509:INFO:Visual Rendered Successfully
2024-04-15 17:07:16,852:INFO:plot_model() successfully completed......................................
2024-04-15 17:07:16,881:INFO:Initializing predict_model()
2024-04-15 17:07:16,882:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=1632, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597E2FE50>)
2024-04-15 17:07:16,882:INFO:Checking exceptions
2024-04-15 17:07:16,882:INFO:Preloading libraries
2024-04-15 17:07:17,510:INFO:Initializing plot_model()
2024-04-15 17:07:17,510:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, system=True)
2024-04-15 17:07:17,510:INFO:Checking exceptions
2024-04-15 17:07:17,515:INFO:Preloading libraries
2024-04-15 17:07:17,515:INFO:Copying training dataset
2024-04-15 17:07:17,515:INFO:Plot type: parameter
2024-04-15 17:07:17,519:INFO:Visual Rendered Successfully
2024-04-15 17:07:17,839:INFO:plot_model() successfully completed......................................
2024-04-15 17:07:17,861:INFO:Initializing predict_model()
2024-04-15 17:07:17,861:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596D89550>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1632, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5903AB160>)
2024-04-15 17:07:17,861:INFO:Checking exceptions
2024-04-15 17:07:17,861:INFO:Preloading libraries
2024-04-15 17:07:18,495:INFO:Initializing load_model()
2024-04-15 17:07:18,495:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:07:18,559:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 17:08:44,522:INFO:PyCaret ClassificationExperiment
2024-04-15 17:08:44,522:INFO:Logging name: clf-default-name
2024-04-15 17:08:44,522:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 17:08:44,522:INFO:version 3.2.0
2024-04-15 17:08:44,522:INFO:Initializing setup()
2024-04-15 17:08:44,523:INFO:self.USI: 77a5
2024-04-15 17:08:44,523:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 17:08:44,523:INFO:Checking environment
2024-04-15 17:08:44,523:INFO:python_version: 3.8.0
2024-04-15 17:08:44,523:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 17:08:44,523:INFO:machine: AMD64
2024-04-15 17:08:44,523:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:08:44,531:INFO:Memory: svmem(total=34301427712, available=17945772032, percent=47.7, used=16355655680, free=17945772032)
2024-04-15 17:08:44,531:INFO:Physical Core: 6
2024-04-15 17:08:44,531:INFO:Logical Core: 12
2024-04-15 17:08:44,531:INFO:Checking libraries
2024-04-15 17:08:44,531:INFO:System:
2024-04-15 17:08:44,531:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:08:44,531:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:08:44,531:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:08:44,531:INFO:PyCaret required dependencies:
2024-04-15 17:08:44,531:INFO:                 pip: 19.2.3
2024-04-15 17:08:44,531:INFO:          setuptools: 41.2.0
2024-04-15 17:08:44,531:INFO:             pycaret: 3.2.0
2024-04-15 17:08:44,531:INFO:             IPython: 8.12.3
2024-04-15 17:08:44,531:INFO:          ipywidgets: 8.1.2
2024-04-15 17:08:44,531:INFO:                tqdm: 4.66.2
2024-04-15 17:08:44,531:INFO:               numpy: 1.24.4
2024-04-15 17:08:44,531:INFO:              pandas: 1.5.3
2024-04-15 17:08:44,531:INFO:              jinja2: 3.1.3
2024-04-15 17:08:44,531:INFO:               scipy: 1.10.1
2024-04-15 17:08:44,531:INFO:              joblib: 1.3.2
2024-04-15 17:08:44,531:INFO:             sklearn: 1.2.0
2024-04-15 17:08:44,531:INFO:                pyod: 1.1.3
2024-04-15 17:08:44,532:INFO:            imblearn: 0.12.2
2024-04-15 17:08:44,532:INFO:   category_encoders: 2.6.3
2024-04-15 17:08:44,532:INFO:            lightgbm: 4.3.0
2024-04-15 17:08:44,532:INFO:               numba: 0.58.1
2024-04-15 17:08:44,532:INFO:            requests: 2.31.0
2024-04-15 17:08:44,532:INFO:          matplotlib: 3.6.0
2024-04-15 17:08:44,532:INFO:          scikitplot: 0.3.7
2024-04-15 17:08:44,532:INFO:         yellowbrick: 1.5
2024-04-15 17:08:44,532:INFO:              plotly: 5.20.0
2024-04-15 17:08:44,532:INFO:    plotly-resampler: Not installed
2024-04-15 17:08:44,532:INFO:             kaleido: 0.2.1
2024-04-15 17:08:44,532:INFO:           schemdraw: 0.15
2024-04-15 17:08:44,532:INFO:         statsmodels: 0.14.1
2024-04-15 17:08:44,532:INFO:              sktime: 0.21.1
2024-04-15 17:08:44,532:INFO:               tbats: 1.1.3
2024-04-15 17:08:44,532:INFO:            pmdarima: 2.0.4
2024-04-15 17:08:44,532:INFO:              psutil: 5.9.8
2024-04-15 17:08:44,532:INFO:          markupsafe: 2.1.5
2024-04-15 17:08:44,532:INFO:             pickle5: Not installed
2024-04-15 17:08:44,532:INFO:         cloudpickle: 3.0.0
2024-04-15 17:08:44,532:INFO:         deprecation: 2.1.0
2024-04-15 17:08:44,532:INFO:              xxhash: 3.4.1
2024-04-15 17:08:44,532:INFO:           wurlitzer: Not installed
2024-04-15 17:08:44,532:INFO:PyCaret optional dependencies:
2024-04-15 17:08:44,532:INFO:                shap: Not installed
2024-04-15 17:08:44,532:INFO:           interpret: Not installed
2024-04-15 17:08:44,532:INFO:                umap: Not installed
2024-04-15 17:08:44,532:INFO:     ydata_profiling: Not installed
2024-04-15 17:08:44,532:INFO:  explainerdashboard: Not installed
2024-04-15 17:08:44,532:INFO:             autoviz: Not installed
2024-04-15 17:08:44,532:INFO:           fairlearn: Not installed
2024-04-15 17:08:44,532:INFO:          deepchecks: Not installed
2024-04-15 17:08:44,532:INFO:             xgboost: Not installed
2024-04-15 17:08:44,532:INFO:            catboost: Not installed
2024-04-15 17:08:44,532:INFO:              kmodes: Not installed
2024-04-15 17:08:44,532:INFO:             mlxtend: Not installed
2024-04-15 17:08:44,532:INFO:       statsforecast: Not installed
2024-04-15 17:08:44,532:INFO:        tune_sklearn: Not installed
2024-04-15 17:08:44,533:INFO:                 ray: Not installed
2024-04-15 17:08:44,533:INFO:            hyperopt: Not installed
2024-04-15 17:08:44,533:INFO:              optuna: Not installed
2024-04-15 17:08:44,533:INFO:               skopt: Not installed
2024-04-15 17:08:44,533:INFO:              mlflow: 2.11.3
2024-04-15 17:08:44,533:INFO:              gradio: Not installed
2024-04-15 17:08:44,533:INFO:             fastapi: Not installed
2024-04-15 17:08:44,533:INFO:             uvicorn: Not installed
2024-04-15 17:08:44,533:INFO:              m2cgen: Not installed
2024-04-15 17:08:44,533:INFO:           evidently: Not installed
2024-04-15 17:08:44,533:INFO:               fugue: Not installed
2024-04-15 17:08:44,533:INFO:           streamlit: 1.33.0
2024-04-15 17:08:44,533:INFO:             prophet: Not installed
2024-04-15 17:08:44,533:INFO:None
2024-04-15 17:08:44,533:INFO:Set up data.
2024-04-15 17:08:44,539:INFO:Set up folding strategy.
2024-04-15 17:08:44,539:INFO:Set up train/test split.
2024-04-15 17:08:44,539:INFO:Set up data.
2024-04-15 17:08:44,542:INFO:Set up index.
2024-04-15 17:08:44,543:INFO:Assigning column types.
2024-04-15 17:08:44,545:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:08:44,582:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:08:44,583:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:08:44,609:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,609:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,648:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:08:44,649:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:08:44,671:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,672:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:08:44,712:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:08:44,742:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,743:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,784:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:08:44,810:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,810:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,810:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:08:44,877:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:44,943:INFO:Preparing preprocessing pipeline...
2024-04-15 17:08:44,945:INFO:Set up simple imputation.
2024-04-15 17:08:44,945:INFO:Set up feature normalization.
2024-04-15 17:08:44,966:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:08:44,970:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:08:44,970:INFO:Creating final display dataframe.
2024-04-15 17:08:45,035:INFO:Setup _display_container:                     Description             Value
0                    Session id              5237
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              77a5
2024-04-15 17:08:45,105:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:45,105:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:45,178:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:45,178:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:08:45,179:INFO:setup() successfully completed in 0.66s...............
2024-04-15 17:08:45,179:INFO:Initializing compare_models()
2024-04-15 17:08:45,179:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:08:45,180:INFO:Checking exceptions
2024-04-15 17:08:45,184:INFO:Preparing display monitor
2024-04-15 17:08:45,203:INFO:Initializing Logistic Regression
2024-04-15 17:08:45,203:INFO:Total runtime is 0.0 minutes
2024-04-15 17:08:45,205:INFO:SubProcess create_model() called ==================================
2024-04-15 17:08:45,206:INFO:Initializing create_model()
2024-04-15 17:08:45,206:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C592A53C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:08:45,206:INFO:Checking exceptions
2024-04-15 17:08:45,206:INFO:Importing libraries
2024-04-15 17:08:45,206:INFO:Copying training dataset
2024-04-15 17:08:45,213:INFO:Defining folds
2024-04-15 17:08:45,213:INFO:Declaring metric variables
2024-04-15 17:08:45,217:INFO:Importing untrained model
2024-04-15 17:08:45,221:INFO:Logistic Regression Imported successfully
2024-04-15 17:08:45,226:INFO:Starting cross validation
2024-04-15 17:08:45,227:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:08:45,330:INFO:Calculating mean and std
2024-04-15 17:08:45,330:INFO:Creating metrics dataframe
2024-04-15 17:08:45,333:INFO:Uploading results into container
2024-04-15 17:08:45,334:INFO:Uploading model into container now
2024-04-15 17:08:45,334:INFO:_master_model_container: 1
2024-04-15 17:08:45,334:INFO:_display_container: 2
2024-04-15 17:08:45,334:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5237, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:08:45,334:INFO:create_model() successfully completed......................................
2024-04-15 17:08:45,764:INFO:SubProcess create_model() end ==================================
2024-04-15 17:08:45,764:INFO:Creating metrics dataframe
2024-04-15 17:08:45,773:INFO:Initializing Decision Tree Classifier
2024-04-15 17:08:45,773:INFO:Total runtime is 0.009502224127451579 minutes
2024-04-15 17:08:45,777:INFO:SubProcess create_model() called ==================================
2024-04-15 17:08:45,777:INFO:Initializing create_model()
2024-04-15 17:08:45,777:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C592A53C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:08:45,777:INFO:Checking exceptions
2024-04-15 17:08:45,778:INFO:Importing libraries
2024-04-15 17:08:45,778:INFO:Copying training dataset
2024-04-15 17:08:45,783:INFO:Defining folds
2024-04-15 17:08:45,784:INFO:Declaring metric variables
2024-04-15 17:08:45,787:INFO:Importing untrained model
2024-04-15 17:08:45,790:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:08:45,797:INFO:Starting cross validation
2024-04-15 17:08:45,799:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:08:45,967:INFO:Calculating mean and std
2024-04-15 17:08:45,968:INFO:Creating metrics dataframe
2024-04-15 17:08:45,971:INFO:Uploading results into container
2024-04-15 17:08:45,971:INFO:Uploading model into container now
2024-04-15 17:08:45,972:INFO:_master_model_container: 2
2024-04-15 17:08:45,972:INFO:_display_container: 2
2024-04-15 17:08:45,972:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5237, splitter='best')
2024-04-15 17:08:45,972:INFO:create_model() successfully completed......................................
2024-04-15 17:08:46,315:INFO:SubProcess create_model() end ==================================
2024-04-15 17:08:46,315:INFO:Creating metrics dataframe
2024-04-15 17:08:46,330:INFO:Initializing create_model()
2024-04-15 17:08:46,330:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5237, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:08:46,330:INFO:Checking exceptions
2024-04-15 17:08:46,332:INFO:Importing libraries
2024-04-15 17:08:46,332:INFO:Copying training dataset
2024-04-15 17:08:46,337:INFO:Defining folds
2024-04-15 17:08:46,337:INFO:Declaring metric variables
2024-04-15 17:08:46,337:INFO:Importing untrained model
2024-04-15 17:08:46,337:INFO:Declaring custom model
2024-04-15 17:08:46,338:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:08:46,339:INFO:Cross validation set to False
2024-04-15 17:08:46,339:INFO:Fitting Model
2024-04-15 17:08:46,392:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5237, splitter='best')
2024-04-15 17:08:46,392:INFO:create_model() successfully completed......................................
2024-04-15 17:08:46,723:INFO:Initializing create_model()
2024-04-15 17:08:46,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5237, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:08:46,723:INFO:Checking exceptions
2024-04-15 17:08:46,725:INFO:Importing libraries
2024-04-15 17:08:46,725:INFO:Copying training dataset
2024-04-15 17:08:46,729:INFO:Defining folds
2024-04-15 17:08:46,729:INFO:Declaring metric variables
2024-04-15 17:08:46,729:INFO:Importing untrained model
2024-04-15 17:08:46,729:INFO:Declaring custom model
2024-04-15 17:08:46,730:INFO:Logistic Regression Imported successfully
2024-04-15 17:08:46,731:INFO:Cross validation set to False
2024-04-15 17:08:46,731:INFO:Fitting Model
2024-04-15 17:08:46,749:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5237, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:08:46,749:INFO:create_model() successfully completed......................................
2024-04-15 17:08:47,097:INFO:_master_model_container: 2
2024-04-15 17:08:47,098:INFO:_display_container: 2
2024-04-15 17:08:47,098:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5237, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5237, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:08:47,098:INFO:compare_models() successfully completed......................................
2024-04-15 17:08:47,099:INFO:Initializing plot_model()
2024-04-15 17:08:47,099:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5237, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, system=True)
2024-04-15 17:08:47,099:INFO:Checking exceptions
2024-04-15 17:08:47,105:INFO:Preloading libraries
2024-04-15 17:08:47,106:INFO:Copying training dataset
2024-04-15 17:08:47,106:INFO:Plot type: parameter
2024-04-15 17:08:47,109:INFO:Visual Rendered Successfully
2024-04-15 17:08:47,544:INFO:plot_model() successfully completed......................................
2024-04-15 17:08:47,568:INFO:Initializing predict_model()
2024-04-15 17:08:47,568:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5237, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591F9B040>)
2024-04-15 17:08:47,568:INFO:Checking exceptions
2024-04-15 17:08:47,568:INFO:Preloading libraries
2024-04-15 17:08:48,184:INFO:Initializing plot_model()
2024-04-15 17:08:48,185:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5237, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, system=True)
2024-04-15 17:08:48,185:INFO:Checking exceptions
2024-04-15 17:08:48,189:INFO:Preloading libraries
2024-04-15 17:08:48,189:INFO:Copying training dataset
2024-04-15 17:08:48,189:INFO:Plot type: parameter
2024-04-15 17:08:48,192:INFO:Visual Rendered Successfully
2024-04-15 17:08:48,532:INFO:plot_model() successfully completed......................................
2024-04-15 17:08:48,552:INFO:Initializing predict_model()
2024-04-15 17:08:48,553:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C597C73970>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5237, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C58E5609D0>)
2024-04-15 17:08:48,553:INFO:Checking exceptions
2024-04-15 17:08:48,553:INFO:Preloading libraries
2024-04-15 17:08:49,189:INFO:Initializing load_model()
2024-04-15 17:08:49,189:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:08:49,258:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 17:11:22,827:INFO:PyCaret ClassificationExperiment
2024-04-15 17:11:22,827:INFO:Logging name: clf-default-name
2024-04-15 17:11:22,827:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 17:11:22,827:INFO:version 3.2.0
2024-04-15 17:11:22,827:INFO:Initializing setup()
2024-04-15 17:11:22,827:INFO:self.USI: a4be
2024-04-15 17:11:22,827:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 17:11:22,827:INFO:Checking environment
2024-04-15 17:11:22,827:INFO:python_version: 3.8.0
2024-04-15 17:11:22,827:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 17:11:22,827:INFO:machine: AMD64
2024-04-15 17:11:22,827:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:11:22,833:INFO:Memory: svmem(total=34301427712, available=17929797632, percent=47.7, used=16371630080, free=17929797632)
2024-04-15 17:11:22,833:INFO:Physical Core: 6
2024-04-15 17:11:22,833:INFO:Logical Core: 12
2024-04-15 17:11:22,834:INFO:Checking libraries
2024-04-15 17:11:22,834:INFO:System:
2024-04-15 17:11:22,834:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:11:22,834:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:11:22,834:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:11:22,834:INFO:PyCaret required dependencies:
2024-04-15 17:11:22,834:INFO:                 pip: 19.2.3
2024-04-15 17:11:22,834:INFO:          setuptools: 41.2.0
2024-04-15 17:11:22,834:INFO:             pycaret: 3.2.0
2024-04-15 17:11:22,834:INFO:             IPython: 8.12.3
2024-04-15 17:11:22,834:INFO:          ipywidgets: 8.1.2
2024-04-15 17:11:22,834:INFO:                tqdm: 4.66.2
2024-04-15 17:11:22,834:INFO:               numpy: 1.24.4
2024-04-15 17:11:22,834:INFO:              pandas: 1.5.3
2024-04-15 17:11:22,834:INFO:              jinja2: 3.1.3
2024-04-15 17:11:22,834:INFO:               scipy: 1.10.1
2024-04-15 17:11:22,834:INFO:              joblib: 1.3.2
2024-04-15 17:11:22,834:INFO:             sklearn: 1.2.0
2024-04-15 17:11:22,834:INFO:                pyod: 1.1.3
2024-04-15 17:11:22,834:INFO:            imblearn: 0.12.2
2024-04-15 17:11:22,834:INFO:   category_encoders: 2.6.3
2024-04-15 17:11:22,834:INFO:            lightgbm: 4.3.0
2024-04-15 17:11:22,834:INFO:               numba: 0.58.1
2024-04-15 17:11:22,834:INFO:            requests: 2.31.0
2024-04-15 17:11:22,834:INFO:          matplotlib: 3.6.0
2024-04-15 17:11:22,834:INFO:          scikitplot: 0.3.7
2024-04-15 17:11:22,834:INFO:         yellowbrick: 1.5
2024-04-15 17:11:22,834:INFO:              plotly: 5.20.0
2024-04-15 17:11:22,834:INFO:    plotly-resampler: Not installed
2024-04-15 17:11:22,834:INFO:             kaleido: 0.2.1
2024-04-15 17:11:22,834:INFO:           schemdraw: 0.15
2024-04-15 17:11:22,834:INFO:         statsmodels: 0.14.1
2024-04-15 17:11:22,834:INFO:              sktime: 0.21.1
2024-04-15 17:11:22,834:INFO:               tbats: 1.1.3
2024-04-15 17:11:22,834:INFO:            pmdarima: 2.0.4
2024-04-15 17:11:22,835:INFO:              psutil: 5.9.8
2024-04-15 17:11:22,835:INFO:          markupsafe: 2.1.5
2024-04-15 17:11:22,835:INFO:             pickle5: Not installed
2024-04-15 17:11:22,835:INFO:         cloudpickle: 3.0.0
2024-04-15 17:11:22,835:INFO:         deprecation: 2.1.0
2024-04-15 17:11:22,835:INFO:              xxhash: 3.4.1
2024-04-15 17:11:22,835:INFO:           wurlitzer: Not installed
2024-04-15 17:11:22,835:INFO:PyCaret optional dependencies:
2024-04-15 17:11:22,835:INFO:                shap: Not installed
2024-04-15 17:11:22,835:INFO:           interpret: Not installed
2024-04-15 17:11:22,835:INFO:                umap: Not installed
2024-04-15 17:11:22,835:INFO:     ydata_profiling: Not installed
2024-04-15 17:11:22,835:INFO:  explainerdashboard: Not installed
2024-04-15 17:11:22,835:INFO:             autoviz: Not installed
2024-04-15 17:11:22,835:INFO:           fairlearn: Not installed
2024-04-15 17:11:22,835:INFO:          deepchecks: Not installed
2024-04-15 17:11:22,835:INFO:             xgboost: Not installed
2024-04-15 17:11:22,835:INFO:            catboost: Not installed
2024-04-15 17:11:22,835:INFO:              kmodes: Not installed
2024-04-15 17:11:22,835:INFO:             mlxtend: Not installed
2024-04-15 17:11:22,835:INFO:       statsforecast: Not installed
2024-04-15 17:11:22,835:INFO:        tune_sklearn: Not installed
2024-04-15 17:11:22,835:INFO:                 ray: Not installed
2024-04-15 17:11:22,835:INFO:            hyperopt: Not installed
2024-04-15 17:11:22,835:INFO:              optuna: Not installed
2024-04-15 17:11:22,835:INFO:               skopt: Not installed
2024-04-15 17:11:22,835:INFO:              mlflow: 2.11.3
2024-04-15 17:11:22,835:INFO:              gradio: Not installed
2024-04-15 17:11:22,836:INFO:             fastapi: Not installed
2024-04-15 17:11:22,836:INFO:             uvicorn: Not installed
2024-04-15 17:11:22,836:INFO:              m2cgen: Not installed
2024-04-15 17:11:22,836:INFO:           evidently: Not installed
2024-04-15 17:11:22,836:INFO:               fugue: Not installed
2024-04-15 17:11:22,836:INFO:           streamlit: 1.33.0
2024-04-15 17:11:22,836:INFO:             prophet: Not installed
2024-04-15 17:11:22,836:INFO:None
2024-04-15 17:11:22,836:INFO:Set up data.
2024-04-15 17:11:22,841:INFO:Set up folding strategy.
2024-04-15 17:11:22,841:INFO:Set up train/test split.
2024-04-15 17:11:22,841:INFO:Set up data.
2024-04-15 17:11:22,845:INFO:Set up index.
2024-04-15 17:11:22,845:INFO:Assigning column types.
2024-04-15 17:11:22,847:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:11:22,886:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:11:22,886:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:22,912:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:22,912:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:22,954:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:11:22,955:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:22,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:22,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:22,980:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:11:23,017:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:23,042:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,042:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,079:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:23,102:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,102:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,102:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:11:23,166:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,166:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,229:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,230:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,231:INFO:Preparing preprocessing pipeline...
2024-04-15 17:11:23,232:INFO:Set up simple imputation.
2024-04-15 17:11:23,232:INFO:Set up feature normalization.
2024-04-15 17:11:23,251:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:11:23,254:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:11:23,254:INFO:Creating final display dataframe.
2024-04-15 17:11:23,318:INFO:Setup _display_container:                     Description             Value
0                    Session id              8448
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              a4be
2024-04-15 17:11:23,390:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,454:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,454:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:23,455:INFO:setup() successfully completed in 0.63s...............
2024-04-15 17:11:23,455:INFO:Initializing compare_models()
2024-04-15 17:11:23,456:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:11:23,456:INFO:Checking exceptions
2024-04-15 17:11:23,459:INFO:Preparing display monitor
2024-04-15 17:11:23,477:INFO:Initializing Logistic Regression
2024-04-15 17:11:23,477:INFO:Total runtime is 0.0 minutes
2024-04-15 17:11:23,479:INFO:SubProcess create_model() called ==================================
2024-04-15 17:11:23,480:INFO:Initializing create_model()
2024-04-15 17:11:23,480:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C581F2ABB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:23,480:INFO:Checking exceptions
2024-04-15 17:11:23,480:INFO:Importing libraries
2024-04-15 17:11:23,480:INFO:Copying training dataset
2024-04-15 17:11:23,486:INFO:Defining folds
2024-04-15 17:11:23,486:INFO:Declaring metric variables
2024-04-15 17:11:23,490:INFO:Importing untrained model
2024-04-15 17:11:23,493:INFO:Logistic Regression Imported successfully
2024-04-15 17:11:23,499:INFO:Starting cross validation
2024-04-15 17:11:23,500:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:11:23,592:INFO:Calculating mean and std
2024-04-15 17:11:23,593:INFO:Creating metrics dataframe
2024-04-15 17:11:23,596:INFO:Uploading results into container
2024-04-15 17:11:23,596:INFO:Uploading model into container now
2024-04-15 17:11:23,596:INFO:_master_model_container: 1
2024-04-15 17:11:23,596:INFO:_display_container: 2
2024-04-15 17:11:23,597:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8448, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:11:23,597:INFO:create_model() successfully completed......................................
2024-04-15 17:11:23,937:INFO:SubProcess create_model() end ==================================
2024-04-15 17:11:23,937:INFO:Creating metrics dataframe
2024-04-15 17:11:23,945:INFO:Initializing Decision Tree Classifier
2024-04-15 17:11:23,946:INFO:Total runtime is 0.00780174732208252 minutes
2024-04-15 17:11:23,950:INFO:SubProcess create_model() called ==================================
2024-04-15 17:11:23,950:INFO:Initializing create_model()
2024-04-15 17:11:23,950:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C581F2ABB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:23,950:INFO:Checking exceptions
2024-04-15 17:11:23,950:INFO:Importing libraries
2024-04-15 17:11:23,951:INFO:Copying training dataset
2024-04-15 17:11:23,956:INFO:Defining folds
2024-04-15 17:11:23,956:INFO:Declaring metric variables
2024-04-15 17:11:23,959:INFO:Importing untrained model
2024-04-15 17:11:23,962:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:11:23,968:INFO:Starting cross validation
2024-04-15 17:11:23,969:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:11:24,127:INFO:Calculating mean and std
2024-04-15 17:11:24,128:INFO:Creating metrics dataframe
2024-04-15 17:11:24,131:INFO:Uploading results into container
2024-04-15 17:11:24,131:INFO:Uploading model into container now
2024-04-15 17:11:24,131:INFO:_master_model_container: 2
2024-04-15 17:11:24,131:INFO:_display_container: 2
2024-04-15 17:11:24,132:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8448, splitter='best')
2024-04-15 17:11:24,132:INFO:create_model() successfully completed......................................
2024-04-15 17:11:24,467:INFO:SubProcess create_model() end ==================================
2024-04-15 17:11:24,468:INFO:Creating metrics dataframe
2024-04-15 17:11:24,482:INFO:Initializing create_model()
2024-04-15 17:11:24,482:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8448, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:24,482:INFO:Checking exceptions
2024-04-15 17:11:24,484:INFO:Importing libraries
2024-04-15 17:11:24,484:INFO:Copying training dataset
2024-04-15 17:11:24,488:INFO:Defining folds
2024-04-15 17:11:24,489:INFO:Declaring metric variables
2024-04-15 17:11:24,489:INFO:Importing untrained model
2024-04-15 17:11:24,489:INFO:Declaring custom model
2024-04-15 17:11:24,489:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:11:24,490:INFO:Cross validation set to False
2024-04-15 17:11:24,490:INFO:Fitting Model
2024-04-15 17:11:24,545:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8448, splitter='best')
2024-04-15 17:11:24,545:INFO:create_model() successfully completed......................................
2024-04-15 17:11:24,871:INFO:Initializing create_model()
2024-04-15 17:11:24,871:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8448, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:24,871:INFO:Checking exceptions
2024-04-15 17:11:24,873:INFO:Importing libraries
2024-04-15 17:11:24,873:INFO:Copying training dataset
2024-04-15 17:11:24,877:INFO:Defining folds
2024-04-15 17:11:24,877:INFO:Declaring metric variables
2024-04-15 17:11:24,878:INFO:Importing untrained model
2024-04-15 17:11:24,878:INFO:Declaring custom model
2024-04-15 17:11:24,878:INFO:Logistic Regression Imported successfully
2024-04-15 17:11:24,879:INFO:Cross validation set to False
2024-04-15 17:11:24,879:INFO:Fitting Model
2024-04-15 17:11:24,897:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8448, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:11:24,897:INFO:create_model() successfully completed......................................
2024-04-15 17:11:25,239:INFO:_master_model_container: 2
2024-04-15 17:11:25,239:INFO:_display_container: 2
2024-04-15 17:11:25,239:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8448, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8448, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:11:25,239:INFO:compare_models() successfully completed......................................
2024-04-15 17:11:25,241:INFO:Initializing plot_model()
2024-04-15 17:11:25,241:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8448, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, system=True)
2024-04-15 17:11:25,241:INFO:Checking exceptions
2024-04-15 17:11:25,245:INFO:Preloading libraries
2024-04-15 17:11:25,247:INFO:Copying training dataset
2024-04-15 17:11:25,247:INFO:Plot type: parameter
2024-04-15 17:11:25,251:INFO:Visual Rendered Successfully
2024-04-15 17:11:25,678:INFO:plot_model() successfully completed......................................
2024-04-15 17:11:25,706:INFO:Initializing predict_model()
2024-04-15 17:11:25,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8448, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C591FC1B80>)
2024-04-15 17:11:25,706:INFO:Checking exceptions
2024-04-15 17:11:25,706:INFO:Preloading libraries
2024-04-15 17:11:26,234:INFO:Initializing plot_model()
2024-04-15 17:11:26,234:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8448, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, system=True)
2024-04-15 17:11:26,234:INFO:Checking exceptions
2024-04-15 17:11:26,239:INFO:Preloading libraries
2024-04-15 17:11:26,239:INFO:Copying training dataset
2024-04-15 17:11:26,239:INFO:Plot type: parameter
2024-04-15 17:11:26,242:INFO:Visual Rendered Successfully
2024-04-15 17:11:26,579:INFO:plot_model() successfully completed......................................
2024-04-15 17:11:26,599:INFO:Initializing predict_model()
2024-04-15 17:11:26,599:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C58E44A5E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8448, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597E2F160>)
2024-04-15 17:11:26,599:INFO:Checking exceptions
2024-04-15 17:11:26,600:INFO:Preloading libraries
2024-04-15 17:11:27,131:INFO:Initializing load_model()
2024-04-15 17:11:27,131:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:11:27,192:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 17:11:30,199:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3246980847.py:84: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 17:11:52,526:INFO:PyCaret ClassificationExperiment
2024-04-15 17:11:52,526:INFO:Logging name: clf-default-name
2024-04-15 17:11:52,526:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 17:11:52,526:INFO:version 3.2.0
2024-04-15 17:11:52,526:INFO:Initializing setup()
2024-04-15 17:11:52,526:INFO:self.USI: dfee
2024-04-15 17:11:52,526:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 17:11:52,526:INFO:Checking environment
2024-04-15 17:11:52,526:INFO:python_version: 3.8.0
2024-04-15 17:11:52,526:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 17:11:52,526:INFO:machine: AMD64
2024-04-15 17:11:52,526:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 17:11:52,534:INFO:Memory: svmem(total=34301427712, available=17971294208, percent=47.6, used=16330133504, free=17971294208)
2024-04-15 17:11:52,534:INFO:Physical Core: 6
2024-04-15 17:11:52,534:INFO:Logical Core: 12
2024-04-15 17:11:52,534:INFO:Checking libraries
2024-04-15 17:11:52,534:INFO:System:
2024-04-15 17:11:52,534:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 17:11:52,534:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 17:11:52,534:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 17:11:52,534:INFO:PyCaret required dependencies:
2024-04-15 17:11:52,534:INFO:                 pip: 19.2.3
2024-04-15 17:11:52,534:INFO:          setuptools: 41.2.0
2024-04-15 17:11:52,535:INFO:             pycaret: 3.2.0
2024-04-15 17:11:52,535:INFO:             IPython: 8.12.3
2024-04-15 17:11:52,535:INFO:          ipywidgets: 8.1.2
2024-04-15 17:11:52,535:INFO:                tqdm: 4.66.2
2024-04-15 17:11:52,535:INFO:               numpy: 1.24.4
2024-04-15 17:11:52,535:INFO:              pandas: 1.5.3
2024-04-15 17:11:52,535:INFO:              jinja2: 3.1.3
2024-04-15 17:11:52,535:INFO:               scipy: 1.10.1
2024-04-15 17:11:52,535:INFO:              joblib: 1.3.2
2024-04-15 17:11:52,535:INFO:             sklearn: 1.2.0
2024-04-15 17:11:52,535:INFO:                pyod: 1.1.3
2024-04-15 17:11:52,535:INFO:            imblearn: 0.12.2
2024-04-15 17:11:52,535:INFO:   category_encoders: 2.6.3
2024-04-15 17:11:52,535:INFO:            lightgbm: 4.3.0
2024-04-15 17:11:52,535:INFO:               numba: 0.58.1
2024-04-15 17:11:52,535:INFO:            requests: 2.31.0
2024-04-15 17:11:52,535:INFO:          matplotlib: 3.6.0
2024-04-15 17:11:52,535:INFO:          scikitplot: 0.3.7
2024-04-15 17:11:52,535:INFO:         yellowbrick: 1.5
2024-04-15 17:11:52,535:INFO:              plotly: 5.20.0
2024-04-15 17:11:52,535:INFO:    plotly-resampler: Not installed
2024-04-15 17:11:52,535:INFO:             kaleido: 0.2.1
2024-04-15 17:11:52,535:INFO:           schemdraw: 0.15
2024-04-15 17:11:52,535:INFO:         statsmodels: 0.14.1
2024-04-15 17:11:52,535:INFO:              sktime: 0.21.1
2024-04-15 17:11:52,535:INFO:               tbats: 1.1.3
2024-04-15 17:11:52,535:INFO:            pmdarima: 2.0.4
2024-04-15 17:11:52,535:INFO:              psutil: 5.9.8
2024-04-15 17:11:52,535:INFO:          markupsafe: 2.1.5
2024-04-15 17:11:52,535:INFO:             pickle5: Not installed
2024-04-15 17:11:52,535:INFO:         cloudpickle: 3.0.0
2024-04-15 17:11:52,535:INFO:         deprecation: 2.1.0
2024-04-15 17:11:52,535:INFO:              xxhash: 3.4.1
2024-04-15 17:11:52,535:INFO:           wurlitzer: Not installed
2024-04-15 17:11:52,535:INFO:PyCaret optional dependencies:
2024-04-15 17:11:52,536:INFO:                shap: Not installed
2024-04-15 17:11:52,536:INFO:           interpret: Not installed
2024-04-15 17:11:52,536:INFO:                umap: Not installed
2024-04-15 17:11:52,536:INFO:     ydata_profiling: Not installed
2024-04-15 17:11:52,536:INFO:  explainerdashboard: Not installed
2024-04-15 17:11:52,536:INFO:             autoviz: Not installed
2024-04-15 17:11:52,536:INFO:           fairlearn: Not installed
2024-04-15 17:11:52,536:INFO:          deepchecks: Not installed
2024-04-15 17:11:52,536:INFO:             xgboost: Not installed
2024-04-15 17:11:52,536:INFO:            catboost: Not installed
2024-04-15 17:11:52,536:INFO:              kmodes: Not installed
2024-04-15 17:11:52,536:INFO:             mlxtend: Not installed
2024-04-15 17:11:52,536:INFO:       statsforecast: Not installed
2024-04-15 17:11:52,536:INFO:        tune_sklearn: Not installed
2024-04-15 17:11:52,536:INFO:                 ray: Not installed
2024-04-15 17:11:52,536:INFO:            hyperopt: Not installed
2024-04-15 17:11:52,536:INFO:              optuna: Not installed
2024-04-15 17:11:52,536:INFO:               skopt: Not installed
2024-04-15 17:11:52,536:INFO:              mlflow: 2.11.3
2024-04-15 17:11:52,536:INFO:              gradio: Not installed
2024-04-15 17:11:52,536:INFO:             fastapi: Not installed
2024-04-15 17:11:52,536:INFO:             uvicorn: Not installed
2024-04-15 17:11:52,536:INFO:              m2cgen: Not installed
2024-04-15 17:11:52,536:INFO:           evidently: Not installed
2024-04-15 17:11:52,536:INFO:               fugue: Not installed
2024-04-15 17:11:52,536:INFO:           streamlit: 1.33.0
2024-04-15 17:11:52,536:INFO:             prophet: Not installed
2024-04-15 17:11:52,536:INFO:None
2024-04-15 17:11:52,536:INFO:Set up data.
2024-04-15 17:11:52,541:INFO:Set up folding strategy.
2024-04-15 17:11:52,541:INFO:Set up train/test split.
2024-04-15 17:11:52,541:INFO:Set up data.
2024-04-15 17:11:52,545:INFO:Set up index.
2024-04-15 17:11:52,546:INFO:Assigning column types.
2024-04-15 17:11:52,548:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 17:11:52,589:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:11:52,590:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:52,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,654:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 17:11:52,655:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:52,679:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,679:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,679:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 17:11:52,715:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:52,738:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,775:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 17:11:52,798:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,798:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,799:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 17:11:52,859:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,926:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:52,928:INFO:Preparing preprocessing pipeline...
2024-04-15 17:11:52,929:INFO:Set up simple imputation.
2024-04-15 17:11:52,929:INFO:Set up feature normalization.
2024-04-15 17:11:52,946:INFO:Finished creating preprocessing pipeline.
2024-04-15 17:11:52,950:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 17:11:52,950:INFO:Creating final display dataframe.
2024-04-15 17:11:53,019:INFO:Setup _display_container:                     Description             Value
0                    Session id              8072
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              dfee
2024-04-15 17:11:53,087:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:53,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:53,153:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:53,153:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 17:11:53,154:INFO:setup() successfully completed in 0.63s...............
2024-04-15 17:11:53,155:INFO:Initializing compare_models()
2024-04-15 17:11:53,155:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 17:11:53,155:INFO:Checking exceptions
2024-04-15 17:11:53,164:INFO:Preparing display monitor
2024-04-15 17:11:53,197:INFO:Initializing Logistic Regression
2024-04-15 17:11:53,198:INFO:Total runtime is 1.6681353251139323e-05 minutes
2024-04-15 17:11:53,202:INFO:SubProcess create_model() called ==================================
2024-04-15 17:11:53,203:INFO:Initializing create_model()
2024-04-15 17:11:53,203:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586AB8220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:53,203:INFO:Checking exceptions
2024-04-15 17:11:53,203:INFO:Importing libraries
2024-04-15 17:11:53,203:INFO:Copying training dataset
2024-04-15 17:11:53,210:INFO:Defining folds
2024-04-15 17:11:53,210:INFO:Declaring metric variables
2024-04-15 17:11:53,215:INFO:Importing untrained model
2024-04-15 17:11:53,220:INFO:Logistic Regression Imported successfully
2024-04-15 17:11:53,227:INFO:Starting cross validation
2024-04-15 17:11:53,228:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:11:53,388:INFO:Calculating mean and std
2024-04-15 17:11:53,389:INFO:Creating metrics dataframe
2024-04-15 17:11:53,395:INFO:Uploading results into container
2024-04-15 17:11:53,396:INFO:Uploading model into container now
2024-04-15 17:11:53,397:INFO:_master_model_container: 1
2024-04-15 17:11:53,397:INFO:_display_container: 2
2024-04-15 17:11:53,397:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8072, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:11:53,397:INFO:create_model() successfully completed......................................
2024-04-15 17:11:53,751:INFO:SubProcess create_model() end ==================================
2024-04-15 17:11:53,751:INFO:Creating metrics dataframe
2024-04-15 17:11:53,759:INFO:Initializing Decision Tree Classifier
2024-04-15 17:11:53,759:INFO:Total runtime is 0.009368781248728435 minutes
2024-04-15 17:11:53,761:INFO:SubProcess create_model() called ==================================
2024-04-15 17:11:53,761:INFO:Initializing create_model()
2024-04-15 17:11:53,762:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C586AB8220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:53,762:INFO:Checking exceptions
2024-04-15 17:11:53,762:INFO:Importing libraries
2024-04-15 17:11:53,762:INFO:Copying training dataset
2024-04-15 17:11:53,766:INFO:Defining folds
2024-04-15 17:11:53,766:INFO:Declaring metric variables
2024-04-15 17:11:53,768:INFO:Importing untrained model
2024-04-15 17:11:53,771:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:11:53,775:INFO:Starting cross validation
2024-04-15 17:11:53,776:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 17:11:53,912:INFO:Calculating mean and std
2024-04-15 17:11:53,912:INFO:Creating metrics dataframe
2024-04-15 17:11:53,915:INFO:Uploading results into container
2024-04-15 17:11:53,916:INFO:Uploading model into container now
2024-04-15 17:11:53,916:INFO:_master_model_container: 2
2024-04-15 17:11:53,916:INFO:_display_container: 2
2024-04-15 17:11:53,916:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8072, splitter='best')
2024-04-15 17:11:53,916:INFO:create_model() successfully completed......................................
2024-04-15 17:11:54,236:INFO:SubProcess create_model() end ==================================
2024-04-15 17:11:54,236:INFO:Creating metrics dataframe
2024-04-15 17:11:54,251:INFO:Initializing create_model()
2024-04-15 17:11:54,251:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8072, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:54,252:INFO:Checking exceptions
2024-04-15 17:11:54,253:INFO:Importing libraries
2024-04-15 17:11:54,253:INFO:Copying training dataset
2024-04-15 17:11:54,257:INFO:Defining folds
2024-04-15 17:11:54,258:INFO:Declaring metric variables
2024-04-15 17:11:54,258:INFO:Importing untrained model
2024-04-15 17:11:54,258:INFO:Declaring custom model
2024-04-15 17:11:54,258:INFO:Decision Tree Classifier Imported successfully
2024-04-15 17:11:54,259:INFO:Cross validation set to False
2024-04-15 17:11:54,259:INFO:Fitting Model
2024-04-15 17:11:54,314:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8072, splitter='best')
2024-04-15 17:11:54,314:INFO:create_model() successfully completed......................................
2024-04-15 17:11:54,632:INFO:Initializing create_model()
2024-04-15 17:11:54,632:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8072, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 17:11:54,632:INFO:Checking exceptions
2024-04-15 17:11:54,634:INFO:Importing libraries
2024-04-15 17:11:54,635:INFO:Copying training dataset
2024-04-15 17:11:54,638:INFO:Defining folds
2024-04-15 17:11:54,639:INFO:Declaring metric variables
2024-04-15 17:11:54,639:INFO:Importing untrained model
2024-04-15 17:11:54,639:INFO:Declaring custom model
2024-04-15 17:11:54,639:INFO:Logistic Regression Imported successfully
2024-04-15 17:11:54,640:INFO:Cross validation set to False
2024-04-15 17:11:54,640:INFO:Fitting Model
2024-04-15 17:11:54,658:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8072, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 17:11:54,658:INFO:create_model() successfully completed......................................
2024-04-15 17:11:54,978:INFO:_master_model_container: 2
2024-04-15 17:11:54,979:INFO:_display_container: 2
2024-04-15 17:11:54,979:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8072, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8072, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 17:11:54,979:INFO:compare_models() successfully completed......................................
2024-04-15 17:11:54,980:INFO:Initializing plot_model()
2024-04-15 17:11:54,980:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8072, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, system=True)
2024-04-15 17:11:54,980:INFO:Checking exceptions
2024-04-15 17:11:54,985:INFO:Preloading libraries
2024-04-15 17:11:54,985:INFO:Copying training dataset
2024-04-15 17:11:54,985:INFO:Plot type: parameter
2024-04-15 17:11:54,988:INFO:Visual Rendered Successfully
2024-04-15 17:11:55,298:INFO:plot_model() successfully completed......................................
2024-04-15 17:11:55,324:INFO:Initializing predict_model()
2024-04-15 17:11:55,325:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8072, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C596DAF670>)
2024-04-15 17:11:55,325:INFO:Checking exceptions
2024-04-15 17:11:55,325:INFO:Preloading libraries
2024-04-15 17:11:55,856:INFO:Initializing plot_model()
2024-04-15 17:11:55,857:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8072, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, system=True)
2024-04-15 17:11:55,857:INFO:Checking exceptions
2024-04-15 17:11:55,861:INFO:Preloading libraries
2024-04-15 17:11:55,861:INFO:Copying training dataset
2024-04-15 17:11:55,861:INFO:Plot type: parameter
2024-04-15 17:11:55,864:INFO:Visual Rendered Successfully
2024-04-15 17:11:56,178:INFO:plot_model() successfully completed......................................
2024-04-15 17:11:56,196:INFO:Initializing predict_model()
2024-04-15 17:11:56,196:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C596CD6820>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8072, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C590583310>)
2024-04-15 17:11:56,196:INFO:Checking exceptions
2024-04-15 17:11:56,196:INFO:Preloading libraries
2024-04-15 17:11:56,712:INFO:Initializing load_model()
2024-04-15 17:11:56,712:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 17:11:56,773:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 17:11:59,697:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\3246980847.py:84: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 18:06:29,247:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\store\artifact\utils\models.py:32: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  latest = client.get_latest_versions(name, None if stage is None else [stage])

2024-04-15 18:10:52,769:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\store\artifact\utils\models.py:32: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  latest = client.get_latest_versions(name, None if stage is None else [stage])

2024-04-15 18:13:19,197:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1089848047.py:5: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_versions = client.get_latest_versions(model_name)

2024-04-15 18:13:19,203:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1089848047.py:11: FutureWarning: ``mlflow.tracking.client.MlflowClient.transition_model_version_stage`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  client.transition_model_version_stage(

2024-04-15 18:13:22,404:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\store\artifact\utils\models.py:32: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  latest = client.get_latest_versions(name, None if stage is None else [stage])

2024-04-15 18:13:54,387:INFO:PyCaret ClassificationExperiment
2024-04-15 18:13:54,387:INFO:Logging name: clf-default-name
2024-04-15 18:13:54,387:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-04-15 18:13:54,387:INFO:version 3.2.0
2024-04-15 18:13:54,387:INFO:Initializing setup()
2024-04-15 18:13:54,387:INFO:self.USI: 5bec
2024-04-15 18:13:54,387:INFO:self._variable_keys: {'y_train', 'y_test', 'exp_name_log', 'n_jobs_param', 'html_param', 'memory', 'X_train', 'y', 'log_plots_param', 'X', 'gpu_n_jobs_param', 'exp_id', 'target_param', 'idx', 'logging_param', 'gpu_param', '_available_plots', 'data', 'USI', 'is_multiclass', 'seed', 'fold_generator', 'X_test', 'fold_groups_param', 'pipeline', 'fix_imbalance', 'fold_shuffle_param', '_ml_usecase'}
2024-04-15 18:13:54,387:INFO:Checking environment
2024-04-15 18:13:54,387:INFO:python_version: 3.8.0
2024-04-15 18:13:54,387:INFO:python_build: ('tags/v3.8.0:fa919fd', 'Oct 14 2019 19:37:50')
2024-04-15 18:13:54,387:INFO:machine: AMD64
2024-04-15 18:13:54,387:INFO:platform: Windows-10-10.0.19041-SP0
2024-04-15 18:13:54,394:INFO:Memory: svmem(total=34301427712, available=19007029248, percent=44.6, used=15294398464, free=19007029248)
2024-04-15 18:13:54,394:INFO:Physical Core: 6
2024-04-15 18:13:54,394:INFO:Logical Core: 12
2024-04-15 18:13:54,394:INFO:Checking libraries
2024-04-15 18:13:54,394:INFO:System:
2024-04-15 18:13:54,394:INFO:    python: 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)]
2024-04-15 18:13:54,394:INFO:executable: c:\Projetos\Projeto Kobe\projeto_kobe\.venv\Scripts\python.exe
2024-04-15 18:13:54,394:INFO:   machine: Windows-10-10.0.19041-SP0
2024-04-15 18:13:54,394:INFO:PyCaret required dependencies:
2024-04-15 18:13:54,394:INFO:                 pip: 19.2.3
2024-04-15 18:13:54,394:INFO:          setuptools: 41.2.0
2024-04-15 18:13:54,394:INFO:             pycaret: 3.2.0
2024-04-15 18:13:54,395:INFO:             IPython: 8.12.3
2024-04-15 18:13:54,395:INFO:          ipywidgets: 8.1.2
2024-04-15 18:13:54,395:INFO:                tqdm: 4.66.2
2024-04-15 18:13:54,395:INFO:               numpy: 1.24.4
2024-04-15 18:13:54,395:INFO:              pandas: 1.5.3
2024-04-15 18:13:54,395:INFO:              jinja2: 3.1.3
2024-04-15 18:13:54,395:INFO:               scipy: 1.10.1
2024-04-15 18:13:54,395:INFO:              joblib: 1.3.2
2024-04-15 18:13:54,395:INFO:             sklearn: 1.2.0
2024-04-15 18:13:54,395:INFO:                pyod: 1.1.3
2024-04-15 18:13:54,395:INFO:            imblearn: 0.12.2
2024-04-15 18:13:54,395:INFO:   category_encoders: 2.6.3
2024-04-15 18:13:54,395:INFO:            lightgbm: 4.3.0
2024-04-15 18:13:54,395:INFO:               numba: 0.58.1
2024-04-15 18:13:54,395:INFO:            requests: 2.31.0
2024-04-15 18:13:54,395:INFO:          matplotlib: 3.6.0
2024-04-15 18:13:54,395:INFO:          scikitplot: 0.3.7
2024-04-15 18:13:54,395:INFO:         yellowbrick: 1.5
2024-04-15 18:13:54,395:INFO:              plotly: 5.20.0
2024-04-15 18:13:54,395:INFO:    plotly-resampler: Not installed
2024-04-15 18:13:54,395:INFO:             kaleido: 0.2.1
2024-04-15 18:13:54,395:INFO:           schemdraw: 0.15
2024-04-15 18:13:54,395:INFO:         statsmodels: 0.14.1
2024-04-15 18:13:54,395:INFO:              sktime: 0.21.1
2024-04-15 18:13:54,395:INFO:               tbats: 1.1.3
2024-04-15 18:13:54,395:INFO:            pmdarima: 2.0.4
2024-04-15 18:13:54,395:INFO:              psutil: 5.9.8
2024-04-15 18:13:54,395:INFO:          markupsafe: 2.1.5
2024-04-15 18:13:54,395:INFO:             pickle5: Not installed
2024-04-15 18:13:54,395:INFO:         cloudpickle: 3.0.0
2024-04-15 18:13:54,395:INFO:         deprecation: 2.1.0
2024-04-15 18:13:54,395:INFO:              xxhash: 3.4.1
2024-04-15 18:13:54,395:INFO:           wurlitzer: Not installed
2024-04-15 18:13:54,395:INFO:PyCaret optional dependencies:
2024-04-15 18:13:54,396:INFO:                shap: Not installed
2024-04-15 18:13:54,396:INFO:           interpret: Not installed
2024-04-15 18:13:54,396:INFO:                umap: Not installed
2024-04-15 18:13:54,396:INFO:     ydata_profiling: Not installed
2024-04-15 18:13:54,396:INFO:  explainerdashboard: Not installed
2024-04-15 18:13:54,396:INFO:             autoviz: Not installed
2024-04-15 18:13:54,396:INFO:           fairlearn: Not installed
2024-04-15 18:13:54,396:INFO:          deepchecks: Not installed
2024-04-15 18:13:54,396:INFO:             xgboost: Not installed
2024-04-15 18:13:54,396:INFO:            catboost: Not installed
2024-04-15 18:13:54,396:INFO:              kmodes: Not installed
2024-04-15 18:13:54,396:INFO:             mlxtend: Not installed
2024-04-15 18:13:54,396:INFO:       statsforecast: Not installed
2024-04-15 18:13:54,396:INFO:        tune_sklearn: Not installed
2024-04-15 18:13:54,396:INFO:                 ray: Not installed
2024-04-15 18:13:54,396:INFO:            hyperopt: Not installed
2024-04-15 18:13:54,396:INFO:              optuna: Not installed
2024-04-15 18:13:54,396:INFO:               skopt: Not installed
2024-04-15 18:13:54,396:INFO:              mlflow: 2.11.3
2024-04-15 18:13:54,396:INFO:              gradio: Not installed
2024-04-15 18:13:54,396:INFO:             fastapi: Not installed
2024-04-15 18:13:54,396:INFO:             uvicorn: Not installed
2024-04-15 18:13:54,396:INFO:              m2cgen: Not installed
2024-04-15 18:13:54,396:INFO:           evidently: Not installed
2024-04-15 18:13:54,396:INFO:               fugue: Not installed
2024-04-15 18:13:54,396:INFO:           streamlit: 1.33.0
2024-04-15 18:13:54,396:INFO:             prophet: Not installed
2024-04-15 18:13:54,396:INFO:None
2024-04-15 18:13:54,396:INFO:Set up data.
2024-04-15 18:13:54,401:INFO:Set up folding strategy.
2024-04-15 18:13:54,401:INFO:Set up train/test split.
2024-04-15 18:13:54,402:INFO:Set up data.
2024-04-15 18:13:54,405:INFO:Set up index.
2024-04-15 18:13:54,405:INFO:Assigning column types.
2024-04-15 18:13:54,408:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-04-15 18:13:54,445:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 18:13:54,446:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 18:13:54,469:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,469:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,506:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-04-15 18:13:54,506:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 18:13:54,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,529:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-04-15 18:13:54,566:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 18:13:54,589:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,590:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,625:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-04-15 18:13:54,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,650:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,650:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-04-15 18:13:54,710:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,772:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,772:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,773:INFO:Preparing preprocessing pipeline...
2024-04-15 18:13:54,775:INFO:Set up simple imputation.
2024-04-15 18:13:54,775:INFO:Set up feature normalization.
2024-04-15 18:13:54,792:INFO:Finished creating preprocessing pipeline.
2024-04-15 18:13:54,795:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jpsar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['lat', 'lon', 'minutes_remaining',
                                             'period', 'playoffs',
                                             'shot_distance'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              v...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-04-15 18:13:54,795:INFO:Creating final display dataframe.
2024-04-15 18:13:54,864:INFO:Setup _display_container:                     Description             Value
0                    Session id              6451
1                        Target    shot_made_flag
2                   Target type            Binary
3           Original data shape        (20285, 7)
4        Transformed data shape        (20285, 7)
5   Transformed train set shape        (16228, 7)
6    Transformed test set shape         (4057, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12                    Normalize              True
13             Normalize method            zscore
14               Fold Generator   StratifiedKFold
15                  Fold Number                10
16                     CPU Jobs                -1
17                      Use GPU             False
18               Log Experiment             False
19              Experiment Name  clf-default-name
20                          USI              5bec
2024-04-15 18:13:54,947:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:54,947:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:55,007:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:55,007:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-04-15 18:13:55,008:INFO:setup() successfully completed in 0.62s...............
2024-04-15 18:13:55,008:INFO:Initializing compare_models()
2024-04-15 18:13:55,008:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, include=['lr', 'dt'], fold=None, round=4, cross_validation=True, sort=f1, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, 'include': ['lr', 'dt'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'f1', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-04-15 18:13:55,008:INFO:Checking exceptions
2024-04-15 18:13:55,012:INFO:Preparing display monitor
2024-04-15 18:13:55,030:INFO:Initializing Logistic Regression
2024-04-15 18:13:55,030:INFO:Total runtime is 0.0 minutes
2024-04-15 18:13:55,033:INFO:SubProcess create_model() called ==================================
2024-04-15 18:13:55,033:INFO:Initializing create_model()
2024-04-15 18:13:55,033:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C596CD6AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 18:13:55,033:INFO:Checking exceptions
2024-04-15 18:13:55,034:INFO:Importing libraries
2024-04-15 18:13:55,034:INFO:Copying training dataset
2024-04-15 18:13:55,040:INFO:Defining folds
2024-04-15 18:13:55,040:INFO:Declaring metric variables
2024-04-15 18:13:55,043:INFO:Importing untrained model
2024-04-15 18:13:55,045:INFO:Logistic Regression Imported successfully
2024-04-15 18:13:55,050:INFO:Starting cross validation
2024-04-15 18:13:55,051:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 18:13:59,065:INFO:Calculating mean and std
2024-04-15 18:13:59,068:INFO:Creating metrics dataframe
2024-04-15 18:13:59,073:INFO:Uploading results into container
2024-04-15 18:13:59,074:INFO:Uploading model into container now
2024-04-15 18:13:59,075:INFO:_master_model_container: 1
2024-04-15 18:13:59,075:INFO:_display_container: 2
2024-04-15 18:13:59,076:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6451, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 18:13:59,076:INFO:create_model() successfully completed......................................
2024-04-15 18:13:59,511:INFO:SubProcess create_model() end ==================================
2024-04-15 18:13:59,511:INFO:Creating metrics dataframe
2024-04-15 18:13:59,518:INFO:Initializing Decision Tree Classifier
2024-04-15 18:13:59,518:INFO:Total runtime is 0.07479195992151896 minutes
2024-04-15 18:13:59,521:INFO:SubProcess create_model() called ==================================
2024-04-15 18:13:59,521:INFO:Initializing create_model()
2024-04-15 18:13:59,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C596CD6AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 18:13:59,521:INFO:Checking exceptions
2024-04-15 18:13:59,521:INFO:Importing libraries
2024-04-15 18:13:59,521:INFO:Copying training dataset
2024-04-15 18:13:59,526:INFO:Defining folds
2024-04-15 18:13:59,526:INFO:Declaring metric variables
2024-04-15 18:13:59,529:INFO:Importing untrained model
2024-04-15 18:13:59,531:INFO:Decision Tree Classifier Imported successfully
2024-04-15 18:13:59,535:INFO:Starting cross validation
2024-04-15 18:13:59,536:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-04-15 18:14:01,523:INFO:Calculating mean and std
2024-04-15 18:14:01,525:INFO:Creating metrics dataframe
2024-04-15 18:14:01,529:INFO:Uploading results into container
2024-04-15 18:14:01,530:INFO:Uploading model into container now
2024-04-15 18:14:01,530:INFO:_master_model_container: 2
2024-04-15 18:14:01,531:INFO:_display_container: 2
2024-04-15 18:14:01,531:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6451, splitter='best')
2024-04-15 18:14:01,531:INFO:create_model() successfully completed......................................
2024-04-15 18:14:01,968:INFO:SubProcess create_model() end ==================================
2024-04-15 18:14:01,968:INFO:Creating metrics dataframe
2024-04-15 18:14:01,983:INFO:Initializing create_model()
2024-04-15 18:14:01,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6451, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 18:14:01,983:INFO:Checking exceptions
2024-04-15 18:14:01,985:INFO:Importing libraries
2024-04-15 18:14:01,985:INFO:Copying training dataset
2024-04-15 18:14:01,989:INFO:Defining folds
2024-04-15 18:14:01,989:INFO:Declaring metric variables
2024-04-15 18:14:01,989:INFO:Importing untrained model
2024-04-15 18:14:01,989:INFO:Declaring custom model
2024-04-15 18:14:01,990:INFO:Decision Tree Classifier Imported successfully
2024-04-15 18:14:01,990:INFO:Cross validation set to False
2024-04-15 18:14:01,990:INFO:Fitting Model
2024-04-15 18:14:02,043:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6451, splitter='best')
2024-04-15 18:14:02,044:INFO:create_model() successfully completed......................................
2024-04-15 18:14:02,421:INFO:Initializing create_model()
2024-04-15 18:14:02,422:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6451, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-04-15 18:14:02,422:INFO:Checking exceptions
2024-04-15 18:14:02,423:INFO:Importing libraries
2024-04-15 18:14:02,423:INFO:Copying training dataset
2024-04-15 18:14:02,427:INFO:Defining folds
2024-04-15 18:14:02,427:INFO:Declaring metric variables
2024-04-15 18:14:02,428:INFO:Importing untrained model
2024-04-15 18:14:02,428:INFO:Declaring custom model
2024-04-15 18:14:02,428:INFO:Logistic Regression Imported successfully
2024-04-15 18:14:02,429:INFO:Cross validation set to False
2024-04-15 18:14:02,429:INFO:Fitting Model
2024-04-15 18:14:02,444:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6451, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-04-15 18:14:02,444:INFO:create_model() successfully completed......................................
2024-04-15 18:14:02,847:INFO:_master_model_container: 2
2024-04-15 18:14:02,847:INFO:_display_container: 2
2024-04-15 18:14:02,848:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6451, splitter='best'), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6451, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)]
2024-04-15 18:14:02,848:INFO:compare_models() successfully completed......................................
2024-04-15 18:14:02,849:INFO:Initializing plot_model()
2024-04-15 18:14:02,849:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6451, splitter='best'), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, system=True)
2024-04-15 18:14:02,849:INFO:Checking exceptions
2024-04-15 18:14:02,853:INFO:Preloading libraries
2024-04-15 18:14:02,854:INFO:Copying training dataset
2024-04-15 18:14:02,854:INFO:Plot type: parameter
2024-04-15 18:14:02,856:INFO:Visual Rendered Successfully
2024-04-15 18:14:03,333:INFO:plot_model() successfully completed......................................
2024-04-15 18:14:03,360:INFO:Initializing predict_model()
2024-04-15 18:14:03,360:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=6451, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C5970209D0>)
2024-04-15 18:14:03,360:INFO:Checking exceptions
2024-04-15 18:14:03,360:INFO:Preloading libraries
2024-04-15 18:14:03,914:INFO:Initializing plot_model()
2024-04-15 18:14:03,914:INFO:plot_model(plot=parameter, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6451, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, system=True)
2024-04-15 18:14:03,914:INFO:Checking exceptions
2024-04-15 18:14:03,918:INFO:Preloading libraries
2024-04-15 18:14:03,918:INFO:Copying training dataset
2024-04-15 18:14:03,918:INFO:Plot type: parameter
2024-04-15 18:14:03,921:INFO:Visual Rendered Successfully
2024-04-15 18:14:04,271:INFO:plot_model() successfully completed......................................
2024-04-15 18:14:04,290:INFO:Initializing predict_model()
2024-04-15 18:14:04,291:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C5970C0DF0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6451, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C597E75E50>)
2024-04-15 18:14:04,291:INFO:Checking exceptions
2024-04-15 18:14:04,291:INFO:Preloading libraries
2024-04-15 18:14:04,865:INFO:Initializing load_model()
2024-04-15 18:14:04,865:INFO:load_model(model_name=./model_kobe, platform=None, authentication=None, verbose=True)
2024-04-15 18:14:04,928:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\types\utils.py:393: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.
  warnings.warn(

2024-04-15 18:14:08,062:WARNING:C:\Users\jpsar\AppData\Local\Temp\ipykernel_4768\1973998042.py:83: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  model_version = client.get_latest_versions(registered_model_name)[-1].version

2024-04-15 18:22:03,011:WARNING:c:\Projetos\Projeto Kobe\projeto_kobe\.venv\lib\site-packages\mlflow\store\artifact\utils\models.py:32: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/2.11.3/model-registry.html#migrating-from-stages
  latest = client.get_latest_versions(name, None if stage is None else [stage])

